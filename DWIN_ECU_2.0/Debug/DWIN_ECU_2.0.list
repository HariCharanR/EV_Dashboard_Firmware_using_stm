
DWIN_ECU_2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f3c  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08005104  08005104  00006104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800512c  0800512c  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  0800512c  0800512c  0000612c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005134  08005134  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005134  08005134  00006134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005138  08005138  00006138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800513c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  2000000c  08005148  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a8  08005148  000071a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b6e8  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c21  00000000  00000000  00012724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e0  00000000  00000000  00014348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006cf  00000000  00000000  00014c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021a64  00000000  00000000  000152f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bac3  00000000  00000000  00036d5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ccac8  00000000  00000000  0004281e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010f2e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002514  00000000  00000000  0010f32c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00111840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080050ec 	.word	0x080050ec

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080050ec 	.word	0x080050ec

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2uiz>:
 80009a4:	004a      	lsls	r2, r1, #1
 80009a6:	d211      	bcs.n	80009cc <__aeabi_d2uiz+0x28>
 80009a8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009ac:	d211      	bcs.n	80009d2 <__aeabi_d2uiz+0x2e>
 80009ae:	d50d      	bpl.n	80009cc <__aeabi_d2uiz+0x28>
 80009b0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b8:	d40e      	bmi.n	80009d8 <__aeabi_d2uiz+0x34>
 80009ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ca:	4770      	bx	lr
 80009cc:	f04f 0000 	mov.w	r0, #0
 80009d0:	4770      	bx	lr
 80009d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009d6:	d102      	bne.n	80009de <__aeabi_d2uiz+0x3a>
 80009d8:	f04f 30ff 	mov.w	r0, #4294967295
 80009dc:	4770      	bx	lr
 80009de:	f04f 0000 	mov.w	r0, #0
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_uldivmod>:
 80009e4:	b953      	cbnz	r3, 80009fc <__aeabi_uldivmod+0x18>
 80009e6:	b94a      	cbnz	r2, 80009fc <__aeabi_uldivmod+0x18>
 80009e8:	2900      	cmp	r1, #0
 80009ea:	bf08      	it	eq
 80009ec:	2800      	cmpeq	r0, #0
 80009ee:	bf1c      	itt	ne
 80009f0:	f04f 31ff 	movne.w	r1, #4294967295
 80009f4:	f04f 30ff 	movne.w	r0, #4294967295
 80009f8:	f000 b96a 	b.w	8000cd0 <__aeabi_idiv0>
 80009fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a04:	f000 f806 	bl	8000a14 <__udivmoddi4>
 8000a08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a10:	b004      	add	sp, #16
 8000a12:	4770      	bx	lr

08000a14 <__udivmoddi4>:
 8000a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a18:	9d08      	ldr	r5, [sp, #32]
 8000a1a:	460c      	mov	r4, r1
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d14e      	bne.n	8000abe <__udivmoddi4+0xaa>
 8000a20:	4694      	mov	ip, r2
 8000a22:	458c      	cmp	ip, r1
 8000a24:	4686      	mov	lr, r0
 8000a26:	fab2 f282 	clz	r2, r2
 8000a2a:	d962      	bls.n	8000af2 <__udivmoddi4+0xde>
 8000a2c:	b14a      	cbz	r2, 8000a42 <__udivmoddi4+0x2e>
 8000a2e:	f1c2 0320 	rsb	r3, r2, #32
 8000a32:	4091      	lsls	r1, r2
 8000a34:	fa20 f303 	lsr.w	r3, r0, r3
 8000a38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a3c:	4319      	orrs	r1, r3
 8000a3e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a42:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a46:	fa1f f68c 	uxth.w	r6, ip
 8000a4a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a4e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a52:	fb07 1114 	mls	r1, r7, r4, r1
 8000a56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a5a:	fb04 f106 	mul.w	r1, r4, r6
 8000a5e:	4299      	cmp	r1, r3
 8000a60:	d90a      	bls.n	8000a78 <__udivmoddi4+0x64>
 8000a62:	eb1c 0303 	adds.w	r3, ip, r3
 8000a66:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a6a:	f080 8112 	bcs.w	8000c92 <__udivmoddi4+0x27e>
 8000a6e:	4299      	cmp	r1, r3
 8000a70:	f240 810f 	bls.w	8000c92 <__udivmoddi4+0x27e>
 8000a74:	3c02      	subs	r4, #2
 8000a76:	4463      	add	r3, ip
 8000a78:	1a59      	subs	r1, r3, r1
 8000a7a:	fa1f f38e 	uxth.w	r3, lr
 8000a7e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a82:	fb07 1110 	mls	r1, r7, r0, r1
 8000a86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a8a:	fb00 f606 	mul.w	r6, r0, r6
 8000a8e:	429e      	cmp	r6, r3
 8000a90:	d90a      	bls.n	8000aa8 <__udivmoddi4+0x94>
 8000a92:	eb1c 0303 	adds.w	r3, ip, r3
 8000a96:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a9a:	f080 80fc 	bcs.w	8000c96 <__udivmoddi4+0x282>
 8000a9e:	429e      	cmp	r6, r3
 8000aa0:	f240 80f9 	bls.w	8000c96 <__udivmoddi4+0x282>
 8000aa4:	4463      	add	r3, ip
 8000aa6:	3802      	subs	r0, #2
 8000aa8:	1b9b      	subs	r3, r3, r6
 8000aaa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000aae:	2100      	movs	r1, #0
 8000ab0:	b11d      	cbz	r5, 8000aba <__udivmoddi4+0xa6>
 8000ab2:	40d3      	lsrs	r3, r2
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	e9c5 3200 	strd	r3, r2, [r5]
 8000aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000abe:	428b      	cmp	r3, r1
 8000ac0:	d905      	bls.n	8000ace <__udivmoddi4+0xba>
 8000ac2:	b10d      	cbz	r5, 8000ac8 <__udivmoddi4+0xb4>
 8000ac4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4608      	mov	r0, r1
 8000acc:	e7f5      	b.n	8000aba <__udivmoddi4+0xa6>
 8000ace:	fab3 f183 	clz	r1, r3
 8000ad2:	2900      	cmp	r1, #0
 8000ad4:	d146      	bne.n	8000b64 <__udivmoddi4+0x150>
 8000ad6:	42a3      	cmp	r3, r4
 8000ad8:	d302      	bcc.n	8000ae0 <__udivmoddi4+0xcc>
 8000ada:	4290      	cmp	r0, r2
 8000adc:	f0c0 80f0 	bcc.w	8000cc0 <__udivmoddi4+0x2ac>
 8000ae0:	1a86      	subs	r6, r0, r2
 8000ae2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ae6:	2001      	movs	r0, #1
 8000ae8:	2d00      	cmp	r5, #0
 8000aea:	d0e6      	beq.n	8000aba <__udivmoddi4+0xa6>
 8000aec:	e9c5 6300 	strd	r6, r3, [r5]
 8000af0:	e7e3      	b.n	8000aba <__udivmoddi4+0xa6>
 8000af2:	2a00      	cmp	r2, #0
 8000af4:	f040 8090 	bne.w	8000c18 <__udivmoddi4+0x204>
 8000af8:	eba1 040c 	sub.w	r4, r1, ip
 8000afc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b00:	fa1f f78c 	uxth.w	r7, ip
 8000b04:	2101      	movs	r1, #1
 8000b06:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b0a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b0e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b16:	fb07 f006 	mul.w	r0, r7, r6
 8000b1a:	4298      	cmp	r0, r3
 8000b1c:	d908      	bls.n	8000b30 <__udivmoddi4+0x11c>
 8000b1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b22:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b26:	d202      	bcs.n	8000b2e <__udivmoddi4+0x11a>
 8000b28:	4298      	cmp	r0, r3
 8000b2a:	f200 80cd 	bhi.w	8000cc8 <__udivmoddi4+0x2b4>
 8000b2e:	4626      	mov	r6, r4
 8000b30:	1a1c      	subs	r4, r3, r0
 8000b32:	fa1f f38e 	uxth.w	r3, lr
 8000b36:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b3a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b3e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b42:	fb00 f707 	mul.w	r7, r0, r7
 8000b46:	429f      	cmp	r7, r3
 8000b48:	d908      	bls.n	8000b5c <__udivmoddi4+0x148>
 8000b4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b52:	d202      	bcs.n	8000b5a <__udivmoddi4+0x146>
 8000b54:	429f      	cmp	r7, r3
 8000b56:	f200 80b0 	bhi.w	8000cba <__udivmoddi4+0x2a6>
 8000b5a:	4620      	mov	r0, r4
 8000b5c:	1bdb      	subs	r3, r3, r7
 8000b5e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b62:	e7a5      	b.n	8000ab0 <__udivmoddi4+0x9c>
 8000b64:	f1c1 0620 	rsb	r6, r1, #32
 8000b68:	408b      	lsls	r3, r1
 8000b6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b6e:	431f      	orrs	r7, r3
 8000b70:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b74:	fa04 f301 	lsl.w	r3, r4, r1
 8000b78:	ea43 030c 	orr.w	r3, r3, ip
 8000b7c:	40f4      	lsrs	r4, r6
 8000b7e:	fa00 f801 	lsl.w	r8, r0, r1
 8000b82:	0c38      	lsrs	r0, r7, #16
 8000b84:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b88:	fbb4 fef0 	udiv	lr, r4, r0
 8000b8c:	fa1f fc87 	uxth.w	ip, r7
 8000b90:	fb00 441e 	mls	r4, r0, lr, r4
 8000b94:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b98:	fb0e f90c 	mul.w	r9, lr, ip
 8000b9c:	45a1      	cmp	r9, r4
 8000b9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000ba2:	d90a      	bls.n	8000bba <__udivmoddi4+0x1a6>
 8000ba4:	193c      	adds	r4, r7, r4
 8000ba6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000baa:	f080 8084 	bcs.w	8000cb6 <__udivmoddi4+0x2a2>
 8000bae:	45a1      	cmp	r9, r4
 8000bb0:	f240 8081 	bls.w	8000cb6 <__udivmoddi4+0x2a2>
 8000bb4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bb8:	443c      	add	r4, r7
 8000bba:	eba4 0409 	sub.w	r4, r4, r9
 8000bbe:	fa1f f983 	uxth.w	r9, r3
 8000bc2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000bc6:	fb00 4413 	mls	r4, r0, r3, r4
 8000bca:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bce:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bd2:	45a4      	cmp	ip, r4
 8000bd4:	d907      	bls.n	8000be6 <__udivmoddi4+0x1d2>
 8000bd6:	193c      	adds	r4, r7, r4
 8000bd8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000bdc:	d267      	bcs.n	8000cae <__udivmoddi4+0x29a>
 8000bde:	45a4      	cmp	ip, r4
 8000be0:	d965      	bls.n	8000cae <__udivmoddi4+0x29a>
 8000be2:	3b02      	subs	r3, #2
 8000be4:	443c      	add	r4, r7
 8000be6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000bea:	fba0 9302 	umull	r9, r3, r0, r2
 8000bee:	eba4 040c 	sub.w	r4, r4, ip
 8000bf2:	429c      	cmp	r4, r3
 8000bf4:	46ce      	mov	lr, r9
 8000bf6:	469c      	mov	ip, r3
 8000bf8:	d351      	bcc.n	8000c9e <__udivmoddi4+0x28a>
 8000bfa:	d04e      	beq.n	8000c9a <__udivmoddi4+0x286>
 8000bfc:	b155      	cbz	r5, 8000c14 <__udivmoddi4+0x200>
 8000bfe:	ebb8 030e 	subs.w	r3, r8, lr
 8000c02:	eb64 040c 	sbc.w	r4, r4, ip
 8000c06:	fa04 f606 	lsl.w	r6, r4, r6
 8000c0a:	40cb      	lsrs	r3, r1
 8000c0c:	431e      	orrs	r6, r3
 8000c0e:	40cc      	lsrs	r4, r1
 8000c10:	e9c5 6400 	strd	r6, r4, [r5]
 8000c14:	2100      	movs	r1, #0
 8000c16:	e750      	b.n	8000aba <__udivmoddi4+0xa6>
 8000c18:	f1c2 0320 	rsb	r3, r2, #32
 8000c1c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c24:	fa24 f303 	lsr.w	r3, r4, r3
 8000c28:	4094      	lsls	r4, r2
 8000c2a:	430c      	orrs	r4, r1
 8000c2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c30:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c34:	fa1f f78c 	uxth.w	r7, ip
 8000c38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c3c:	fb08 3110 	mls	r1, r8, r0, r3
 8000c40:	0c23      	lsrs	r3, r4, #16
 8000c42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c46:	fb00 f107 	mul.w	r1, r0, r7
 8000c4a:	4299      	cmp	r1, r3
 8000c4c:	d908      	bls.n	8000c60 <__udivmoddi4+0x24c>
 8000c4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c52:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c56:	d22c      	bcs.n	8000cb2 <__udivmoddi4+0x29e>
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	d92a      	bls.n	8000cb2 <__udivmoddi4+0x29e>
 8000c5c:	3802      	subs	r0, #2
 8000c5e:	4463      	add	r3, ip
 8000c60:	1a5b      	subs	r3, r3, r1
 8000c62:	b2a4      	uxth	r4, r4
 8000c64:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c68:	fb08 3311 	mls	r3, r8, r1, r3
 8000c6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c70:	fb01 f307 	mul.w	r3, r1, r7
 8000c74:	42a3      	cmp	r3, r4
 8000c76:	d908      	bls.n	8000c8a <__udivmoddi4+0x276>
 8000c78:	eb1c 0404 	adds.w	r4, ip, r4
 8000c7c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c80:	d213      	bcs.n	8000caa <__udivmoddi4+0x296>
 8000c82:	42a3      	cmp	r3, r4
 8000c84:	d911      	bls.n	8000caa <__udivmoddi4+0x296>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4464      	add	r4, ip
 8000c8a:	1ae4      	subs	r4, r4, r3
 8000c8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c90:	e739      	b.n	8000b06 <__udivmoddi4+0xf2>
 8000c92:	4604      	mov	r4, r0
 8000c94:	e6f0      	b.n	8000a78 <__udivmoddi4+0x64>
 8000c96:	4608      	mov	r0, r1
 8000c98:	e706      	b.n	8000aa8 <__udivmoddi4+0x94>
 8000c9a:	45c8      	cmp	r8, r9
 8000c9c:	d2ae      	bcs.n	8000bfc <__udivmoddi4+0x1e8>
 8000c9e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ca2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ca6:	3801      	subs	r0, #1
 8000ca8:	e7a8      	b.n	8000bfc <__udivmoddi4+0x1e8>
 8000caa:	4631      	mov	r1, r6
 8000cac:	e7ed      	b.n	8000c8a <__udivmoddi4+0x276>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	e799      	b.n	8000be6 <__udivmoddi4+0x1d2>
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	e7d4      	b.n	8000c60 <__udivmoddi4+0x24c>
 8000cb6:	46d6      	mov	lr, sl
 8000cb8:	e77f      	b.n	8000bba <__udivmoddi4+0x1a6>
 8000cba:	4463      	add	r3, ip
 8000cbc:	3802      	subs	r0, #2
 8000cbe:	e74d      	b.n	8000b5c <__udivmoddi4+0x148>
 8000cc0:	4606      	mov	r6, r0
 8000cc2:	4623      	mov	r3, r4
 8000cc4:	4608      	mov	r0, r1
 8000cc6:	e70f      	b.n	8000ae8 <__udivmoddi4+0xd4>
 8000cc8:	3e02      	subs	r6, #2
 8000cca:	4463      	add	r3, ip
 8000ccc:	e730      	b.n	8000b30 <__udivmoddi4+0x11c>
 8000cce:	bf00      	nop

08000cd0 <__aeabi_idiv0>:
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	0000      	movs	r0, r0
	...

08000cd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cde:	f000 fe9b 	bl	8001a18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ce2:	f000 f91d 	bl	8000f20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ce6:	f000 fa31 	bl	800114c <MX_GPIO_Init>
  MX_DMA_Init();
 8000cea:	f000 fa0f 	bl	800110c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000cee:	f000 f9e3 	bl	80010b8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000cf2:	f000 f9b7 	bl	8001064 <MX_USART1_UART_Init>
  MX_CAN1_Init();
 8000cf6:	f000 f97f 	bl	8000ff8 <MX_CAN1_Init>
//  MX_I2C1_Init();
  /* USER CODE BEGIN 2 */
  filter_config();
 8000cfa:	f000 faaf 	bl	800125c <filter_config>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_BUSOFF | CAN_IT_RX_FIFO0_MSG_PENDING);
 8000cfe:	f240 4102 	movw	r1, #1026	@ 0x402
 8000d02:	4883      	ldr	r0, [pc, #524]	@ (8000f10 <main+0x238>)
 8000d04:	f001 fb30 	bl	8002368 <HAL_CAN_ActivateNotification>

  if(HAL_CAN_Start(&hcan1) != HAL_OK){
 8000d08:	4881      	ldr	r0, [pc, #516]	@ (8000f10 <main+0x238>)
 8000d0a:	f001 f8f7 	bl	8001efc <HAL_CAN_Start>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <main+0x40>
	  Error_Handler();
 8000d14:	f000 fcb0 	bl	8001678 <Error_Handler>
  }
  	  flags.soc_frame = 0;
 8000d18:	4b7e      	ldr	r3, [pc, #504]	@ (8000f14 <main+0x23c>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	701a      	strb	r2, [r3, #0]
  	  flags.ah_frame = 0;
 8000d1e:	4b7d      	ldr	r3, [pc, #500]	@ (8000f14 <main+0x23c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	70da      	strb	r2, [r3, #3]
  	  flags.temp_frame = 0;
 8000d24:	4b7b      	ldr	r3, [pc, #492]	@ (8000f14 <main+0x23c>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	709a      	strb	r2, [r3, #2]
  	  flags.vol_frame = 0;
 8000d2a:	4b7a      	ldr	r3, [pc, #488]	@ (8000f14 <main+0x23c>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	705a      	strb	r2, [r3, #1]
  	  flags.motor_frame = 0;
 8000d30:	4b78      	ldr	r3, [pc, #480]	@ (8000f14 <main+0x23c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	711a      	strb	r2, [r3, #4]
  {
    /* USER CODE END WHILE */


    /* USER CODE BEGIN 3 */
	  if(flags.motor_frame == 1){
 8000d36:	4b77      	ldr	r3, [pc, #476]	@ (8000f14 <main+0x23c>)
 8000d38:	791b      	ldrb	r3, [r3, #4]
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d13a      	bne.n	8000db4 <main+0xdc>
		  uint16_t speed = ((3*3.14*0.2413) / 25) * (motor.freq * 60);
 8000d3e:	4b76      	ldr	r3, [pc, #472]	@ (8000f18 <main+0x240>)
 8000d40:	785b      	ldrb	r3, [r3, #1]
 8000d42:	461a      	mov	r2, r3
 8000d44:	4613      	mov	r3, r2
 8000d46:	011b      	lsls	r3, r3, #4
 8000d48:	1a9b      	subs	r3, r3, r2
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff fbad 	bl	80004ac <__aeabi_i2d>
 8000d52:	a36b      	add	r3, pc, #428	@ (adr r3, 8000f00 <main+0x228>)
 8000d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d58:	f7ff fc12 	bl	8000580 <__aeabi_dmul>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	460b      	mov	r3, r1
 8000d60:	4610      	mov	r0, r2
 8000d62:	4619      	mov	r1, r3
 8000d64:	f7ff fe1e 	bl	80009a4 <__aeabi_d2uiz>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	80bb      	strh	r3, [r7, #4]
		  uart_tx(0x1800, motor.temp);
 8000d6c:	4b6a      	ldr	r3, [pc, #424]	@ (8000f18 <main+0x240>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	4619      	mov	r1, r3
 8000d72:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8000d76:	f000 fc4b 	bl	8001610 <uart_tx>
		  uart_tx(0x1900 , speed / 3.86);
 8000d7a:	88bb      	ldrh	r3, [r7, #4]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fb95 	bl	80004ac <__aeabi_i2d>
 8000d82:	a361      	add	r3, pc, #388	@ (adr r3, 8000f08 <main+0x230>)
 8000d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d88:	f7ff fd24 	bl	80007d4 <__aeabi_ddiv>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	460b      	mov	r3, r1
 8000d90:	4610      	mov	r0, r2
 8000d92:	4619      	mov	r1, r3
 8000d94:	f7ff fe06 	bl	80009a4 <__aeabi_d2uiz>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 8000da2:	f000 fc35 	bl	8001610 <uart_tx>
//		  sprintf(msg , "MOTOR PARAMETERS:\nFREQ:%d\nTEMP:%d\n",  motor.temp , motor.freq);
//		  HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
		  led_indicate(1);
 8000da6:	2001      	movs	r0, #1
 8000da8:	f000 fa7e 	bl	80012a8 <led_indicate>
		  flags.motor_frame = 0;
 8000dac:	4b59      	ldr	r3, [pc, #356]	@ (8000f14 <main+0x23c>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	711a      	strb	r2, [r3, #4]
 8000db2:	e007      	b.n	8000dc4 <main+0xec>

	  }else{
	  sendRequest(5);
 8000db4:	2005      	movs	r0, #5
 8000db6:	f000 fbd3 	bl	8001560 <sendRequest>
	  while(flags.motor_frame != 1);
 8000dba:	bf00      	nop
 8000dbc:	4b55      	ldr	r3, [pc, #340]	@ (8000f14 <main+0x23c>)
 8000dbe:	791b      	ldrb	r3, [r3, #4]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d1fb      	bne.n	8000dbc <main+0xe4>
	  }

	  	  if(flags.soc_frame == 1){
 8000dc4:	4b53      	ldr	r3, [pc, #332]	@ (8000f14 <main+0x23c>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d130      	bne.n	8000e2e <main+0x156>
	  		  uint16_t power = 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	80fb      	strh	r3, [r7, #6]
	  		  if(bat.charging_status == 0x2 || bat.charging_status == 0x0){
 8000dd0:	4b52      	ldr	r3, [pc, #328]	@ (8000f1c <main+0x244>)
 8000dd2:	7a9b      	ldrb	r3, [r3, #10]
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d003      	beq.n	8000de0 <main+0x108>
 8000dd8:	4b50      	ldr	r3, [pc, #320]	@ (8000f1c <main+0x244>)
 8000dda:	7a9b      	ldrb	r3, [r3, #10]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d107      	bne.n	8000df0 <main+0x118>
	  			  power = bat.cum_vol * bat.current;
 8000de0:	4b4e      	ldr	r3, [pc, #312]	@ (8000f1c <main+0x244>)
 8000de2:	795b      	ldrb	r3, [r3, #5]
 8000de4:	461a      	mov	r2, r3
 8000de6:	4b4d      	ldr	r3, [pc, #308]	@ (8000f1c <main+0x244>)
 8000de8:	885b      	ldrh	r3, [r3, #2]
 8000dea:	fb12 f303 	smulbb	r3, r2, r3
 8000dee:	80fb      	strh	r3, [r7, #6]
	  		  }
	  		  uart_tx(0x1000, bat.soc);
 8000df0:	4b4a      	ldr	r3, [pc, #296]	@ (8000f1c <main+0x244>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	4619      	mov	r1, r3
 8000df6:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000dfa:	f000 fc09 	bl	8001610 <uart_tx>
	  		  uart_tx(0x1100 , bat.current);
 8000dfe:	4b47      	ldr	r3, [pc, #284]	@ (8000f1c <main+0x244>)
 8000e00:	885b      	ldrh	r3, [r3, #2]
 8000e02:	4619      	mov	r1, r3
 8000e04:	f44f 5088 	mov.w	r0, #4352	@ 0x1100
 8000e08:	f000 fc02 	bl	8001610 <uart_tx>
	  		  uart_tx(0x1200 , bat.cum_vol);
 8000e0c:	4b43      	ldr	r3, [pc, #268]	@ (8000f1c <main+0x244>)
 8000e0e:	795b      	ldrb	r3, [r3, #5]
 8000e10:	4619      	mov	r1, r3
 8000e12:	f44f 5090 	mov.w	r0, #4608	@ 0x1200
 8000e16:	f000 fbfb 	bl	8001610 <uart_tx>
	  		  uart_tx(0x1300 , power);
 8000e1a:	88fb      	ldrh	r3, [r7, #6]
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8000e22:	f000 fbf5 	bl	8001610 <uart_tx>
//	  		  sprintf(msg , "Battery Parameters:\nsoc:%d\ncurrent:%d\nvoltage:%d\npower:%d\n\n\n", bat.soc , bat.current , bat.cum_vol , power);
//	  		  HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
	  		  flags.soc_frame = 0;
 8000e26:	4b3b      	ldr	r3, [pc, #236]	@ (8000f14 <main+0x23c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	701a      	strb	r2, [r3, #0]
 8000e2c:	e007      	b.n	8000e3e <main+0x166>
	  	  }else{
	  sendRequest(1);
 8000e2e:	2001      	movs	r0, #1
 8000e30:	f000 fb96 	bl	8001560 <sendRequest>
	  	  	while(flags.soc_frame != 1);
 8000e34:	bf00      	nop
 8000e36:	4b37      	ldr	r3, [pc, #220]	@ (8000f14 <main+0x23c>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d1fb      	bne.n	8000e36 <main+0x15e>
	  	  }
	  	  if(flags.vol_frame == 1){
 8000e3e:	4b35      	ldr	r3, [pc, #212]	@ (8000f14 <main+0x23c>)
 8000e40:	785b      	ldrb	r3, [r3, #1]
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d113      	bne.n	8000e6e <main+0x196>
	  		  uint16_t avg_vol = (bat.cell_vol[0] + bat.cell_vol[1]) / 2;
 8000e46:	4b35      	ldr	r3, [pc, #212]	@ (8000f1c <main+0x244>)
 8000e48:	799b      	ldrb	r3, [r3, #6]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	4b33      	ldr	r3, [pc, #204]	@ (8000f1c <main+0x244>)
 8000e4e:	79db      	ldrb	r3, [r3, #7]
 8000e50:	4413      	add	r3, r2
 8000e52:	0fda      	lsrs	r2, r3, #31
 8000e54:	4413      	add	r3, r2
 8000e56:	105b      	asrs	r3, r3, #1
 8000e58:	807b      	strh	r3, [r7, #2]
	  		  uart_tx(0x1400 , avg_vol);
 8000e5a:	887b      	ldrh	r3, [r7, #2]
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8000e62:	f000 fbd5 	bl	8001610 <uart_tx>
//	  		  sprintf(msg , "Avg Cell Voltage : %d" , avg_vol);
//	  		  HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
	  		  flags.vol_frame = 0;
 8000e66:	4b2b      	ldr	r3, [pc, #172]	@ (8000f14 <main+0x23c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	705a      	strb	r2, [r3, #1]
 8000e6c:	e007      	b.n	8000e7e <main+0x1a6>
	  	  }else{

	  	  sendRequest(2);
 8000e6e:	2002      	movs	r0, #2
 8000e70:	f000 fb76 	bl	8001560 <sendRequest>
	  	  while(flags.vol_frame != 1);
 8000e74:	bf00      	nop
 8000e76:	4b27      	ldr	r3, [pc, #156]	@ (8000f14 <main+0x23c>)
 8000e78:	785b      	ldrb	r3, [r3, #1]
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d1fb      	bne.n	8000e76 <main+0x19e>
	  	  }
	  	  if(flags.temp_frame == 1){
 8000e7e:	4b25      	ldr	r3, [pc, #148]	@ (8000f14 <main+0x23c>)
 8000e80:	789b      	ldrb	r3, [r3, #2]
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d113      	bne.n	8000eae <main+0x1d6>
	  		  uint16_t avg_temp = (bat.cell_temp[0] + bat.cell_temp[1]) / 2;
 8000e86:	4b25      	ldr	r3, [pc, #148]	@ (8000f1c <main+0x244>)
 8000e88:	7a1b      	ldrb	r3, [r3, #8]
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	4b23      	ldr	r3, [pc, #140]	@ (8000f1c <main+0x244>)
 8000e8e:	7a5b      	ldrb	r3, [r3, #9]
 8000e90:	4413      	add	r3, r2
 8000e92:	0fda      	lsrs	r2, r3, #31
 8000e94:	4413      	add	r3, r2
 8000e96:	105b      	asrs	r3, r3, #1
 8000e98:	803b      	strh	r3, [r7, #0]
	  		  uart_tx(0x1500 ,avg_temp);
 8000e9a:	883b      	ldrh	r3, [r7, #0]
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8000ea2:	f000 fbb5 	bl	8001610 <uart_tx>
//	  		  sprintf(msg , "Avg Cell Temp : %d" , avg_temp);
//	  		  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
	  		  flags.temp_frame = 0;
 8000ea6:	4b1b      	ldr	r3, [pc, #108]	@ (8000f14 <main+0x23c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	709a      	strb	r2, [r3, #2]
 8000eac:	e007      	b.n	8000ebe <main+0x1e6>
	  	  }else{
	  	  sendRequest(3);
 8000eae:	2003      	movs	r0, #3
 8000eb0:	f000 fb56 	bl	8001560 <sendRequest>
	  	  while(flags.temp_frame != 1);
 8000eb4:	bf00      	nop
 8000eb6:	4b17      	ldr	r3, [pc, #92]	@ (8000f14 <main+0x23c>)
 8000eb8:	789b      	ldrb	r3, [r3, #2]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d1fb      	bne.n	8000eb6 <main+0x1de>
	  	  }
	  	  if(flags.ah_frame==1){
 8000ebe:	4b15      	ldr	r3, [pc, #84]	@ (8000f14 <main+0x23c>)
 8000ec0:	78db      	ldrb	r3, [r3, #3]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d111      	bne.n	8000eea <main+0x212>
	  		  uart_tx(0x1600 , bat.charging_status);
 8000ec6:	4b15      	ldr	r3, [pc, #84]	@ (8000f1c <main+0x244>)
 8000ec8:	7a9b      	ldrb	r3, [r3, #10]
 8000eca:	4619      	mov	r1, r3
 8000ecc:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8000ed0:	f000 fb9e 	bl	8001610 <uart_tx>
	  		  uart_tx(0x1700 , bat.rem_ah);
 8000ed4:	4b11      	ldr	r3, [pc, #68]	@ (8000f1c <main+0x244>)
 8000ed6:	899b      	ldrh	r3, [r3, #12]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f44f 50b8 	mov.w	r0, #5888	@ 0x1700
 8000ede:	f000 fb97 	bl	8001610 <uart_tx>
//	  		  sprintf(msg , "Charging_status:%d\nAH:%d\n" , bat.charging_status , bat.rem_ah);
//	  		  HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
	  		  flags.ah_frame = 0;
 8000ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8000f14 <main+0x23c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	70da      	strb	r2, [r3, #3]
 8000ee8:	e725      	b.n	8000d36 <main+0x5e>
	  	  }else{

	  	  sendRequest(4);
 8000eea:	2004      	movs	r0, #4
 8000eec:	f000 fb38 	bl	8001560 <sendRequest>
	  	  while(flags.ah_frame != 1);
 8000ef0:	bf00      	nop
 8000ef2:	4b08      	ldr	r3, [pc, #32]	@ (8000f14 <main+0x23c>)
 8000ef4:	78db      	ldrb	r3, [r3, #3]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d1fb      	bne.n	8000ef2 <main+0x21a>
	  if(flags.motor_frame == 1){
 8000efa:	e71c      	b.n	8000d36 <main+0x5e>
 8000efc:	f3af 8000 	nop.w
 8000f00:	594ac9fd 	.word	0x594ac9fd
 8000f04:	3fb746a7 	.word	0x3fb746a7
 8000f08:	ae147ae1 	.word	0xae147ae1
 8000f0c:	400ee147 	.word	0x400ee147
 8000f10:	20000028 	.word	0x20000028
 8000f14:	20000198 	.word	0x20000198
 8000f18:	200001a0 	.word	0x200001a0
 8000f1c:	20000188 	.word	0x20000188

08000f20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b094      	sub	sp, #80	@ 0x50
 8000f24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f26:	f107 031c 	add.w	r3, r7, #28
 8000f2a:	2234      	movs	r2, #52	@ 0x34
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f004 f8b0 	bl	8005094 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f34:	f107 0308 	add.w	r3, r7, #8
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f44:	2300      	movs	r3, #0
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	4b29      	ldr	r3, [pc, #164]	@ (8000ff0 <SystemClock_Config+0xd0>)
 8000f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4c:	4a28      	ldr	r2, [pc, #160]	@ (8000ff0 <SystemClock_Config+0xd0>)
 8000f4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f52:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f54:	4b26      	ldr	r3, [pc, #152]	@ (8000ff0 <SystemClock_Config+0xd0>)
 8000f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f60:	2300      	movs	r3, #0
 8000f62:	603b      	str	r3, [r7, #0]
 8000f64:	4b23      	ldr	r3, [pc, #140]	@ (8000ff4 <SystemClock_Config+0xd4>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f6c:	4a21      	ldr	r2, [pc, #132]	@ (8000ff4 <SystemClock_Config+0xd4>)
 8000f6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f72:	6013      	str	r3, [r2, #0]
 8000f74:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff4 <SystemClock_Config+0xd4>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f7c:	603b      	str	r3, [r7, #0]
 8000f7e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f80:	2301      	movs	r3, #1
 8000f82:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f84:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f88:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f8e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f92:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f94:	2304      	movs	r3, #4
 8000f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000f98:	2354      	movs	r3, #84	@ 0x54
 8000f9a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa8:	f107 031c 	add.w	r3, r7, #28
 8000fac:	4618      	mov	r0, r3
 8000fae:	f002 fdd1 	bl	8003b54 <HAL_RCC_OscConfig>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000fb8:	f000 fb5e 	bl	8001678 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fbc:	230f      	movs	r3, #15
 8000fbe:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fcc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fd2:	f107 0308 	add.w	r3, r7, #8
 8000fd6:	2102      	movs	r1, #2
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f002 fa71 	bl	80034c0 <HAL_RCC_ClockConfig>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000fe4:	f000 fb48 	bl	8001678 <Error_Handler>
  }
}
 8000fe8:	bf00      	nop
 8000fea:	3750      	adds	r7, #80	@ 0x50
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40007000 	.word	0x40007000

08000ff8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000ffc:	4b17      	ldr	r3, [pc, #92]	@ (800105c <MX_CAN1_Init+0x64>)
 8000ffe:	4a18      	ldr	r2, [pc, #96]	@ (8001060 <MX_CAN1_Init+0x68>)
 8001000:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 8001002:	4b16      	ldr	r3, [pc, #88]	@ (800105c <MX_CAN1_Init+0x64>)
 8001004:	220c      	movs	r2, #12
 8001006:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001008:	4b14      	ldr	r3, [pc, #80]	@ (800105c <MX_CAN1_Init+0x64>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800100e:	4b13      	ldr	r3, [pc, #76]	@ (800105c <MX_CAN1_Init+0x64>)
 8001010:	2200      	movs	r2, #0
 8001012:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8001014:	4b11      	ldr	r3, [pc, #68]	@ (800105c <MX_CAN1_Init+0x64>)
 8001016:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 800101a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800101c:	4b0f      	ldr	r3, [pc, #60]	@ (800105c <MX_CAN1_Init+0x64>)
 800101e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001022:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001024:	4b0d      	ldr	r3, [pc, #52]	@ (800105c <MX_CAN1_Init+0x64>)
 8001026:	2200      	movs	r2, #0
 8001028:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 800102a:	4b0c      	ldr	r3, [pc, #48]	@ (800105c <MX_CAN1_Init+0x64>)
 800102c:	2201      	movs	r2, #1
 800102e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001030:	4b0a      	ldr	r3, [pc, #40]	@ (800105c <MX_CAN1_Init+0x64>)
 8001032:	2200      	movs	r2, #0
 8001034:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001036:	4b09      	ldr	r3, [pc, #36]	@ (800105c <MX_CAN1_Init+0x64>)
 8001038:	2200      	movs	r2, #0
 800103a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800103c:	4b07      	ldr	r3, [pc, #28]	@ (800105c <MX_CAN1_Init+0x64>)
 800103e:	2200      	movs	r2, #0
 8001040:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001042:	4b06      	ldr	r3, [pc, #24]	@ (800105c <MX_CAN1_Init+0x64>)
 8001044:	2200      	movs	r2, #0
 8001046:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001048:	4804      	ldr	r0, [pc, #16]	@ (800105c <MX_CAN1_Init+0x64>)
 800104a:	f000 fd7b 	bl	8001b44 <HAL_CAN_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001054:	f000 fb10 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000028 	.word	0x20000028
 8001060:	40006400 	.word	0x40006400

08001064 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001068:	4b11      	ldr	r3, [pc, #68]	@ (80010b0 <MX_USART1_UART_Init+0x4c>)
 800106a:	4a12      	ldr	r2, [pc, #72]	@ (80010b4 <MX_USART1_UART_Init+0x50>)
 800106c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800106e:	4b10      	ldr	r3, [pc, #64]	@ (80010b0 <MX_USART1_UART_Init+0x4c>)
 8001070:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001074:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001076:	4b0e      	ldr	r3, [pc, #56]	@ (80010b0 <MX_USART1_UART_Init+0x4c>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800107c:	4b0c      	ldr	r3, [pc, #48]	@ (80010b0 <MX_USART1_UART_Init+0x4c>)
 800107e:	2200      	movs	r2, #0
 8001080:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001082:	4b0b      	ldr	r3, [pc, #44]	@ (80010b0 <MX_USART1_UART_Init+0x4c>)
 8001084:	2200      	movs	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001088:	4b09      	ldr	r3, [pc, #36]	@ (80010b0 <MX_USART1_UART_Init+0x4c>)
 800108a:	220c      	movs	r2, #12
 800108c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800108e:	4b08      	ldr	r3, [pc, #32]	@ (80010b0 <MX_USART1_UART_Init+0x4c>)
 8001090:	2200      	movs	r2, #0
 8001092:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001094:	4b06      	ldr	r3, [pc, #24]	@ (80010b0 <MX_USART1_UART_Init+0x4c>)
 8001096:	2200      	movs	r2, #0
 8001098:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800109a:	4805      	ldr	r0, [pc, #20]	@ (80010b0 <MX_USART1_UART_Init+0x4c>)
 800109c:	f002 fff8 	bl	8004090 <HAL_UART_Init>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80010a6:	f000 fae7 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000050 	.word	0x20000050
 80010b4:	40011000 	.word	0x40011000

080010b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010bc:	4b11      	ldr	r3, [pc, #68]	@ (8001104 <MX_USART2_UART_Init+0x4c>)
 80010be:	4a12      	ldr	r2, [pc, #72]	@ (8001108 <MX_USART2_UART_Init+0x50>)
 80010c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010c2:	4b10      	ldr	r3, [pc, #64]	@ (8001104 <MX_USART2_UART_Init+0x4c>)
 80010c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001104 <MX_USART2_UART_Init+0x4c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001104 <MX_USART2_UART_Init+0x4c>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001104 <MX_USART2_UART_Init+0x4c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010dc:	4b09      	ldr	r3, [pc, #36]	@ (8001104 <MX_USART2_UART_Init+0x4c>)
 80010de:	220c      	movs	r2, #12
 80010e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010e2:	4b08      	ldr	r3, [pc, #32]	@ (8001104 <MX_USART2_UART_Init+0x4c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010e8:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <MX_USART2_UART_Init+0x4c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010ee:	4805      	ldr	r0, [pc, #20]	@ (8001104 <MX_USART2_UART_Init+0x4c>)
 80010f0:	f002 ffce 	bl	8004090 <HAL_UART_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010fa:	f000 fabd 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000098 	.word	0x20000098
 8001108:	40004400 	.word	0x40004400

0800110c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	607b      	str	r3, [r7, #4]
 8001116:	4b0c      	ldr	r3, [pc, #48]	@ (8001148 <MX_DMA_Init+0x3c>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111a:	4a0b      	ldr	r2, [pc, #44]	@ (8001148 <MX_DMA_Init+0x3c>)
 800111c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001120:	6313      	str	r3, [r2, #48]	@ 0x30
 8001122:	4b09      	ldr	r3, [pc, #36]	@ (8001148 <MX_DMA_Init+0x3c>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001126:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800112e:	2200      	movs	r2, #0
 8001130:	2100      	movs	r1, #0
 8001132:	2046      	movs	r0, #70	@ 0x46
 8001134:	f001 fc49 	bl	80029ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001138:	2046      	movs	r0, #70	@ 0x46
 800113a:	f001 fc62 	bl	8002a02 <HAL_NVIC_EnableIRQ>

}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40023800 	.word	0x40023800

0800114c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08a      	sub	sp, #40	@ 0x28
 8001150:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001152:	f107 0314 	add.w	r3, r7, #20
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]
 8001160:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	613b      	str	r3, [r7, #16]
 8001166:	4b39      	ldr	r3, [pc, #228]	@ (800124c <MX_GPIO_Init+0x100>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	4a38      	ldr	r2, [pc, #224]	@ (800124c <MX_GPIO_Init+0x100>)
 800116c:	f043 0304 	orr.w	r3, r3, #4
 8001170:	6313      	str	r3, [r2, #48]	@ 0x30
 8001172:	4b36      	ldr	r3, [pc, #216]	@ (800124c <MX_GPIO_Init+0x100>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001176:	f003 0304 	and.w	r3, r3, #4
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	4b32      	ldr	r3, [pc, #200]	@ (800124c <MX_GPIO_Init+0x100>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001186:	4a31      	ldr	r2, [pc, #196]	@ (800124c <MX_GPIO_Init+0x100>)
 8001188:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800118c:	6313      	str	r3, [r2, #48]	@ 0x30
 800118e:	4b2f      	ldr	r3, [pc, #188]	@ (800124c <MX_GPIO_Init+0x100>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	4b2b      	ldr	r3, [pc, #172]	@ (800124c <MX_GPIO_Init+0x100>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	4a2a      	ldr	r2, [pc, #168]	@ (800124c <MX_GPIO_Init+0x100>)
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011aa:	4b28      	ldr	r3, [pc, #160]	@ (800124c <MX_GPIO_Init+0x100>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	607b      	str	r3, [r7, #4]
 80011ba:	4b24      	ldr	r3, [pc, #144]	@ (800124c <MX_GPIO_Init+0x100>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011be:	4a23      	ldr	r2, [pc, #140]	@ (800124c <MX_GPIO_Init+0x100>)
 80011c0:	f043 0302 	orr.w	r3, r3, #2
 80011c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c6:	4b21      	ldr	r3, [pc, #132]	@ (800124c <MX_GPIO_Init+0x100>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, led1_Pin|led4_Pin, GPIO_PIN_RESET);
 80011d2:	2200      	movs	r2, #0
 80011d4:	f44f 7190 	mov.w	r1, #288	@ 0x120
 80011d8:	481d      	ldr	r0, [pc, #116]	@ (8001250 <MX_GPIO_Init+0x104>)
 80011da:	f002 f93d 	bl	8003458 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, led3_Pin|led2_Pin, GPIO_PIN_RESET);
 80011de:	2200      	movs	r2, #0
 80011e0:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 80011e4:	481b      	ldr	r0, [pc, #108]	@ (8001254 <MX_GPIO_Init+0x108>)
 80011e6:	f002 f937 	bl	8003458 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011f0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80011f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011fa:	f107 0314 	add.w	r3, r7, #20
 80011fe:	4619      	mov	r1, r3
 8001200:	4815      	ldr	r0, [pc, #84]	@ (8001258 <MX_GPIO_Init+0x10c>)
 8001202:	f001 ff95 	bl	8003130 <HAL_GPIO_Init>

  /*Configure GPIO pins : led1_Pin led4_Pin */
  GPIO_InitStruct.Pin = led1_Pin|led4_Pin;
 8001206:	f44f 7390 	mov.w	r3, #288	@ 0x120
 800120a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120c:	2301      	movs	r3, #1
 800120e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001214:	2300      	movs	r3, #0
 8001216:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	4619      	mov	r1, r3
 800121e:	480c      	ldr	r0, [pc, #48]	@ (8001250 <MX_GPIO_Init+0x104>)
 8001220:	f001 ff86 	bl	8003130 <HAL_GPIO_Init>

  /*Configure GPIO pins : led3_Pin led2_Pin */
  GPIO_InitStruct.Pin = led3_Pin|led2_Pin;
 8001224:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 8001228:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122a:	2301      	movs	r3, #1
 800122c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001232:	2300      	movs	r3, #0
 8001234:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001236:	f107 0314 	add.w	r3, r7, #20
 800123a:	4619      	mov	r1, r3
 800123c:	4805      	ldr	r0, [pc, #20]	@ (8001254 <MX_GPIO_Init+0x108>)
 800123e:	f001 ff77 	bl	8003130 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001242:	bf00      	nop
 8001244:	3728      	adds	r7, #40	@ 0x28
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40023800 	.word	0x40023800
 8001250:	40020000 	.word	0x40020000
 8001254:	40020400 	.word	0x40020400
 8001258:	40020800 	.word	0x40020800

0800125c <filter_config>:

/* USER CODE BEGIN 4 */
void filter_config(void){
 800125c:	b580      	push	{r7, lr}
 800125e:	b08a      	sub	sp, #40	@ 0x28
 8001260:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef fil1;
	fil1.FilterActivation = ENABLE;
 8001262:	2301      	movs	r3, #1
 8001264:	623b      	str	r3, [r7, #32]
	fil1.FilterBank = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	617b      	str	r3, [r7, #20]
	fil1.FilterFIFOAssignment = CAN_RX_FIFO0;
 800126a:	2300      	movs	r3, #0
 800126c:	613b      	str	r3, [r7, #16]
	fil1.FilterIdHigh = 0x0000;
 800126e:	2300      	movs	r3, #0
 8001270:	603b      	str	r3, [r7, #0]
	fil1.FilterIdLow = 0x0000;
 8001272:	2300      	movs	r3, #0
 8001274:	607b      	str	r3, [r7, #4]
	fil1.FilterMaskIdHigh = 0x0000;
 8001276:	2300      	movs	r3, #0
 8001278:	60bb      	str	r3, [r7, #8]
	fil1.FilterMaskIdLow = 0x0000;
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
	fil1.FilterMode = CAN_FILTERMODE_IDMASK;
 800127e:	2300      	movs	r3, #0
 8001280:	61bb      	str	r3, [r7, #24]
	fil1.FilterScale = CAN_FILTERSCALE_32BIT;
 8001282:	2301      	movs	r3, #1
 8001284:	61fb      	str	r3, [r7, #28]

	if(HAL_CAN_ConfigFilter(&hcan1,&fil1) != HAL_OK){
 8001286:	463b      	mov	r3, r7
 8001288:	4619      	mov	r1, r3
 800128a:	4806      	ldr	r0, [pc, #24]	@ (80012a4 <filter_config+0x48>)
 800128c:	f000 fd56 	bl	8001d3c <HAL_CAN_ConfigFilter>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <filter_config+0x3e>
		Error_Handler();
 8001296:	f000 f9ef 	bl	8001678 <Error_Handler>
	}
}
 800129a:	bf00      	nop
 800129c:	3728      	adds	r7, #40	@ 0x28
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000028 	.word	0x20000028

080012a8 <led_indicate>:
void led_indicate(uint8_t no){
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]
	switch(no){
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	3b01      	subs	r3, #1
 80012b6:	2b03      	cmp	r3, #3
 80012b8:	d842      	bhi.n	8001340 <led_indicate+0x98>
 80012ba:	a201      	add	r2, pc, #4	@ (adr r2, 80012c0 <led_indicate+0x18>)
 80012bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c0:	080012d1 	.word	0x080012d1
 80012c4:	080012eb 	.word	0x080012eb
 80012c8:	08001305 	.word	0x08001305
 80012cc:	08001323 	.word	0x08001323
	case 1:
		HAL_GPIO_TogglePin(led1_GPIO_Port, led1_Pin);
 80012d0:	2120      	movs	r1, #32
 80012d2:	481d      	ldr	r0, [pc, #116]	@ (8001348 <led_indicate+0xa0>)
 80012d4:	f002 f8d9 	bl	800348a <HAL_GPIO_TogglePin>
		HAL_Delay(500);					//on board led
 80012d8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80012dc:	f000 fc0e 	bl	8001afc <HAL_Delay>
		HAL_GPIO_TogglePin(led1_GPIO_Port, led1_Pin);
 80012e0:	2120      	movs	r1, #32
 80012e2:	4819      	ldr	r0, [pc, #100]	@ (8001348 <led_indicate+0xa0>)
 80012e4:	f002 f8d1 	bl	800348a <HAL_GPIO_TogglePin>
		break;
 80012e8:	e02a      	b.n	8001340 <led_indicate+0x98>
	case 2:
		HAL_GPIO_TogglePin(led2_GPIO_Port, led2_Pin);
 80012ea:	2110      	movs	r1, #16
 80012ec:	4817      	ldr	r0, [pc, #92]	@ (800134c <led_indicate+0xa4>)
 80012ee:	f002 f8cc 	bl	800348a <HAL_GPIO_TogglePin>
		HAL_Delay(500);		// A0 led
 80012f2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80012f6:	f000 fc01 	bl	8001afc <HAL_Delay>
		HAL_GPIO_TogglePin(led2_GPIO_Port, led2_Pin);
 80012fa:	2110      	movs	r1, #16
 80012fc:	4813      	ldr	r0, [pc, #76]	@ (800134c <led_indicate+0xa4>)
 80012fe:	f002 f8c4 	bl	800348a <HAL_GPIO_TogglePin>
		break;
 8001302:	e01d      	b.n	8001340 <led_indicate+0x98>
	case 3:
		HAL_GPIO_TogglePin(led3_GPIO_Port, led3_Pin);
 8001304:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001308:	4810      	ldr	r0, [pc, #64]	@ (800134c <led_indicate+0xa4>)
 800130a:	f002 f8be 	bl	800348a <HAL_GPIO_TogglePin>
		HAL_Delay(500);			// A1 led
 800130e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001312:	f000 fbf3 	bl	8001afc <HAL_Delay>
		HAL_GPIO_TogglePin(led3_GPIO_Port, led3_Pin);
 8001316:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800131a:	480c      	ldr	r0, [pc, #48]	@ (800134c <led_indicate+0xa4>)
 800131c:	f002 f8b5 	bl	800348a <HAL_GPIO_TogglePin>
		break;
 8001320:	e00e      	b.n	8001340 <led_indicate+0x98>
	case 4:
		HAL_GPIO_TogglePin(led4_GPIO_Port, led4_Pin);
 8001322:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001326:	4808      	ldr	r0, [pc, #32]	@ (8001348 <led_indicate+0xa0>)
 8001328:	f002 f8af 	bl	800348a <HAL_GPIO_TogglePin>
		HAL_Delay(500);			// A2 led
 800132c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001330:	f000 fbe4 	bl	8001afc <HAL_Delay>
		HAL_GPIO_TogglePin(led4_GPIO_Port, led4_Pin);
 8001334:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001338:	4803      	ldr	r0, [pc, #12]	@ (8001348 <led_indicate+0xa0>)
 800133a:	f002 f8a6 	bl	800348a <HAL_GPIO_TogglePin>
		break;
 800133e:	bf00      	nop
	}

}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40020000 	.word	0x40020000
 800134c:	40020400 	.word	0x40020400

08001350 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]

	if(HAL_CAN_GetRxMessage(hcan,CAN_RX_FIFO0, &rxh, rxData) != HAL_OK){
 8001358:	4b77      	ldr	r3, [pc, #476]	@ (8001538 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 800135a:	4a78      	ldr	r2, [pc, #480]	@ (800153c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 800135c:	2100      	movs	r1, #0
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f000 fee0 	bl	8002124 <HAL_CAN_GetRxMessage>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
		Error_Handler();
 800136a:	f000 f985 	bl	8001678 <Error_Handler>
	}

	if(rxh.ExtId == 0xDCBA){
 800136e:	4b73      	ldr	r3, [pc, #460]	@ (800153c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f64d 42ba 	movw	r2, #56506	@ 0xdcba
 8001376:	4293      	cmp	r3, r2
 8001378:	d10b      	bne.n	8001392 <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
		motor.temp = rxData[0];
 800137a:	4b6f      	ldr	r3, [pc, #444]	@ (8001538 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 800137c:	781a      	ldrb	r2, [r3, #0]
 800137e:	4b70      	ldr	r3, [pc, #448]	@ (8001540 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8001380:	701a      	strb	r2, [r3, #0]
		motor.freq = rxData[1];
 8001382:	4b6d      	ldr	r3, [pc, #436]	@ (8001538 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 8001384:	785a      	ldrb	r2, [r3, #1]
 8001386:	4b6e      	ldr	r3, [pc, #440]	@ (8001540 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8001388:	705a      	strb	r2, [r3, #1]
		flags.motor_frame = 1;
 800138a:	4b6e      	ldr	r3, [pc, #440]	@ (8001544 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 800138c:	2201      	movs	r2, #1
 800138e:	711a      	strb	r2, [r3, #4]
		flags.ah_frame = 1;
	}



}
 8001390:	e0ca      	b.n	8001528 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>
	else if(rxh.ExtId == 0x18904001){
 8001392:	4b6a      	ldr	r3, [pc, #424]	@ (800153c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	4a6c      	ldr	r2, [pc, #432]	@ (8001548 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d166      	bne.n	800146a <HAL_CAN_RxFifo0MsgPendingCallback+0x11a>
		bat.cum_vol = ((rxData[0] << 8) | rxData[1])*0.1;
 800139c:	4b66      	ldr	r3, [pc, #408]	@ (8001538 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	021b      	lsls	r3, r3, #8
 80013a2:	4a65      	ldr	r2, [pc, #404]	@ (8001538 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 80013a4:	7852      	ldrb	r2, [r2, #1]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff f87f 	bl	80004ac <__aeabi_i2d>
 80013ae:	a360      	add	r3, pc, #384	@ (adr r3, 8001530 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e0>)
 80013b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b4:	f7ff f8e4 	bl	8000580 <__aeabi_dmul>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4610      	mov	r0, r2
 80013be:	4619      	mov	r1, r3
 80013c0:	f7ff faf0 	bl	80009a4 <__aeabi_d2uiz>
 80013c4:	4603      	mov	r3, r0
 80013c6:	b2da      	uxtb	r2, r3
 80013c8:	4b60      	ldr	r3, [pc, #384]	@ (800154c <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 80013ca:	715a      	strb	r2, [r3, #5]
		bat.gather_vol = ((rxData[2]<<8) | rxData[3])*0.1;
 80013cc:	4b5a      	ldr	r3, [pc, #360]	@ (8001538 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 80013ce:	789b      	ldrb	r3, [r3, #2]
 80013d0:	021b      	lsls	r3, r3, #8
 80013d2:	4a59      	ldr	r2, [pc, #356]	@ (8001538 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 80013d4:	78d2      	ldrb	r2, [r2, #3]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff f867 	bl	80004ac <__aeabi_i2d>
 80013de:	a354      	add	r3, pc, #336	@ (adr r3, 8001530 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e0>)
 80013e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e4:	f7ff f8cc 	bl	8000580 <__aeabi_dmul>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4610      	mov	r0, r2
 80013ee:	4619      	mov	r1, r3
 80013f0:	f7ff fad8 	bl	80009a4 <__aeabi_d2uiz>
 80013f4:	4603      	mov	r3, r0
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	4b54      	ldr	r3, [pc, #336]	@ (800154c <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 80013fa:	711a      	strb	r2, [r3, #4]
		bat.current = (((rxData[4] << 8 )| rxData[5])-30000)*0.1;
 80013fc:	4b4e      	ldr	r3, [pc, #312]	@ (8001538 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 80013fe:	791b      	ldrb	r3, [r3, #4]
 8001400:	021b      	lsls	r3, r3, #8
 8001402:	4a4d      	ldr	r2, [pc, #308]	@ (8001538 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 8001404:	7952      	ldrb	r2, [r2, #5]
 8001406:	4313      	orrs	r3, r2
 8001408:	f5a3 43ea 	sub.w	r3, r3, #29952	@ 0x7500
 800140c:	3b30      	subs	r3, #48	@ 0x30
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff f84c 	bl	80004ac <__aeabi_i2d>
 8001414:	a346      	add	r3, pc, #280	@ (adr r3, 8001530 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e0>)
 8001416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141a:	f7ff f8b1 	bl	8000580 <__aeabi_dmul>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	4610      	mov	r0, r2
 8001424:	4619      	mov	r1, r3
 8001426:	f7ff fabd 	bl	80009a4 <__aeabi_d2uiz>
 800142a:	4603      	mov	r3, r0
 800142c:	b29a      	uxth	r2, r3
 800142e:	4b47      	ldr	r3, [pc, #284]	@ (800154c <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 8001430:	805a      	strh	r2, [r3, #2]
		bat.soc = ((rxData[6]<<8) | rxData[7])*0.1;
 8001432:	4b41      	ldr	r3, [pc, #260]	@ (8001538 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 8001434:	799b      	ldrb	r3, [r3, #6]
 8001436:	021b      	lsls	r3, r3, #8
 8001438:	4a3f      	ldr	r2, [pc, #252]	@ (8001538 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 800143a:	79d2      	ldrb	r2, [r2, #7]
 800143c:	4313      	orrs	r3, r2
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff f834 	bl	80004ac <__aeabi_i2d>
 8001444:	a33a      	add	r3, pc, #232	@ (adr r3, 8001530 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e0>)
 8001446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144a:	f7ff f899 	bl	8000580 <__aeabi_dmul>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	4610      	mov	r0, r2
 8001454:	4619      	mov	r1, r3
 8001456:	f7ff faa5 	bl	80009a4 <__aeabi_d2uiz>
 800145a:	4603      	mov	r3, r0
 800145c:	b2da      	uxtb	r2, r3
 800145e:	4b3b      	ldr	r3, [pc, #236]	@ (800154c <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 8001460:	701a      	strb	r2, [r3, #0]
		flags.soc_frame =1;
 8001462:	4b38      	ldr	r3, [pc, #224]	@ (8001544 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 8001464:	2201      	movs	r2, #1
 8001466:	701a      	strb	r2, [r3, #0]
}
 8001468:	e05e      	b.n	8001528 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>
	else if(rxh.ExtId == 0x18914001){
 800146a:	4b34      	ldr	r3, [pc, #208]	@ (800153c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	4a38      	ldr	r2, [pc, #224]	@ (8001550 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d121      	bne.n	80014b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x168>
		 bat.cell_vol[0] = ((rxData[0] << 8) | rxData[1])/1000;
 8001474:	4b30      	ldr	r3, [pc, #192]	@ (8001538 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	021b      	lsls	r3, r3, #8
 800147a:	4a2f      	ldr	r2, [pc, #188]	@ (8001538 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 800147c:	7852      	ldrb	r2, [r2, #1]
 800147e:	4313      	orrs	r3, r2
 8001480:	4a34      	ldr	r2, [pc, #208]	@ (8001554 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 8001482:	fb82 1203 	smull	r1, r2, r2, r3
 8001486:	1192      	asrs	r2, r2, #6
 8001488:	17db      	asrs	r3, r3, #31
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	b2da      	uxtb	r2, r3
 800148e:	4b2f      	ldr	r3, [pc, #188]	@ (800154c <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 8001490:	719a      	strb	r2, [r3, #6]
		 bat.cell_vol[1] = ((rxData[3]<<8) | rxData[4])/1000;
 8001492:	4b29      	ldr	r3, [pc, #164]	@ (8001538 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 8001494:	78db      	ldrb	r3, [r3, #3]
 8001496:	021b      	lsls	r3, r3, #8
 8001498:	4a27      	ldr	r2, [pc, #156]	@ (8001538 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 800149a:	7912      	ldrb	r2, [r2, #4]
 800149c:	4313      	orrs	r3, r2
 800149e:	4a2d      	ldr	r2, [pc, #180]	@ (8001554 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 80014a0:	fb82 1203 	smull	r1, r2, r2, r3
 80014a4:	1192      	asrs	r2, r2, #6
 80014a6:	17db      	asrs	r3, r3, #31
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	4b27      	ldr	r3, [pc, #156]	@ (800154c <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 80014ae:	71da      	strb	r2, [r3, #7]
		 flags.vol_frame =1;
 80014b0:	4b24      	ldr	r3, [pc, #144]	@ (8001544 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	705a      	strb	r2, [r3, #1]
}
 80014b6:	e037      	b.n	8001528 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>
	else if(rxh.ExtId == 0x18924001){
 80014b8:	4b20      	ldr	r3, [pc, #128]	@ (800153c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	4a26      	ldr	r2, [pc, #152]	@ (8001558 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d10f      	bne.n	80014e2 <HAL_CAN_RxFifo0MsgPendingCallback+0x192>
		bat.cell_temp[0] = rxData[0] - 40;
 80014c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001538 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	3b28      	subs	r3, #40	@ 0x28
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	4b20      	ldr	r3, [pc, #128]	@ (800154c <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 80014cc:	721a      	strb	r2, [r3, #8]
		bat.cell_temp[1] = rxData[2] - 40;
 80014ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001538 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 80014d0:	789b      	ldrb	r3, [r3, #2]
 80014d2:	3b28      	subs	r3, #40	@ 0x28
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4b1d      	ldr	r3, [pc, #116]	@ (800154c <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 80014d8:	725a      	strb	r2, [r3, #9]
		flags.temp_frame = 1;
 80014da:	4b1a      	ldr	r3, [pc, #104]	@ (8001544 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 80014dc:	2201      	movs	r2, #1
 80014de:	709a      	strb	r2, [r3, #2]
}
 80014e0:	e022      	b.n	8001528 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>
	else if(rxh.ExtId == 0x18934001){
 80014e2:	4b16      	ldr	r3, [pc, #88]	@ (800153c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	4a1d      	ldr	r2, [pc, #116]	@ (800155c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d11d      	bne.n	8001528 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>
		bat.charging_status = rxData[0];
 80014ec:	4b12      	ldr	r3, [pc, #72]	@ (8001538 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 80014ee:	781a      	ldrb	r2, [r3, #0]
 80014f0:	4b16      	ldr	r3, [pc, #88]	@ (800154c <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 80014f2:	729a      	strb	r2, [r3, #10]
		bat.rem_ah =  ((rxData[4] << 24)|(rxData[5] << 16)|(rxData[6]<< 8)|rxData[7])/1000;
 80014f4:	4b10      	ldr	r3, [pc, #64]	@ (8001538 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 80014f6:	791b      	ldrb	r3, [r3, #4]
 80014f8:	061a      	lsls	r2, r3, #24
 80014fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001538 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 80014fc:	795b      	ldrb	r3, [r3, #5]
 80014fe:	041b      	lsls	r3, r3, #16
 8001500:	431a      	orrs	r2, r3
 8001502:	4b0d      	ldr	r3, [pc, #52]	@ (8001538 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 8001504:	799b      	ldrb	r3, [r3, #6]
 8001506:	021b      	lsls	r3, r3, #8
 8001508:	4313      	orrs	r3, r2
 800150a:	4a0b      	ldr	r2, [pc, #44]	@ (8001538 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 800150c:	79d2      	ldrb	r2, [r2, #7]
 800150e:	4313      	orrs	r3, r2
 8001510:	4a10      	ldr	r2, [pc, #64]	@ (8001554 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 8001512:	fb82 1203 	smull	r1, r2, r2, r3
 8001516:	1192      	asrs	r2, r2, #6
 8001518:	17db      	asrs	r3, r3, #31
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	b29a      	uxth	r2, r3
 800151e:	4b0b      	ldr	r3, [pc, #44]	@ (800154c <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 8001520:	819a      	strh	r2, [r3, #12]
		flags.ah_frame = 1;
 8001522:	4b08      	ldr	r3, [pc, #32]	@ (8001544 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 8001524:	2201      	movs	r2, #1
 8001526:	70da      	strb	r2, [r3, #3]
}
 8001528:	bf00      	nop
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	9999999a 	.word	0x9999999a
 8001534:	3fb99999 	.word	0x3fb99999
 8001538:	2000017c 	.word	0x2000017c
 800153c:	20000158 	.word	0x20000158
 8001540:	200001a0 	.word	0x200001a0
 8001544:	20000198 	.word	0x20000198
 8001548:	18904001 	.word	0x18904001
 800154c:	20000188 	.word	0x20000188
 8001550:	18914001 	.word	0x18914001
 8001554:	10624dd3 	.word	0x10624dd3
 8001558:	18924001 	.word	0x18924001
 800155c:	18934001 	.word	0x18934001

08001560 <sendRequest>:

void sendRequest(uint8_t no){
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	71fb      	strb	r3, [r7, #7]
	txh.DLC =8;
 800156a:	4b21      	ldr	r3, [pc, #132]	@ (80015f0 <sendRequest+0x90>)
 800156c:	2208      	movs	r2, #8
 800156e:	611a      	str	r2, [r3, #16]
	txh.IDE = CAN_ID_EXT;
 8001570:	4b1f      	ldr	r3, [pc, #124]	@ (80015f0 <sendRequest+0x90>)
 8001572:	2204      	movs	r2, #4
 8001574:	609a      	str	r2, [r3, #8]
	txh.RTR = CAN_RTR_DATA;
 8001576:	4b1e      	ldr	r3, [pc, #120]	@ (80015f0 <sendRequest+0x90>)
 8001578:	2200      	movs	r2, #0
 800157a:	60da      	str	r2, [r3, #12]
	switch(no){
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	3b01      	subs	r3, #1
 8001580:	2b04      	cmp	r3, #4
 8001582:	d822      	bhi.n	80015ca <sendRequest+0x6a>
 8001584:	a201      	add	r2, pc, #4	@ (adr r2, 800158c <sendRequest+0x2c>)
 8001586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800158a:	bf00      	nop
 800158c:	080015a1 	.word	0x080015a1
 8001590:	080015a9 	.word	0x080015a9
 8001594:	080015b1 	.word	0x080015b1
 8001598:	080015b9 	.word	0x080015b9
 800159c:	080015c1 	.word	0x080015c1
		case 1:
			txh.ExtId = 0x18900140;
 80015a0:	4b13      	ldr	r3, [pc, #76]	@ (80015f0 <sendRequest+0x90>)
 80015a2:	4a14      	ldr	r2, [pc, #80]	@ (80015f4 <sendRequest+0x94>)
 80015a4:	605a      	str	r2, [r3, #4]
			break;
 80015a6:	e010      	b.n	80015ca <sendRequest+0x6a>
		case 2:
			txh.ExtId = 0x18910140;
 80015a8:	4b11      	ldr	r3, [pc, #68]	@ (80015f0 <sendRequest+0x90>)
 80015aa:	4a13      	ldr	r2, [pc, #76]	@ (80015f8 <sendRequest+0x98>)
 80015ac:	605a      	str	r2, [r3, #4]

			break;
 80015ae:	e00c      	b.n	80015ca <sendRequest+0x6a>
		case 3:
			txh.ExtId = 0x18920140;
 80015b0:	4b0f      	ldr	r3, [pc, #60]	@ (80015f0 <sendRequest+0x90>)
 80015b2:	4a12      	ldr	r2, [pc, #72]	@ (80015fc <sendRequest+0x9c>)
 80015b4:	605a      	str	r2, [r3, #4]
			break;
 80015b6:	e008      	b.n	80015ca <sendRequest+0x6a>
		case 4:
			txh.ExtId = 0x18930140;
 80015b8:	4b0d      	ldr	r3, [pc, #52]	@ (80015f0 <sendRequest+0x90>)
 80015ba:	4a11      	ldr	r2, [pc, #68]	@ (8001600 <sendRequest+0xa0>)
 80015bc:	605a      	str	r2, [r3, #4]
			break;
 80015be:	e004      	b.n	80015ca <sendRequest+0x6a>
		case 5:
			txh.ExtId = 0xABCD;
 80015c0:	4b0b      	ldr	r3, [pc, #44]	@ (80015f0 <sendRequest+0x90>)
 80015c2:	f64a 32cd 	movw	r2, #43981	@ 0xabcd
 80015c6:	605a      	str	r2, [r3, #4]
			break;
 80015c8:	bf00      	nop
		}

	if(HAL_CAN_AddTxMessage(&hcan1, &txh, txData, &mailbox1) != HAL_OK){
 80015ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001604 <sendRequest+0xa4>)
 80015cc:	4a0e      	ldr	r2, [pc, #56]	@ (8001608 <sendRequest+0xa8>)
 80015ce:	4908      	ldr	r1, [pc, #32]	@ (80015f0 <sendRequest+0x90>)
 80015d0:	480e      	ldr	r0, [pc, #56]	@ (800160c <sendRequest+0xac>)
 80015d2:	f000 fcd7 	bl	8001f84 <HAL_CAN_AddTxMessage>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d002      	beq.n	80015e2 <sendRequest+0x82>
		Error_Handler();
 80015dc:	f000 f84c 	bl	8001678 <Error_Handler>
	}else{
		led_indicate(1);
	}

}
 80015e0:	e002      	b.n	80015e8 <sendRequest+0x88>
		led_indicate(1);
 80015e2:	2001      	movs	r0, #1
 80015e4:	f7ff fe60 	bl	80012a8 <led_indicate>
}
 80015e8:	bf00      	nop
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000140 	.word	0x20000140
 80015f4:	18900140 	.word	0x18900140
 80015f8:	18910140 	.word	0x18910140
 80015fc:	18920140 	.word	0x18920140
 8001600:	18930140 	.word	0x18930140
 8001604:	20000184 	.word	0x20000184
 8001608:	20000174 	.word	0x20000174
 800160c:	20000028 	.word	0x20000028

08001610 <uart_tx>:
void uart_tx(uint16_t address , uint16_t data){
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	460a      	mov	r2, r1
 800161a:	80fb      	strh	r3, [r7, #6]
 800161c:	4613      	mov	r3, r2
 800161e:	80bb      	strh	r3, [r7, #4]

	uint8_t uart_frame[8] = {0x5A ,0xA5, 0x05 , 0x82,0x00 ,0x00  ,0x00,0x00};
 8001620:	4a13      	ldr	r2, [pc, #76]	@ (8001670 <uart_tx+0x60>)
 8001622:	f107 0308 	add.w	r3, r7, #8
 8001626:	e892 0003 	ldmia.w	r2, {r0, r1}
 800162a:	e883 0003 	stmia.w	r3, {r0, r1}
	uart_frame[4] = ((address>>8) & 0xff);
 800162e:	88fb      	ldrh	r3, [r7, #6]
 8001630:	0a1b      	lsrs	r3, r3, #8
 8001632:	b29b      	uxth	r3, r3
 8001634:	b2db      	uxtb	r3, r3
 8001636:	733b      	strb	r3, [r7, #12]
	uart_frame[5] = (address & 0xff);
 8001638:	88fb      	ldrh	r3, [r7, #6]
 800163a:	b2db      	uxtb	r3, r3
 800163c:	737b      	strb	r3, [r7, #13]
	uart_frame[6] = ((data>>8) & 255);
 800163e:	88bb      	ldrh	r3, [r7, #4]
 8001640:	0a1b      	lsrs	r3, r3, #8
 8001642:	b29b      	uxth	r3, r3
 8001644:	b2db      	uxtb	r3, r3
 8001646:	73bb      	strb	r3, [r7, #14]
	uart_frame[7] = (data & 255);
 8001648:	88bb      	ldrh	r3, [r7, #4]
 800164a:	b2db      	uxtb	r3, r3
 800164c:	73fb      	strb	r3, [r7, #15]
	if(HAL_UART_Transmit(&huart1,uart_frame , 8 , HAL_MAX_DELAY) != HAL_OK){
 800164e:	f107 0108 	add.w	r1, r7, #8
 8001652:	f04f 33ff 	mov.w	r3, #4294967295
 8001656:	2208      	movs	r2, #8
 8001658:	4806      	ldr	r0, [pc, #24]	@ (8001674 <uart_tx+0x64>)
 800165a:	f002 fd69 	bl	8004130 <HAL_UART_Transmit>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <uart_tx+0x58>
		Error_Handler();
 8001664:	f000 f808 	bl	8001678 <Error_Handler>
	}else{
//		led_indicate(1);
	}
}
 8001668:	bf00      	nop
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	08005104 	.word	0x08005104
 8001674:	20000050 	.word	0x20000050

08001678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800167c:	b672      	cpsid	i
}
 800167e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001680:	bf00      	nop
 8001682:	e7fd      	b.n	8001680 <Error_Handler+0x8>

08001684 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	607b      	str	r3, [r7, #4]
 800168e:	4b10      	ldr	r3, [pc, #64]	@ (80016d0 <HAL_MspInit+0x4c>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001692:	4a0f      	ldr	r2, [pc, #60]	@ (80016d0 <HAL_MspInit+0x4c>)
 8001694:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001698:	6453      	str	r3, [r2, #68]	@ 0x44
 800169a:	4b0d      	ldr	r3, [pc, #52]	@ (80016d0 <HAL_MspInit+0x4c>)
 800169c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800169e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	603b      	str	r3, [r7, #0]
 80016aa:	4b09      	ldr	r3, [pc, #36]	@ (80016d0 <HAL_MspInit+0x4c>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ae:	4a08      	ldr	r2, [pc, #32]	@ (80016d0 <HAL_MspInit+0x4c>)
 80016b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016b6:	4b06      	ldr	r3, [pc, #24]	@ (80016d0 <HAL_MspInit+0x4c>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016be:	603b      	str	r3, [r7, #0]
 80016c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016c2:	2003      	movs	r0, #3
 80016c4:	f001 f976 	bl	80029b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016c8:	bf00      	nop
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40023800 	.word	0x40023800

080016d4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08a      	sub	sp, #40	@ 0x28
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a21      	ldr	r2, [pc, #132]	@ (8001778 <HAL_CAN_MspInit+0xa4>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d13c      	bne.n	8001770 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	613b      	str	r3, [r7, #16]
 80016fa:	4b20      	ldr	r3, [pc, #128]	@ (800177c <HAL_CAN_MspInit+0xa8>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fe:	4a1f      	ldr	r2, [pc, #124]	@ (800177c <HAL_CAN_MspInit+0xa8>)
 8001700:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001704:	6413      	str	r3, [r2, #64]	@ 0x40
 8001706:	4b1d      	ldr	r3, [pc, #116]	@ (800177c <HAL_CAN_MspInit+0xa8>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800170e:	613b      	str	r3, [r7, #16]
 8001710:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	4b19      	ldr	r3, [pc, #100]	@ (800177c <HAL_CAN_MspInit+0xa8>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171a:	4a18      	ldr	r2, [pc, #96]	@ (800177c <HAL_CAN_MspInit+0xa8>)
 800171c:	f043 0301 	orr.w	r3, r3, #1
 8001720:	6313      	str	r3, [r2, #48]	@ 0x30
 8001722:	4b16      	ldr	r3, [pc, #88]	@ (800177c <HAL_CAN_MspInit+0xa8>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800172e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001732:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001734:	2302      	movs	r3, #2
 8001736:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173c:	2303      	movs	r3, #3
 800173e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001740:	2309      	movs	r3, #9
 8001742:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	4619      	mov	r1, r3
 800174a:	480d      	ldr	r0, [pc, #52]	@ (8001780 <HAL_CAN_MspInit+0xac>)
 800174c:	f001 fcf0 	bl	8003130 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 15, 0);
 8001750:	2200      	movs	r2, #0
 8001752:	210f      	movs	r1, #15
 8001754:	2014      	movs	r0, #20
 8001756:	f001 f938 	bl	80029ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800175a:	2014      	movs	r0, #20
 800175c:	f001 f951 	bl	8002a02 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 15, 0);
 8001760:	2200      	movs	r2, #0
 8001762:	210f      	movs	r1, #15
 8001764:	2016      	movs	r0, #22
 8001766:	f001 f930 	bl	80029ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800176a:	2016      	movs	r0, #22
 800176c:	f001 f949 	bl	8002a02 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001770:	bf00      	nop
 8001772:	3728      	adds	r7, #40	@ 0x28
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40006400 	.word	0x40006400
 800177c:	40023800 	.word	0x40023800
 8001780:	40020000 	.word	0x40020000

08001784 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08c      	sub	sp, #48	@ 0x30
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178c:	f107 031c 	add.w	r3, r7, #28
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a4d      	ldr	r2, [pc, #308]	@ (80018d8 <HAL_UART_MspInit+0x154>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d163      	bne.n	800186e <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	61bb      	str	r3, [r7, #24]
 80017aa:	4b4c      	ldr	r3, [pc, #304]	@ (80018dc <HAL_UART_MspInit+0x158>)
 80017ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ae:	4a4b      	ldr	r2, [pc, #300]	@ (80018dc <HAL_UART_MspInit+0x158>)
 80017b0:	f043 0310 	orr.w	r3, r3, #16
 80017b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80017b6:	4b49      	ldr	r3, [pc, #292]	@ (80018dc <HAL_UART_MspInit+0x158>)
 80017b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ba:	f003 0310 	and.w	r3, r3, #16
 80017be:	61bb      	str	r3, [r7, #24]
 80017c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	617b      	str	r3, [r7, #20]
 80017c6:	4b45      	ldr	r3, [pc, #276]	@ (80018dc <HAL_UART_MspInit+0x158>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ca:	4a44      	ldr	r2, [pc, #272]	@ (80018dc <HAL_UART_MspInit+0x158>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017d2:	4b42      	ldr	r3, [pc, #264]	@ (80018dc <HAL_UART_MspInit+0x158>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	617b      	str	r3, [r7, #20]
 80017dc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80017de:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80017e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e4:	2302      	movs	r3, #2
 80017e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ec:	2303      	movs	r3, #3
 80017ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017f0:	2307      	movs	r3, #7
 80017f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f4:	f107 031c 	add.w	r3, r7, #28
 80017f8:	4619      	mov	r1, r3
 80017fa:	4839      	ldr	r0, [pc, #228]	@ (80018e0 <HAL_UART_MspInit+0x15c>)
 80017fc:	f001 fc98 	bl	8003130 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001800:	4b38      	ldr	r3, [pc, #224]	@ (80018e4 <HAL_UART_MspInit+0x160>)
 8001802:	4a39      	ldr	r2, [pc, #228]	@ (80018e8 <HAL_UART_MspInit+0x164>)
 8001804:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001806:	4b37      	ldr	r3, [pc, #220]	@ (80018e4 <HAL_UART_MspInit+0x160>)
 8001808:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800180c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800180e:	4b35      	ldr	r3, [pc, #212]	@ (80018e4 <HAL_UART_MspInit+0x160>)
 8001810:	2240      	movs	r2, #64	@ 0x40
 8001812:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001814:	4b33      	ldr	r3, [pc, #204]	@ (80018e4 <HAL_UART_MspInit+0x160>)
 8001816:	2200      	movs	r2, #0
 8001818:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800181a:	4b32      	ldr	r3, [pc, #200]	@ (80018e4 <HAL_UART_MspInit+0x160>)
 800181c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001820:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001822:	4b30      	ldr	r3, [pc, #192]	@ (80018e4 <HAL_UART_MspInit+0x160>)
 8001824:	2200      	movs	r2, #0
 8001826:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001828:	4b2e      	ldr	r3, [pc, #184]	@ (80018e4 <HAL_UART_MspInit+0x160>)
 800182a:	2200      	movs	r2, #0
 800182c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800182e:	4b2d      	ldr	r3, [pc, #180]	@ (80018e4 <HAL_UART_MspInit+0x160>)
 8001830:	2200      	movs	r2, #0
 8001832:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001834:	4b2b      	ldr	r3, [pc, #172]	@ (80018e4 <HAL_UART_MspInit+0x160>)
 8001836:	2200      	movs	r2, #0
 8001838:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800183a:	4b2a      	ldr	r3, [pc, #168]	@ (80018e4 <HAL_UART_MspInit+0x160>)
 800183c:	2200      	movs	r2, #0
 800183e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001840:	4828      	ldr	r0, [pc, #160]	@ (80018e4 <HAL_UART_MspInit+0x160>)
 8001842:	f001 f8f9 	bl	8002a38 <HAL_DMA_Init>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800184c:	f7ff ff14 	bl	8001678 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4a24      	ldr	r2, [pc, #144]	@ (80018e4 <HAL_UART_MspInit+0x160>)
 8001854:	639a      	str	r2, [r3, #56]	@ 0x38
 8001856:	4a23      	ldr	r2, [pc, #140]	@ (80018e4 <HAL_UART_MspInit+0x160>)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 15, 0);
 800185c:	2200      	movs	r2, #0
 800185e:	210f      	movs	r1, #15
 8001860:	2025      	movs	r0, #37	@ 0x25
 8001862:	f001 f8b2 	bl	80029ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001866:	2025      	movs	r0, #37	@ 0x25
 8001868:	f001 f8cb 	bl	8002a02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800186c:	e030      	b.n	80018d0 <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART2)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a1e      	ldr	r2, [pc, #120]	@ (80018ec <HAL_UART_MspInit+0x168>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d12b      	bne.n	80018d0 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001878:	2300      	movs	r3, #0
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	4b17      	ldr	r3, [pc, #92]	@ (80018dc <HAL_UART_MspInit+0x158>)
 800187e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001880:	4a16      	ldr	r2, [pc, #88]	@ (80018dc <HAL_UART_MspInit+0x158>)
 8001882:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001886:	6413      	str	r3, [r2, #64]	@ 0x40
 8001888:	4b14      	ldr	r3, [pc, #80]	@ (80018dc <HAL_UART_MspInit+0x158>)
 800188a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001894:	2300      	movs	r3, #0
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	4b10      	ldr	r3, [pc, #64]	@ (80018dc <HAL_UART_MspInit+0x158>)
 800189a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189c:	4a0f      	ldr	r2, [pc, #60]	@ (80018dc <HAL_UART_MspInit+0x158>)
 800189e:	f043 0301 	orr.w	r3, r3, #1
 80018a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80018a4:	4b0d      	ldr	r3, [pc, #52]	@ (80018dc <HAL_UART_MspInit+0x158>)
 80018a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018b0:	230c      	movs	r3, #12
 80018b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b4:	2302      	movs	r3, #2
 80018b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018bc:	2303      	movs	r3, #3
 80018be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018c0:	2307      	movs	r3, #7
 80018c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c4:	f107 031c 	add.w	r3, r7, #28
 80018c8:	4619      	mov	r1, r3
 80018ca:	4805      	ldr	r0, [pc, #20]	@ (80018e0 <HAL_UART_MspInit+0x15c>)
 80018cc:	f001 fc30 	bl	8003130 <HAL_GPIO_Init>
}
 80018d0:	bf00      	nop
 80018d2:	3730      	adds	r7, #48	@ 0x30
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40011000 	.word	0x40011000
 80018dc:	40023800 	.word	0x40023800
 80018e0:	40020000 	.word	0x40020000
 80018e4:	200000e0 	.word	0x200000e0
 80018e8:	400264b8 	.word	0x400264b8
 80018ec:	40004400 	.word	0x40004400

080018f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018f4:	bf00      	nop
 80018f6:	e7fd      	b.n	80018f4 <NMI_Handler+0x4>

080018f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018fc:	bf00      	nop
 80018fe:	e7fd      	b.n	80018fc <HardFault_Handler+0x4>

08001900 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001904:	bf00      	nop
 8001906:	e7fd      	b.n	8001904 <MemManage_Handler+0x4>

08001908 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800190c:	bf00      	nop
 800190e:	e7fd      	b.n	800190c <BusFault_Handler+0x4>

08001910 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001914:	bf00      	nop
 8001916:	e7fd      	b.n	8001914 <UsageFault_Handler+0x4>

08001918 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001946:	f000 f8b9 	bl	8001abc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
	...

08001950 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001954:	4802      	ldr	r0, [pc, #8]	@ (8001960 <CAN1_RX0_IRQHandler+0x10>)
 8001956:	f000 fd2d 	bl	80023b4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20000028 	.word	0x20000028

08001964 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001968:	4802      	ldr	r0, [pc, #8]	@ (8001974 <CAN1_SCE_IRQHandler+0x10>)
 800196a:	f000 fd23 	bl	80023b4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	20000028 	.word	0x20000028

08001978 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800197c:	4802      	ldr	r0, [pc, #8]	@ (8001988 <USART1_IRQHandler+0x10>)
 800197e:	f002 fc63 	bl	8004248 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000050 	.word	0x20000050

0800198c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001990:	4802      	ldr	r0, [pc, #8]	@ (800199c <DMA2_Stream7_IRQHandler+0x10>)
 8001992:	f001 f991 	bl	8002cb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	200000e0 	.word	0x200000e0

080019a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019a4:	4b06      	ldr	r3, [pc, #24]	@ (80019c0 <SystemInit+0x20>)
 80019a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019aa:	4a05      	ldr	r2, [pc, #20]	@ (80019c0 <SystemInit+0x20>)
 80019ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019fc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80019c8:	f7ff ffea 	bl	80019a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019cc:	480c      	ldr	r0, [pc, #48]	@ (8001a00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019ce:	490d      	ldr	r1, [pc, #52]	@ (8001a04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001a08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019d4:	e002      	b.n	80019dc <LoopCopyDataInit>

080019d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019da:	3304      	adds	r3, #4

080019dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019e0:	d3f9      	bcc.n	80019d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019e2:	4a0a      	ldr	r2, [pc, #40]	@ (8001a0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019e4:	4c0a      	ldr	r4, [pc, #40]	@ (8001a10 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019e8:	e001      	b.n	80019ee <LoopFillZerobss>

080019ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019ec:	3204      	adds	r2, #4

080019ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019f0:	d3fb      	bcc.n	80019ea <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80019f2:	f003 fb57 	bl	80050a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019f6:	f7ff f96f 	bl	8000cd8 <main>
  bx  lr    
 80019fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a04:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001a08:	0800513c 	.word	0x0800513c
  ldr r2, =_sbss
 8001a0c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001a10:	200001a8 	.word	0x200001a8

08001a14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a14:	e7fe      	b.n	8001a14 <ADC_IRQHandler>
	...

08001a18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001a58 <HAL_Init+0x40>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a0d      	ldr	r2, [pc, #52]	@ (8001a58 <HAL_Init+0x40>)
 8001a22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a28:	4b0b      	ldr	r3, [pc, #44]	@ (8001a58 <HAL_Init+0x40>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a0a      	ldr	r2, [pc, #40]	@ (8001a58 <HAL_Init+0x40>)
 8001a2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a34:	4b08      	ldr	r3, [pc, #32]	@ (8001a58 <HAL_Init+0x40>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a07      	ldr	r2, [pc, #28]	@ (8001a58 <HAL_Init+0x40>)
 8001a3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a40:	2003      	movs	r0, #3
 8001a42:	f000 ffb7 	bl	80029b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a46:	2000      	movs	r0, #0
 8001a48:	f000 f808 	bl	8001a5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a4c:	f7ff fe1a 	bl	8001684 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40023c00 	.word	0x40023c00

08001a5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a64:	4b12      	ldr	r3, [pc, #72]	@ (8001ab0 <HAL_InitTick+0x54>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	4b12      	ldr	r3, [pc, #72]	@ (8001ab4 <HAL_InitTick+0x58>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f000 ffcf 	bl	8002a1e <HAL_SYSTICK_Config>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e00e      	b.n	8001aa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b0f      	cmp	r3, #15
 8001a8e:	d80a      	bhi.n	8001aa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a90:	2200      	movs	r2, #0
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	f04f 30ff 	mov.w	r0, #4294967295
 8001a98:	f000 ff97 	bl	80029ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a9c:	4a06      	ldr	r2, [pc, #24]	@ (8001ab8 <HAL_InitTick+0x5c>)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	e000      	b.n	8001aa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	20000000 	.word	0x20000000
 8001ab4:	20000008 	.word	0x20000008
 8001ab8:	20000004 	.word	0x20000004

08001abc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ac0:	4b06      	ldr	r3, [pc, #24]	@ (8001adc <HAL_IncTick+0x20>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4b06      	ldr	r3, [pc, #24]	@ (8001ae0 <HAL_IncTick+0x24>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4413      	add	r3, r2
 8001acc:	4a04      	ldr	r2, [pc, #16]	@ (8001ae0 <HAL_IncTick+0x24>)
 8001ace:	6013      	str	r3, [r2, #0]
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	20000008 	.word	0x20000008
 8001ae0:	200001a4 	.word	0x200001a4

08001ae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ae8:	4b03      	ldr	r3, [pc, #12]	@ (8001af8 <HAL_GetTick+0x14>)
 8001aea:	681b      	ldr	r3, [r3, #0]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	200001a4 	.word	0x200001a4

08001afc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b04:	f7ff ffee 	bl	8001ae4 <HAL_GetTick>
 8001b08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b14:	d005      	beq.n	8001b22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b16:	4b0a      	ldr	r3, [pc, #40]	@ (8001b40 <HAL_Delay+0x44>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4413      	add	r3, r2
 8001b20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b22:	bf00      	nop
 8001b24:	f7ff ffde 	bl	8001ae4 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d8f7      	bhi.n	8001b24 <HAL_Delay+0x28>
  {
  }
}
 8001b34:	bf00      	nop
 8001b36:	bf00      	nop
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000008 	.word	0x20000008

08001b44 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d101      	bne.n	8001b56 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e0ed      	b.n	8001d32 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d102      	bne.n	8001b68 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff fdb6 	bl	80016d4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f042 0201 	orr.w	r2, r2, #1
 8001b76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b78:	f7ff ffb4 	bl	8001ae4 <HAL_GetTick>
 8001b7c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b7e:	e012      	b.n	8001ba6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b80:	f7ff ffb0 	bl	8001ae4 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b0a      	cmp	r3, #10
 8001b8c:	d90b      	bls.n	8001ba6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b92:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2205      	movs	r2, #5
 8001b9e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e0c5      	b.n	8001d32 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d0e5      	beq.n	8001b80 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f022 0202 	bic.w	r2, r2, #2
 8001bc2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bc4:	f7ff ff8e 	bl	8001ae4 <HAL_GetTick>
 8001bc8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001bca:	e012      	b.n	8001bf2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001bcc:	f7ff ff8a 	bl	8001ae4 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b0a      	cmp	r3, #10
 8001bd8:	d90b      	bls.n	8001bf2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bde:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2205      	movs	r2, #5
 8001bea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e09f      	b.n	8001d32 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1e5      	bne.n	8001bcc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	7e1b      	ldrb	r3, [r3, #24]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d108      	bne.n	8001c1a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	e007      	b.n	8001c2a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c28:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	7e5b      	ldrb	r3, [r3, #25]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d108      	bne.n	8001c44 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	e007      	b.n	8001c54 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001c52:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	7e9b      	ldrb	r3, [r3, #26]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d108      	bne.n	8001c6e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f042 0220 	orr.w	r2, r2, #32
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	e007      	b.n	8001c7e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f022 0220 	bic.w	r2, r2, #32
 8001c7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	7edb      	ldrb	r3, [r3, #27]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d108      	bne.n	8001c98 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f022 0210 	bic.w	r2, r2, #16
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	e007      	b.n	8001ca8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f042 0210 	orr.w	r2, r2, #16
 8001ca6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	7f1b      	ldrb	r3, [r3, #28]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d108      	bne.n	8001cc2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f042 0208 	orr.w	r2, r2, #8
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	e007      	b.n	8001cd2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f022 0208 	bic.w	r2, r2, #8
 8001cd0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	7f5b      	ldrb	r3, [r3, #29]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d108      	bne.n	8001cec <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f042 0204 	orr.w	r2, r2, #4
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	e007      	b.n	8001cfc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f022 0204 	bic.w	r2, r2, #4
 8001cfa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	431a      	orrs	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	695b      	ldr	r3, [r3, #20]
 8001d10:	ea42 0103 	orr.w	r1, r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	1e5a      	subs	r2, r3, #1
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
	...

08001d3c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b087      	sub	sp, #28
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d52:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001d54:	7cfb      	ldrb	r3, [r7, #19]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d003      	beq.n	8001d62 <HAL_CAN_ConfigFilter+0x26>
 8001d5a:	7cfb      	ldrb	r3, [r7, #19]
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	f040 80be 	bne.w	8001ede <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001d62:	4b65      	ldr	r3, [pc, #404]	@ (8001ef8 <HAL_CAN_ConfigFilter+0x1bc>)
 8001d64:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001d6c:	f043 0201 	orr.w	r2, r3, #1
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001d7c:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d90:	021b      	lsls	r3, r3, #8
 8001d92:	431a      	orrs	r2, r3
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	f003 031f 	and.w	r3, r3, #31
 8001da2:	2201      	movs	r2, #1
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	43db      	mvns	r3, r3
 8001db4:	401a      	ands	r2, r3
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	69db      	ldr	r3, [r3, #28]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d123      	bne.n	8001e0c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	401a      	ands	r2, r3
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001de2:	683a      	ldr	r2, [r7, #0]
 8001de4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001de6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	3248      	adds	r2, #72	@ 0x48
 8001dec:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e00:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e02:	6979      	ldr	r1, [r7, #20]
 8001e04:	3348      	adds	r3, #72	@ 0x48
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	440b      	add	r3, r1
 8001e0a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	69db      	ldr	r3, [r3, #28]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d122      	bne.n	8001e5a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001e34:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	3248      	adds	r2, #72	@ 0x48
 8001e3a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e4e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e50:	6979      	ldr	r1, [r7, #20]
 8001e52:	3348      	adds	r3, #72	@ 0x48
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	440b      	add	r3, r1
 8001e58:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d109      	bne.n	8001e76 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	401a      	ands	r2, r3
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001e74:	e007      	b.n	8001e86 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d109      	bne.n	8001ea2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	43db      	mvns	r3, r3
 8001e98:	401a      	ands	r2, r3
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001ea0:	e007      	b.n	8001eb2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	6a1b      	ldr	r3, [r3, #32]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d107      	bne.n	8001eca <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	431a      	orrs	r2, r3
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001ed0:	f023 0201 	bic.w	r2, r3, #1
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001eda:	2300      	movs	r3, #0
 8001edc:	e006      	b.n	8001eec <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
  }
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	371c      	adds	r7, #28
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	40006400 	.word	0x40006400

08001efc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d12e      	bne.n	8001f6e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2202      	movs	r2, #2
 8001f14:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 0201 	bic.w	r2, r2, #1
 8001f26:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001f28:	f7ff fddc 	bl	8001ae4 <HAL_GetTick>
 8001f2c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001f2e:	e012      	b.n	8001f56 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f30:	f7ff fdd8 	bl	8001ae4 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b0a      	cmp	r3, #10
 8001f3c:	d90b      	bls.n	8001f56 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f42:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2205      	movs	r2, #5
 8001f4e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e012      	b.n	8001f7c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1e5      	bne.n	8001f30 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	e006      	b.n	8001f7c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f72:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
  }
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b089      	sub	sp, #36	@ 0x24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
 8001f90:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f98:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001fa2:	7ffb      	ldrb	r3, [r7, #31]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d003      	beq.n	8001fb0 <HAL_CAN_AddTxMessage+0x2c>
 8001fa8:	7ffb      	ldrb	r3, [r7, #31]
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	f040 80ad 	bne.w	800210a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10a      	bne.n	8001fd0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d105      	bne.n	8001fd0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f000 8095 	beq.w	80020fa <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	0e1b      	lsrs	r3, r3, #24
 8001fd4:	f003 0303 	and.w	r3, r3, #3
 8001fd8:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001fda:	2201      	movs	r2, #1
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	409a      	lsls	r2, r3
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d10d      	bne.n	8002008 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001ff6:	68f9      	ldr	r1, [r7, #12]
 8001ff8:	6809      	ldr	r1, [r1, #0]
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	3318      	adds	r3, #24
 8002000:	011b      	lsls	r3, r3, #4
 8002002:	440b      	add	r3, r1
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	e00f      	b.n	8002028 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002012:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002018:	68f9      	ldr	r1, [r7, #12]
 800201a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800201c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	3318      	adds	r3, #24
 8002022:	011b      	lsls	r3, r3, #4
 8002024:	440b      	add	r3, r1
 8002026:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6819      	ldr	r1, [r3, #0]
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	691a      	ldr	r2, [r3, #16]
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	3318      	adds	r3, #24
 8002034:	011b      	lsls	r3, r3, #4
 8002036:	440b      	add	r3, r1
 8002038:	3304      	adds	r3, #4
 800203a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	7d1b      	ldrb	r3, [r3, #20]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d111      	bne.n	8002068 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	3318      	adds	r3, #24
 800204c:	011b      	lsls	r3, r3, #4
 800204e:	4413      	add	r3, r2
 8002050:	3304      	adds	r3, #4
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	6811      	ldr	r1, [r2, #0]
 8002058:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	3318      	adds	r3, #24
 8002060:	011b      	lsls	r3, r3, #4
 8002062:	440b      	add	r3, r1
 8002064:	3304      	adds	r3, #4
 8002066:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3307      	adds	r3, #7
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	061a      	lsls	r2, r3, #24
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3306      	adds	r3, #6
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	041b      	lsls	r3, r3, #16
 8002078:	431a      	orrs	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3305      	adds	r3, #5
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	021b      	lsls	r3, r3, #8
 8002082:	4313      	orrs	r3, r2
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	3204      	adds	r2, #4
 8002088:	7812      	ldrb	r2, [r2, #0]
 800208a:	4610      	mov	r0, r2
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	6811      	ldr	r1, [r2, #0]
 8002090:	ea43 0200 	orr.w	r2, r3, r0
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	011b      	lsls	r3, r3, #4
 8002098:	440b      	add	r3, r1
 800209a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800209e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3303      	adds	r3, #3
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	061a      	lsls	r2, r3, #24
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3302      	adds	r3, #2
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	041b      	lsls	r3, r3, #16
 80020b0:	431a      	orrs	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	3301      	adds	r3, #1
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	021b      	lsls	r3, r3, #8
 80020ba:	4313      	orrs	r3, r2
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	7812      	ldrb	r2, [r2, #0]
 80020c0:	4610      	mov	r0, r2
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	6811      	ldr	r1, [r2, #0]
 80020c6:	ea43 0200 	orr.w	r2, r3, r0
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	011b      	lsls	r3, r3, #4
 80020ce:	440b      	add	r3, r1
 80020d0:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80020d4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	3318      	adds	r3, #24
 80020de:	011b      	lsls	r3, r3, #4
 80020e0:	4413      	add	r3, r2
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	6811      	ldr	r1, [r2, #0]
 80020e8:	f043 0201 	orr.w	r2, r3, #1
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	3318      	adds	r3, #24
 80020f0:	011b      	lsls	r3, r3, #4
 80020f2:	440b      	add	r3, r1
 80020f4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80020f6:	2300      	movs	r3, #0
 80020f8:	e00e      	b.n	8002118 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020fe:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e006      	b.n	8002118 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800210e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
  }
}
 8002118:	4618      	mov	r0, r3
 800211a:	3724      	adds	r7, #36	@ 0x24
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002124:	b480      	push	{r7}
 8002126:	b087      	sub	sp, #28
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
 8002130:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002138:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800213a:	7dfb      	ldrb	r3, [r7, #23]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d003      	beq.n	8002148 <HAL_CAN_GetRxMessage+0x24>
 8002140:	7dfb      	ldrb	r3, [r7, #23]
 8002142:	2b02      	cmp	r3, #2
 8002144:	f040 8103 	bne.w	800234e <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d10e      	bne.n	800216c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	f003 0303 	and.w	r3, r3, #3
 8002158:	2b00      	cmp	r3, #0
 800215a:	d116      	bne.n	800218a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002160:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e0f7      	b.n	800235c <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	f003 0303 	and.w	r3, r3, #3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d107      	bne.n	800218a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800217e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e0e8      	b.n	800235c <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	331b      	adds	r3, #27
 8002192:	011b      	lsls	r3, r3, #4
 8002194:	4413      	add	r3, r2
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0204 	and.w	r2, r3, #4
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d10c      	bne.n	80021c2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	331b      	adds	r3, #27
 80021b0:	011b      	lsls	r3, r3, #4
 80021b2:	4413      	add	r3, r2
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	0d5b      	lsrs	r3, r3, #21
 80021b8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	e00b      	b.n	80021da <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	331b      	adds	r3, #27
 80021ca:	011b      	lsls	r3, r3, #4
 80021cc:	4413      	add	r3, r2
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	08db      	lsrs	r3, r3, #3
 80021d2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	331b      	adds	r3, #27
 80021e2:	011b      	lsls	r3, r3, #4
 80021e4:	4413      	add	r3, r2
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0202 	and.w	r2, r3, #2
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	331b      	adds	r3, #27
 80021f8:	011b      	lsls	r3, r3, #4
 80021fa:	4413      	add	r3, r2
 80021fc:	3304      	adds	r3, #4
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0308 	and.w	r3, r3, #8
 8002204:	2b00      	cmp	r3, #0
 8002206:	d003      	beq.n	8002210 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2208      	movs	r2, #8
 800220c:	611a      	str	r2, [r3, #16]
 800220e:	e00b      	b.n	8002228 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	331b      	adds	r3, #27
 8002218:	011b      	lsls	r3, r3, #4
 800221a:	4413      	add	r3, r2
 800221c:	3304      	adds	r3, #4
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 020f 	and.w	r2, r3, #15
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	331b      	adds	r3, #27
 8002230:	011b      	lsls	r3, r3, #4
 8002232:	4413      	add	r3, r2
 8002234:	3304      	adds	r3, #4
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	0a1b      	lsrs	r3, r3, #8
 800223a:	b2da      	uxtb	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	331b      	adds	r3, #27
 8002248:	011b      	lsls	r3, r3, #4
 800224a:	4413      	add	r3, r2
 800224c:	3304      	adds	r3, #4
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	0c1b      	lsrs	r3, r3, #16
 8002252:	b29a      	uxth	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	011b      	lsls	r3, r3, #4
 8002260:	4413      	add	r3, r2
 8002262:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	b2da      	uxtb	r2, r3
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	011b      	lsls	r3, r3, #4
 8002276:	4413      	add	r3, r2
 8002278:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	0a1a      	lsrs	r2, r3, #8
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	3301      	adds	r3, #1
 8002284:	b2d2      	uxtb	r2, r2
 8002286:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	011b      	lsls	r3, r3, #4
 8002290:	4413      	add	r3, r2
 8002292:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	0c1a      	lsrs	r2, r3, #16
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	3302      	adds	r3, #2
 800229e:	b2d2      	uxtb	r2, r2
 80022a0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	011b      	lsls	r3, r3, #4
 80022aa:	4413      	add	r3, r2
 80022ac:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	0e1a      	lsrs	r2, r3, #24
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	3303      	adds	r3, #3
 80022b8:	b2d2      	uxtb	r2, r2
 80022ba:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	011b      	lsls	r3, r3, #4
 80022c4:	4413      	add	r3, r2
 80022c6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	3304      	adds	r3, #4
 80022d0:	b2d2      	uxtb	r2, r2
 80022d2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	011b      	lsls	r3, r3, #4
 80022dc:	4413      	add	r3, r2
 80022de:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	0a1a      	lsrs	r2, r3, #8
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	3305      	adds	r3, #5
 80022ea:	b2d2      	uxtb	r2, r2
 80022ec:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	011b      	lsls	r3, r3, #4
 80022f6:	4413      	add	r3, r2
 80022f8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	0c1a      	lsrs	r2, r3, #16
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	3306      	adds	r3, #6
 8002304:	b2d2      	uxtb	r2, r2
 8002306:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	011b      	lsls	r3, r3, #4
 8002310:	4413      	add	r3, r2
 8002312:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	0e1a      	lsrs	r2, r3, #24
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	3307      	adds	r3, #7
 800231e:	b2d2      	uxtb	r2, r2
 8002320:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d108      	bne.n	800233a <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68da      	ldr	r2, [r3, #12]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f042 0220 	orr.w	r2, r2, #32
 8002336:	60da      	str	r2, [r3, #12]
 8002338:	e007      	b.n	800234a <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	691a      	ldr	r2, [r3, #16]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f042 0220 	orr.w	r2, r2, #32
 8002348:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800234a:	2300      	movs	r3, #0
 800234c:	e006      	b.n	800235c <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002352:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
  }
}
 800235c:	4618      	mov	r0, r3
 800235e:	371c      	adds	r7, #28
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002378:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800237a:	7bfb      	ldrb	r3, [r7, #15]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d002      	beq.n	8002386 <HAL_CAN_ActivateNotification+0x1e>
 8002380:	7bfb      	ldrb	r3, [r7, #15]
 8002382:	2b02      	cmp	r3, #2
 8002384:	d109      	bne.n	800239a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	6959      	ldr	r1, [r3, #20]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	430a      	orrs	r2, r1
 8002394:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002396:	2300      	movs	r3, #0
 8002398:	e006      	b.n	80023a8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800239e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
  }
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b08a      	sub	sp, #40	@ 0x28
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80023bc:	2300      	movs	r3, #0
 80023be:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80023f0:	6a3b      	ldr	r3, [r7, #32]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d07c      	beq.n	80024f4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	2b00      	cmp	r3, #0
 8002402:	d023      	beq.n	800244c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2201      	movs	r2, #1
 800240a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f983 	bl	8002722 <HAL_CAN_TxMailbox0CompleteCallback>
 800241c:	e016      	b.n	800244c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	2b00      	cmp	r3, #0
 8002426:	d004      	beq.n	8002432 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800242a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800242e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002430:	e00c      	b.n	800244c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	f003 0308 	and.w	r3, r3, #8
 8002438:	2b00      	cmp	r3, #0
 800243a:	d004      	beq.n	8002446 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800243c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002442:	627b      	str	r3, [r7, #36]	@ 0x24
 8002444:	e002      	b.n	800244c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 f989 	bl	800275e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002452:	2b00      	cmp	r3, #0
 8002454:	d024      	beq.n	80024a0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800245e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f963 	bl	8002736 <HAL_CAN_TxMailbox1CompleteCallback>
 8002470:	e016      	b.n	80024a0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002478:	2b00      	cmp	r3, #0
 800247a:	d004      	beq.n	8002486 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800247c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002482:	627b      	str	r3, [r7, #36]	@ 0x24
 8002484:	e00c      	b.n	80024a0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800248c:	2b00      	cmp	r3, #0
 800248e:	d004      	beq.n	800249a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002492:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002496:	627b      	str	r3, [r7, #36]	@ 0x24
 8002498:	e002      	b.n	80024a0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 f969 	bl	8002772 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d024      	beq.n	80024f4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80024b2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f943 	bl	800274a <HAL_CAN_TxMailbox2CompleteCallback>
 80024c4:	e016      	b.n	80024f4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d004      	beq.n	80024da <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80024d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80024d8:	e00c      	b.n	80024f4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d004      	beq.n	80024ee <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80024e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80024ec:	e002      	b.n	80024f4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 f949 	bl	8002786 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80024f4:	6a3b      	ldr	r3, [r7, #32]
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00c      	beq.n	8002518 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	f003 0310 	and.w	r3, r3, #16
 8002504:	2b00      	cmp	r3, #0
 8002506:	d007      	beq.n	8002518 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800250a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800250e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2210      	movs	r2, #16
 8002516:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002518:	6a3b      	ldr	r3, [r7, #32]
 800251a:	f003 0304 	and.w	r3, r3, #4
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00b      	beq.n	800253a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f003 0308 	and.w	r3, r3, #8
 8002528:	2b00      	cmp	r3, #0
 800252a:	d006      	beq.n	800253a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2208      	movs	r2, #8
 8002532:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f000 f930 	bl	800279a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800253a:	6a3b      	ldr	r3, [r7, #32]
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d009      	beq.n	8002558 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	f003 0303 	and.w	r3, r3, #3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d002      	beq.n	8002558 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7fe fefc 	bl	8001350 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002558:	6a3b      	ldr	r3, [r7, #32]
 800255a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00c      	beq.n	800257c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	f003 0310 	and.w	r3, r3, #16
 8002568:	2b00      	cmp	r3, #0
 800256a:	d007      	beq.n	800257c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800256c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002572:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2210      	movs	r2, #16
 800257a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800257c:	6a3b      	ldr	r3, [r7, #32]
 800257e:	f003 0320 	and.w	r3, r3, #32
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00b      	beq.n	800259e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	f003 0308 	and.w	r3, r3, #8
 800258c:	2b00      	cmp	r3, #0
 800258e:	d006      	beq.n	800259e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2208      	movs	r2, #8
 8002596:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f000 f912 	bl	80027c2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800259e:	6a3b      	ldr	r3, [r7, #32]
 80025a0:	f003 0310 	and.w	r3, r3, #16
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d009      	beq.n	80025bc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	f003 0303 	and.w	r3, r3, #3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d002      	beq.n	80025bc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f8f9 	bl	80027ae <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80025bc:	6a3b      	ldr	r3, [r7, #32]
 80025be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00b      	beq.n	80025de <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	f003 0310 	and.w	r3, r3, #16
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d006      	beq.n	80025de <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2210      	movs	r2, #16
 80025d6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 f8fc 	bl	80027d6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80025de:	6a3b      	ldr	r3, [r7, #32]
 80025e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00b      	beq.n	8002600 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	f003 0308 	and.w	r3, r3, #8
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d006      	beq.n	8002600 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2208      	movs	r2, #8
 80025f8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f8f5 	bl	80027ea <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002600:	6a3b      	ldr	r3, [r7, #32]
 8002602:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d07b      	beq.n	8002702 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	f003 0304 	and.w	r3, r3, #4
 8002610:	2b00      	cmp	r3, #0
 8002612:	d072      	beq.n	80026fa <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002614:	6a3b      	ldr	r3, [r7, #32]
 8002616:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800261a:	2b00      	cmp	r3, #0
 800261c:	d008      	beq.n	8002630 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002624:	2b00      	cmp	r3, #0
 8002626:	d003      	beq.n	8002630 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262a:	f043 0301 	orr.w	r3, r3, #1
 800262e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002630:	6a3b      	ldr	r3, [r7, #32]
 8002632:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002636:	2b00      	cmp	r3, #0
 8002638:	d008      	beq.n	800264c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002640:	2b00      	cmp	r3, #0
 8002642:	d003      	beq.n	800264c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002646:	f043 0302 	orr.w	r3, r3, #2
 800264a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800264c:	6a3b      	ldr	r3, [r7, #32]
 800264e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002652:	2b00      	cmp	r3, #0
 8002654:	d008      	beq.n	8002668 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800265c:	2b00      	cmp	r3, #0
 800265e:	d003      	beq.n	8002668 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002662:	f043 0304 	orr.w	r3, r3, #4
 8002666:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002668:	6a3b      	ldr	r3, [r7, #32]
 800266a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800266e:	2b00      	cmp	r3, #0
 8002670:	d043      	beq.n	80026fa <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002678:	2b00      	cmp	r3, #0
 800267a:	d03e      	beq.n	80026fa <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002682:	2b60      	cmp	r3, #96	@ 0x60
 8002684:	d02b      	beq.n	80026de <HAL_CAN_IRQHandler+0x32a>
 8002686:	2b60      	cmp	r3, #96	@ 0x60
 8002688:	d82e      	bhi.n	80026e8 <HAL_CAN_IRQHandler+0x334>
 800268a:	2b50      	cmp	r3, #80	@ 0x50
 800268c:	d022      	beq.n	80026d4 <HAL_CAN_IRQHandler+0x320>
 800268e:	2b50      	cmp	r3, #80	@ 0x50
 8002690:	d82a      	bhi.n	80026e8 <HAL_CAN_IRQHandler+0x334>
 8002692:	2b40      	cmp	r3, #64	@ 0x40
 8002694:	d019      	beq.n	80026ca <HAL_CAN_IRQHandler+0x316>
 8002696:	2b40      	cmp	r3, #64	@ 0x40
 8002698:	d826      	bhi.n	80026e8 <HAL_CAN_IRQHandler+0x334>
 800269a:	2b30      	cmp	r3, #48	@ 0x30
 800269c:	d010      	beq.n	80026c0 <HAL_CAN_IRQHandler+0x30c>
 800269e:	2b30      	cmp	r3, #48	@ 0x30
 80026a0:	d822      	bhi.n	80026e8 <HAL_CAN_IRQHandler+0x334>
 80026a2:	2b10      	cmp	r3, #16
 80026a4:	d002      	beq.n	80026ac <HAL_CAN_IRQHandler+0x2f8>
 80026a6:	2b20      	cmp	r3, #32
 80026a8:	d005      	beq.n	80026b6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80026aa:	e01d      	b.n	80026e8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80026ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ae:	f043 0308 	orr.w	r3, r3, #8
 80026b2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80026b4:	e019      	b.n	80026ea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80026b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b8:	f043 0310 	orr.w	r3, r3, #16
 80026bc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80026be:	e014      	b.n	80026ea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80026c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c2:	f043 0320 	orr.w	r3, r3, #32
 80026c6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80026c8:	e00f      	b.n	80026ea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80026ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026d0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80026d2:	e00a      	b.n	80026ea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80026d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026da:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80026dc:	e005      	b.n	80026ea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80026de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026e4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80026e6:	e000      	b.n	80026ea <HAL_CAN_IRQHandler+0x336>
            break;
 80026e8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	699a      	ldr	r2, [r3, #24]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80026f8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2204      	movs	r2, #4
 8002700:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002704:	2b00      	cmp	r3, #0
 8002706:	d008      	beq.n	800271a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800270c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270e:	431a      	orrs	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f000 f872 	bl	80027fe <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800271a:	bf00      	nop
 800271c:	3728      	adds	r7, #40	@ 0x28
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002722:	b480      	push	{r7}
 8002724:	b083      	sub	sp, #12
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800273e:	bf00      	nop
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800274a:	b480      	push	{r7}
 800274c:	b083      	sub	sp, #12
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800275e:	b480      	push	{r7}
 8002760:	b083      	sub	sp, #12
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002766:	bf00      	nop
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr

08002772 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002772:	b480      	push	{r7}
 8002774:	b083      	sub	sp, #12
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr

08002786 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002786:	b480      	push	{r7}
 8002788:	b083      	sub	sp, #12
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800279a:	b480      	push	{r7}
 800279c:	b083      	sub	sp, #12
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80027ae:	b480      	push	{r7}
 80027b0:	b083      	sub	sp, #12
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80027b6:	bf00      	nop
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80027c2:	b480      	push	{r7}
 80027c4:	b083      	sub	sp, #12
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80027ca:	bf00      	nop
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr

080027ea <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80027ea:	b480      	push	{r7}
 80027ec:	b083      	sub	sp, #12
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80027fe:	b480      	push	{r7}
 8002800:	b083      	sub	sp, #12
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
	...

08002814 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002824:	4b0c      	ldr	r3, [pc, #48]	@ (8002858 <__NVIC_SetPriorityGrouping+0x44>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002830:	4013      	ands	r3, r2
 8002832:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800283c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002840:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002846:	4a04      	ldr	r2, [pc, #16]	@ (8002858 <__NVIC_SetPriorityGrouping+0x44>)
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	60d3      	str	r3, [r2, #12]
}
 800284c:	bf00      	nop
 800284e:	3714      	adds	r7, #20
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	e000ed00 	.word	0xe000ed00

0800285c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002860:	4b04      	ldr	r3, [pc, #16]	@ (8002874 <__NVIC_GetPriorityGrouping+0x18>)
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	0a1b      	lsrs	r3, r3, #8
 8002866:	f003 0307 	and.w	r3, r3, #7
}
 800286a:	4618      	mov	r0, r3
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	e000ed00 	.word	0xe000ed00

08002878 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	4603      	mov	r3, r0
 8002880:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002886:	2b00      	cmp	r3, #0
 8002888:	db0b      	blt.n	80028a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800288a:	79fb      	ldrb	r3, [r7, #7]
 800288c:	f003 021f 	and.w	r2, r3, #31
 8002890:	4907      	ldr	r1, [pc, #28]	@ (80028b0 <__NVIC_EnableIRQ+0x38>)
 8002892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002896:	095b      	lsrs	r3, r3, #5
 8002898:	2001      	movs	r0, #1
 800289a:	fa00 f202 	lsl.w	r2, r0, r2
 800289e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	e000e100 	.word	0xe000e100

080028b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	4603      	mov	r3, r0
 80028bc:	6039      	str	r1, [r7, #0]
 80028be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	db0a      	blt.n	80028de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	b2da      	uxtb	r2, r3
 80028cc:	490c      	ldr	r1, [pc, #48]	@ (8002900 <__NVIC_SetPriority+0x4c>)
 80028ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d2:	0112      	lsls	r2, r2, #4
 80028d4:	b2d2      	uxtb	r2, r2
 80028d6:	440b      	add	r3, r1
 80028d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028dc:	e00a      	b.n	80028f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	4908      	ldr	r1, [pc, #32]	@ (8002904 <__NVIC_SetPriority+0x50>)
 80028e4:	79fb      	ldrb	r3, [r7, #7]
 80028e6:	f003 030f 	and.w	r3, r3, #15
 80028ea:	3b04      	subs	r3, #4
 80028ec:	0112      	lsls	r2, r2, #4
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	440b      	add	r3, r1
 80028f2:	761a      	strb	r2, [r3, #24]
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr
 8002900:	e000e100 	.word	0xe000e100
 8002904:	e000ed00 	.word	0xe000ed00

08002908 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002908:	b480      	push	{r7}
 800290a:	b089      	sub	sp, #36	@ 0x24
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f1c3 0307 	rsb	r3, r3, #7
 8002922:	2b04      	cmp	r3, #4
 8002924:	bf28      	it	cs
 8002926:	2304      	movcs	r3, #4
 8002928:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	3304      	adds	r3, #4
 800292e:	2b06      	cmp	r3, #6
 8002930:	d902      	bls.n	8002938 <NVIC_EncodePriority+0x30>
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	3b03      	subs	r3, #3
 8002936:	e000      	b.n	800293a <NVIC_EncodePriority+0x32>
 8002938:	2300      	movs	r3, #0
 800293a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800293c:	f04f 32ff 	mov.w	r2, #4294967295
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	43da      	mvns	r2, r3
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	401a      	ands	r2, r3
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002950:	f04f 31ff 	mov.w	r1, #4294967295
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	fa01 f303 	lsl.w	r3, r1, r3
 800295a:	43d9      	mvns	r1, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002960:	4313      	orrs	r3, r2
         );
}
 8002962:	4618      	mov	r0, r3
 8002964:	3724      	adds	r7, #36	@ 0x24
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
	...

08002970 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3b01      	subs	r3, #1
 800297c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002980:	d301      	bcc.n	8002986 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002982:	2301      	movs	r3, #1
 8002984:	e00f      	b.n	80029a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002986:	4a0a      	ldr	r2, [pc, #40]	@ (80029b0 <SysTick_Config+0x40>)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3b01      	subs	r3, #1
 800298c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800298e:	210f      	movs	r1, #15
 8002990:	f04f 30ff 	mov.w	r0, #4294967295
 8002994:	f7ff ff8e 	bl	80028b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002998:	4b05      	ldr	r3, [pc, #20]	@ (80029b0 <SysTick_Config+0x40>)
 800299a:	2200      	movs	r2, #0
 800299c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800299e:	4b04      	ldr	r3, [pc, #16]	@ (80029b0 <SysTick_Config+0x40>)
 80029a0:	2207      	movs	r2, #7
 80029a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	e000e010 	.word	0xe000e010

080029b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f7ff ff29 	bl	8002814 <__NVIC_SetPriorityGrouping>
}
 80029c2:	bf00      	nop
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b086      	sub	sp, #24
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	4603      	mov	r3, r0
 80029d2:	60b9      	str	r1, [r7, #8]
 80029d4:	607a      	str	r2, [r7, #4]
 80029d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029d8:	2300      	movs	r3, #0
 80029da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029dc:	f7ff ff3e 	bl	800285c <__NVIC_GetPriorityGrouping>
 80029e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	68b9      	ldr	r1, [r7, #8]
 80029e6:	6978      	ldr	r0, [r7, #20]
 80029e8:	f7ff ff8e 	bl	8002908 <NVIC_EncodePriority>
 80029ec:	4602      	mov	r2, r0
 80029ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029f2:	4611      	mov	r1, r2
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff ff5d 	bl	80028b4 <__NVIC_SetPriority>
}
 80029fa:	bf00      	nop
 80029fc:	3718      	adds	r7, #24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b082      	sub	sp, #8
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	4603      	mov	r3, r0
 8002a0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff ff31 	bl	8002878 <__NVIC_EnableIRQ>
}
 8002a16:	bf00      	nop
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b082      	sub	sp, #8
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7ff ffa2 	bl	8002970 <SysTick_Config>
 8002a2c:	4603      	mov	r3, r0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
	...

08002a38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a40:	2300      	movs	r3, #0
 8002a42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a44:	f7ff f84e 	bl	8001ae4 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d101      	bne.n	8002a54 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e099      	b.n	8002b88 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2202      	movs	r2, #2
 8002a58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 0201 	bic.w	r2, r2, #1
 8002a72:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a74:	e00f      	b.n	8002a96 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a76:	f7ff f835 	bl	8001ae4 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b05      	cmp	r3, #5
 8002a82:	d908      	bls.n	8002a96 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2220      	movs	r2, #32
 8002a88:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2203      	movs	r2, #3
 8002a8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e078      	b.n	8002b88 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1e8      	bne.n	8002a76 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	4b38      	ldr	r3, [pc, #224]	@ (8002b90 <HAL_DMA_Init+0x158>)
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685a      	ldr	r2, [r3, #4]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ac2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ace:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ada:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aec:	2b04      	cmp	r3, #4
 8002aee:	d107      	bne.n	8002b00 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af8:	4313      	orrs	r3, r2
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	f023 0307 	bic.w	r3, r3, #7
 8002b16:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b26:	2b04      	cmp	r3, #4
 8002b28:	d117      	bne.n	8002b5a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00e      	beq.n	8002b5a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 fa7b 	bl	8003038 <DMA_CheckFifoParam>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d008      	beq.n	8002b5a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2240      	movs	r2, #64	@ 0x40
 8002b4c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002b56:	2301      	movs	r3, #1
 8002b58:	e016      	b.n	8002b88 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 fa32 	bl	8002fcc <DMA_CalcBaseAndBitshift>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b70:	223f      	movs	r2, #63	@ 0x3f
 8002b72:	409a      	lsls	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3718      	adds	r7, #24
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	f010803f 	.word	0xf010803f

08002b94 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ba0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ba2:	f7fe ff9f 	bl	8001ae4 <HAL_GetTick>
 8002ba6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d008      	beq.n	8002bc6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2280      	movs	r2, #128	@ 0x80
 8002bb8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e052      	b.n	8002c6c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 0216 	bic.w	r2, r2, #22
 8002bd4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	695a      	ldr	r2, [r3, #20]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002be4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d103      	bne.n	8002bf6 <HAL_DMA_Abort+0x62>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d007      	beq.n	8002c06 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 0208 	bic.w	r2, r2, #8
 8002c04:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 0201 	bic.w	r2, r2, #1
 8002c14:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c16:	e013      	b.n	8002c40 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c18:	f7fe ff64 	bl	8001ae4 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b05      	cmp	r3, #5
 8002c24:	d90c      	bls.n	8002c40 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2220      	movs	r2, #32
 8002c2a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2203      	movs	r2, #3
 8002c30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e015      	b.n	8002c6c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1e4      	bne.n	8002c18 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c52:	223f      	movs	r2, #63	@ 0x3f
 8002c54:	409a      	lsls	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d004      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2280      	movs	r2, #128	@ 0x80
 8002c8c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e00c      	b.n	8002cac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2205      	movs	r2, #5
 8002c96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f022 0201 	bic.w	r2, r2, #1
 8002ca8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002cc4:	4b8e      	ldr	r3, [pc, #568]	@ (8002f00 <HAL_DMA_IRQHandler+0x248>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a8e      	ldr	r2, [pc, #568]	@ (8002f04 <HAL_DMA_IRQHandler+0x24c>)
 8002cca:	fba2 2303 	umull	r2, r3, r2, r3
 8002cce:	0a9b      	lsrs	r3, r3, #10
 8002cd0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cd6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ce2:	2208      	movs	r2, #8
 8002ce4:	409a      	lsls	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d01a      	beq.n	8002d24 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d013      	beq.n	8002d24 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 0204 	bic.w	r2, r2, #4
 8002d0a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d10:	2208      	movs	r2, #8
 8002d12:	409a      	lsls	r2, r3
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d1c:	f043 0201 	orr.w	r2, r3, #1
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d28:	2201      	movs	r2, #1
 8002d2a:	409a      	lsls	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d012      	beq.n	8002d5a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00b      	beq.n	8002d5a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d46:	2201      	movs	r2, #1
 8002d48:	409a      	lsls	r2, r3
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d52:	f043 0202 	orr.w	r2, r3, #2
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d5e:	2204      	movs	r2, #4
 8002d60:	409a      	lsls	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	4013      	ands	r3, r2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d012      	beq.n	8002d90 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00b      	beq.n	8002d90 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d7c:	2204      	movs	r2, #4
 8002d7e:	409a      	lsls	r2, r3
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d88:	f043 0204 	orr.w	r2, r3, #4
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d94:	2210      	movs	r2, #16
 8002d96:	409a      	lsls	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d043      	beq.n	8002e28 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0308 	and.w	r3, r3, #8
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d03c      	beq.n	8002e28 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002db2:	2210      	movs	r2, #16
 8002db4:	409a      	lsls	r2, r3
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d018      	beq.n	8002dfa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d108      	bne.n	8002de8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d024      	beq.n	8002e28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	4798      	blx	r3
 8002de6:	e01f      	b.n	8002e28 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d01b      	beq.n	8002e28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	4798      	blx	r3
 8002df8:	e016      	b.n	8002e28 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d107      	bne.n	8002e18 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 0208 	bic.w	r2, r2, #8
 8002e16:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d003      	beq.n	8002e28 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e2c:	2220      	movs	r2, #32
 8002e2e:	409a      	lsls	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4013      	ands	r3, r2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f000 808f 	beq.w	8002f58 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0310 	and.w	r3, r3, #16
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f000 8087 	beq.w	8002f58 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e4e:	2220      	movs	r2, #32
 8002e50:	409a      	lsls	r2, r3
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b05      	cmp	r3, #5
 8002e60:	d136      	bne.n	8002ed0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 0216 	bic.w	r2, r2, #22
 8002e70:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	695a      	ldr	r2, [r3, #20]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e80:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d103      	bne.n	8002e92 <HAL_DMA_IRQHandler+0x1da>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d007      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 0208 	bic.w	r2, r2, #8
 8002ea0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ea6:	223f      	movs	r2, #63	@ 0x3f
 8002ea8:	409a      	lsls	r2, r3
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d07e      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	4798      	blx	r3
        }
        return;
 8002ece:	e079      	b.n	8002fc4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d01d      	beq.n	8002f1a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d10d      	bne.n	8002f08 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d031      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	4798      	blx	r3
 8002efc:	e02c      	b.n	8002f58 <HAL_DMA_IRQHandler+0x2a0>
 8002efe:	bf00      	nop
 8002f00:	20000000 	.word	0x20000000
 8002f04:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d023      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	4798      	blx	r3
 8002f18:	e01e      	b.n	8002f58 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d10f      	bne.n	8002f48 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f022 0210 	bic.w	r2, r2, #16
 8002f36:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d003      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d032      	beq.n	8002fc6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f64:	f003 0301 	and.w	r3, r3, #1
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d022      	beq.n	8002fb2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2205      	movs	r2, #5
 8002f70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f022 0201 	bic.w	r2, r2, #1
 8002f82:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	3301      	adds	r3, #1
 8002f88:	60bb      	str	r3, [r7, #8]
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d307      	bcc.n	8002fa0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1f2      	bne.n	8002f84 <HAL_DMA_IRQHandler+0x2cc>
 8002f9e:	e000      	b.n	8002fa2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002fa0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d005      	beq.n	8002fc6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	4798      	blx	r3
 8002fc2:	e000      	b.n	8002fc6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002fc4:	bf00      	nop
    }
  }
}
 8002fc6:	3718      	adds	r7, #24
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	3b10      	subs	r3, #16
 8002fdc:	4a14      	ldr	r2, [pc, #80]	@ (8003030 <DMA_CalcBaseAndBitshift+0x64>)
 8002fde:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe2:	091b      	lsrs	r3, r3, #4
 8002fe4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002fe6:	4a13      	ldr	r2, [pc, #76]	@ (8003034 <DMA_CalcBaseAndBitshift+0x68>)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	4413      	add	r3, r2
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	461a      	mov	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2b03      	cmp	r3, #3
 8002ff8:	d909      	bls.n	800300e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003002:	f023 0303 	bic.w	r3, r3, #3
 8003006:	1d1a      	adds	r2, r3, #4
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	659a      	str	r2, [r3, #88]	@ 0x58
 800300c:	e007      	b.n	800301e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003016:	f023 0303 	bic.w	r3, r3, #3
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003022:	4618      	mov	r0, r3
 8003024:	3714      	adds	r7, #20
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	aaaaaaab 	.word	0xaaaaaaab
 8003034:	08005124 	.word	0x08005124

08003038 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003040:	2300      	movs	r3, #0
 8003042:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003048:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d11f      	bne.n	8003092 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	2b03      	cmp	r3, #3
 8003056:	d856      	bhi.n	8003106 <DMA_CheckFifoParam+0xce>
 8003058:	a201      	add	r2, pc, #4	@ (adr r2, 8003060 <DMA_CheckFifoParam+0x28>)
 800305a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800305e:	bf00      	nop
 8003060:	08003071 	.word	0x08003071
 8003064:	08003083 	.word	0x08003083
 8003068:	08003071 	.word	0x08003071
 800306c:	08003107 	.word	0x08003107
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003074:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d046      	beq.n	800310a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003080:	e043      	b.n	800310a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003086:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800308a:	d140      	bne.n	800310e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003090:	e03d      	b.n	800310e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800309a:	d121      	bne.n	80030e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	2b03      	cmp	r3, #3
 80030a0:	d837      	bhi.n	8003112 <DMA_CheckFifoParam+0xda>
 80030a2:	a201      	add	r2, pc, #4	@ (adr r2, 80030a8 <DMA_CheckFifoParam+0x70>)
 80030a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030a8:	080030b9 	.word	0x080030b9
 80030ac:	080030bf 	.word	0x080030bf
 80030b0:	080030b9 	.word	0x080030b9
 80030b4:	080030d1 	.word	0x080030d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	73fb      	strb	r3, [r7, #15]
      break;
 80030bc:	e030      	b.n	8003120 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d025      	beq.n	8003116 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030ce:	e022      	b.n	8003116 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80030d8:	d11f      	bne.n	800311a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030de:	e01c      	b.n	800311a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d903      	bls.n	80030ee <DMA_CheckFifoParam+0xb6>
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	2b03      	cmp	r3, #3
 80030ea:	d003      	beq.n	80030f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80030ec:	e018      	b.n	8003120 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	73fb      	strb	r3, [r7, #15]
      break;
 80030f2:	e015      	b.n	8003120 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00e      	beq.n	800311e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	73fb      	strb	r3, [r7, #15]
      break;
 8003104:	e00b      	b.n	800311e <DMA_CheckFifoParam+0xe6>
      break;
 8003106:	bf00      	nop
 8003108:	e00a      	b.n	8003120 <DMA_CheckFifoParam+0xe8>
      break;
 800310a:	bf00      	nop
 800310c:	e008      	b.n	8003120 <DMA_CheckFifoParam+0xe8>
      break;
 800310e:	bf00      	nop
 8003110:	e006      	b.n	8003120 <DMA_CheckFifoParam+0xe8>
      break;
 8003112:	bf00      	nop
 8003114:	e004      	b.n	8003120 <DMA_CheckFifoParam+0xe8>
      break;
 8003116:	bf00      	nop
 8003118:	e002      	b.n	8003120 <DMA_CheckFifoParam+0xe8>
      break;   
 800311a:	bf00      	nop
 800311c:	e000      	b.n	8003120 <DMA_CheckFifoParam+0xe8>
      break;
 800311e:	bf00      	nop
    }
  } 
  
  return status; 
 8003120:	7bfb      	ldrb	r3, [r7, #15]
}
 8003122:	4618      	mov	r0, r3
 8003124:	3714      	adds	r7, #20
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop

08003130 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003130:	b480      	push	{r7}
 8003132:	b089      	sub	sp, #36	@ 0x24
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800313a:	2300      	movs	r3, #0
 800313c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800313e:	2300      	movs	r3, #0
 8003140:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003142:	2300      	movs	r3, #0
 8003144:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003146:	2300      	movs	r3, #0
 8003148:	61fb      	str	r3, [r7, #28]
 800314a:	e165      	b.n	8003418 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800314c:	2201      	movs	r2, #1
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	4013      	ands	r3, r2
 800315e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	429a      	cmp	r2, r3
 8003166:	f040 8154 	bne.w	8003412 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f003 0303 	and.w	r3, r3, #3
 8003172:	2b01      	cmp	r3, #1
 8003174:	d005      	beq.n	8003182 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800317e:	2b02      	cmp	r3, #2
 8003180:	d130      	bne.n	80031e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	2203      	movs	r2, #3
 800318e:	fa02 f303 	lsl.w	r3, r2, r3
 8003192:	43db      	mvns	r3, r3
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	4013      	ands	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	68da      	ldr	r2, [r3, #12]
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	fa02 f303 	lsl.w	r3, r2, r3
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031b8:	2201      	movs	r2, #1
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	43db      	mvns	r3, r3
 80031c2:	69ba      	ldr	r2, [r7, #24]
 80031c4:	4013      	ands	r3, r2
 80031c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	091b      	lsrs	r3, r3, #4
 80031ce:	f003 0201 	and.w	r2, r3, #1
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	4313      	orrs	r3, r2
 80031dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f003 0303 	and.w	r3, r3, #3
 80031ec:	2b03      	cmp	r3, #3
 80031ee:	d017      	beq.n	8003220 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	2203      	movs	r2, #3
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	43db      	mvns	r3, r3
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	4013      	ands	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	689a      	ldr	r2, [r3, #8]
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	fa02 f303 	lsl.w	r3, r2, r3
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	4313      	orrs	r3, r2
 8003218:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f003 0303 	and.w	r3, r3, #3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d123      	bne.n	8003274 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	08da      	lsrs	r2, r3, #3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	3208      	adds	r2, #8
 8003234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003238:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	220f      	movs	r2, #15
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	43db      	mvns	r3, r3
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	4013      	ands	r3, r2
 800324e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	691a      	ldr	r2, [r3, #16]
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	f003 0307 	and.w	r3, r3, #7
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	fa02 f303 	lsl.w	r3, r2, r3
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	4313      	orrs	r3, r2
 8003264:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	08da      	lsrs	r2, r3, #3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	3208      	adds	r2, #8
 800326e:	69b9      	ldr	r1, [r7, #24]
 8003270:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	2203      	movs	r2, #3
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	43db      	mvns	r3, r3
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	4013      	ands	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f003 0203 	and.w	r2, r3, #3
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	4313      	orrs	r3, r2
 80032a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 80ae 	beq.w	8003412 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032b6:	2300      	movs	r3, #0
 80032b8:	60fb      	str	r3, [r7, #12]
 80032ba:	4b5d      	ldr	r3, [pc, #372]	@ (8003430 <HAL_GPIO_Init+0x300>)
 80032bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032be:	4a5c      	ldr	r2, [pc, #368]	@ (8003430 <HAL_GPIO_Init+0x300>)
 80032c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80032c6:	4b5a      	ldr	r3, [pc, #360]	@ (8003430 <HAL_GPIO_Init+0x300>)
 80032c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032ce:	60fb      	str	r3, [r7, #12]
 80032d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032d2:	4a58      	ldr	r2, [pc, #352]	@ (8003434 <HAL_GPIO_Init+0x304>)
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	089b      	lsrs	r3, r3, #2
 80032d8:	3302      	adds	r3, #2
 80032da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	f003 0303 	and.w	r3, r3, #3
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	220f      	movs	r2, #15
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	43db      	mvns	r3, r3
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	4013      	ands	r3, r2
 80032f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a4f      	ldr	r2, [pc, #316]	@ (8003438 <HAL_GPIO_Init+0x308>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d025      	beq.n	800334a <HAL_GPIO_Init+0x21a>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a4e      	ldr	r2, [pc, #312]	@ (800343c <HAL_GPIO_Init+0x30c>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d01f      	beq.n	8003346 <HAL_GPIO_Init+0x216>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a4d      	ldr	r2, [pc, #308]	@ (8003440 <HAL_GPIO_Init+0x310>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d019      	beq.n	8003342 <HAL_GPIO_Init+0x212>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a4c      	ldr	r2, [pc, #304]	@ (8003444 <HAL_GPIO_Init+0x314>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d013      	beq.n	800333e <HAL_GPIO_Init+0x20e>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a4b      	ldr	r2, [pc, #300]	@ (8003448 <HAL_GPIO_Init+0x318>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d00d      	beq.n	800333a <HAL_GPIO_Init+0x20a>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a4a      	ldr	r2, [pc, #296]	@ (800344c <HAL_GPIO_Init+0x31c>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d007      	beq.n	8003336 <HAL_GPIO_Init+0x206>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a49      	ldr	r2, [pc, #292]	@ (8003450 <HAL_GPIO_Init+0x320>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d101      	bne.n	8003332 <HAL_GPIO_Init+0x202>
 800332e:	2306      	movs	r3, #6
 8003330:	e00c      	b.n	800334c <HAL_GPIO_Init+0x21c>
 8003332:	2307      	movs	r3, #7
 8003334:	e00a      	b.n	800334c <HAL_GPIO_Init+0x21c>
 8003336:	2305      	movs	r3, #5
 8003338:	e008      	b.n	800334c <HAL_GPIO_Init+0x21c>
 800333a:	2304      	movs	r3, #4
 800333c:	e006      	b.n	800334c <HAL_GPIO_Init+0x21c>
 800333e:	2303      	movs	r3, #3
 8003340:	e004      	b.n	800334c <HAL_GPIO_Init+0x21c>
 8003342:	2302      	movs	r3, #2
 8003344:	e002      	b.n	800334c <HAL_GPIO_Init+0x21c>
 8003346:	2301      	movs	r3, #1
 8003348:	e000      	b.n	800334c <HAL_GPIO_Init+0x21c>
 800334a:	2300      	movs	r3, #0
 800334c:	69fa      	ldr	r2, [r7, #28]
 800334e:	f002 0203 	and.w	r2, r2, #3
 8003352:	0092      	lsls	r2, r2, #2
 8003354:	4093      	lsls	r3, r2
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	4313      	orrs	r3, r2
 800335a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800335c:	4935      	ldr	r1, [pc, #212]	@ (8003434 <HAL_GPIO_Init+0x304>)
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	089b      	lsrs	r3, r3, #2
 8003362:	3302      	adds	r3, #2
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800336a:	4b3a      	ldr	r3, [pc, #232]	@ (8003454 <HAL_GPIO_Init+0x324>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	43db      	mvns	r3, r3
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	4013      	ands	r3, r2
 8003378:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	4313      	orrs	r3, r2
 800338c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800338e:	4a31      	ldr	r2, [pc, #196]	@ (8003454 <HAL_GPIO_Init+0x324>)
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003394:	4b2f      	ldr	r3, [pc, #188]	@ (8003454 <HAL_GPIO_Init+0x324>)
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	43db      	mvns	r3, r3
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	4013      	ands	r3, r2
 80033a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d003      	beq.n	80033b8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033b8:	4a26      	ldr	r2, [pc, #152]	@ (8003454 <HAL_GPIO_Init+0x324>)
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033be:	4b25      	ldr	r3, [pc, #148]	@ (8003454 <HAL_GPIO_Init+0x324>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	43db      	mvns	r3, r3
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	4013      	ands	r3, r2
 80033cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d003      	beq.n	80033e2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	4313      	orrs	r3, r2
 80033e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033e2:	4a1c      	ldr	r2, [pc, #112]	@ (8003454 <HAL_GPIO_Init+0x324>)
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033e8:	4b1a      	ldr	r3, [pc, #104]	@ (8003454 <HAL_GPIO_Init+0x324>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	43db      	mvns	r3, r3
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	4013      	ands	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d003      	beq.n	800340c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	4313      	orrs	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800340c:	4a11      	ldr	r2, [pc, #68]	@ (8003454 <HAL_GPIO_Init+0x324>)
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	3301      	adds	r3, #1
 8003416:	61fb      	str	r3, [r7, #28]
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	2b0f      	cmp	r3, #15
 800341c:	f67f ae96 	bls.w	800314c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003420:	bf00      	nop
 8003422:	bf00      	nop
 8003424:	3724      	adds	r7, #36	@ 0x24
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	40023800 	.word	0x40023800
 8003434:	40013800 	.word	0x40013800
 8003438:	40020000 	.word	0x40020000
 800343c:	40020400 	.word	0x40020400
 8003440:	40020800 	.word	0x40020800
 8003444:	40020c00 	.word	0x40020c00
 8003448:	40021000 	.word	0x40021000
 800344c:	40021400 	.word	0x40021400
 8003450:	40021800 	.word	0x40021800
 8003454:	40013c00 	.word	0x40013c00

08003458 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	460b      	mov	r3, r1
 8003462:	807b      	strh	r3, [r7, #2]
 8003464:	4613      	mov	r3, r2
 8003466:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003468:	787b      	ldrb	r3, [r7, #1]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800346e:	887a      	ldrh	r2, [r7, #2]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003474:	e003      	b.n	800347e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003476:	887b      	ldrh	r3, [r7, #2]
 8003478:	041a      	lsls	r2, r3, #16
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	619a      	str	r2, [r3, #24]
}
 800347e:	bf00      	nop
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr

0800348a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800348a:	b480      	push	{r7}
 800348c:	b085      	sub	sp, #20
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
 8003492:	460b      	mov	r3, r1
 8003494:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800349c:	887a      	ldrh	r2, [r7, #2]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	4013      	ands	r3, r2
 80034a2:	041a      	lsls	r2, r3, #16
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	43d9      	mvns	r1, r3
 80034a8:	887b      	ldrh	r3, [r7, #2]
 80034aa:	400b      	ands	r3, r1
 80034ac:	431a      	orrs	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	619a      	str	r2, [r3, #24]
}
 80034b2:	bf00      	nop
 80034b4:	3714      	adds	r7, #20
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
	...

080034c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d101      	bne.n	80034d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e0cc      	b.n	800366e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034d4:	4b68      	ldr	r3, [pc, #416]	@ (8003678 <HAL_RCC_ClockConfig+0x1b8>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 030f 	and.w	r3, r3, #15
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d90c      	bls.n	80034fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034e2:	4b65      	ldr	r3, [pc, #404]	@ (8003678 <HAL_RCC_ClockConfig+0x1b8>)
 80034e4:	683a      	ldr	r2, [r7, #0]
 80034e6:	b2d2      	uxtb	r2, r2
 80034e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ea:	4b63      	ldr	r3, [pc, #396]	@ (8003678 <HAL_RCC_ClockConfig+0x1b8>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 030f 	and.w	r3, r3, #15
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d001      	beq.n	80034fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e0b8      	b.n	800366e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d020      	beq.n	800354a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0304 	and.w	r3, r3, #4
 8003510:	2b00      	cmp	r3, #0
 8003512:	d005      	beq.n	8003520 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003514:	4b59      	ldr	r3, [pc, #356]	@ (800367c <HAL_RCC_ClockConfig+0x1bc>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	4a58      	ldr	r2, [pc, #352]	@ (800367c <HAL_RCC_ClockConfig+0x1bc>)
 800351a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800351e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0308 	and.w	r3, r3, #8
 8003528:	2b00      	cmp	r3, #0
 800352a:	d005      	beq.n	8003538 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800352c:	4b53      	ldr	r3, [pc, #332]	@ (800367c <HAL_RCC_ClockConfig+0x1bc>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	4a52      	ldr	r2, [pc, #328]	@ (800367c <HAL_RCC_ClockConfig+0x1bc>)
 8003532:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003536:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003538:	4b50      	ldr	r3, [pc, #320]	@ (800367c <HAL_RCC_ClockConfig+0x1bc>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	494d      	ldr	r1, [pc, #308]	@ (800367c <HAL_RCC_ClockConfig+0x1bc>)
 8003546:	4313      	orrs	r3, r2
 8003548:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	d044      	beq.n	80035e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d107      	bne.n	800356e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800355e:	4b47      	ldr	r3, [pc, #284]	@ (800367c <HAL_RCC_ClockConfig+0x1bc>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d119      	bne.n	800359e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e07f      	b.n	800366e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2b02      	cmp	r3, #2
 8003574:	d003      	beq.n	800357e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800357a:	2b03      	cmp	r3, #3
 800357c:	d107      	bne.n	800358e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800357e:	4b3f      	ldr	r3, [pc, #252]	@ (800367c <HAL_RCC_ClockConfig+0x1bc>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d109      	bne.n	800359e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e06f      	b.n	800366e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800358e:	4b3b      	ldr	r3, [pc, #236]	@ (800367c <HAL_RCC_ClockConfig+0x1bc>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e067      	b.n	800366e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800359e:	4b37      	ldr	r3, [pc, #220]	@ (800367c <HAL_RCC_ClockConfig+0x1bc>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f023 0203 	bic.w	r2, r3, #3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	4934      	ldr	r1, [pc, #208]	@ (800367c <HAL_RCC_ClockConfig+0x1bc>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035b0:	f7fe fa98 	bl	8001ae4 <HAL_GetTick>
 80035b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035b6:	e00a      	b.n	80035ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035b8:	f7fe fa94 	bl	8001ae4 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e04f      	b.n	800366e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ce:	4b2b      	ldr	r3, [pc, #172]	@ (800367c <HAL_RCC_ClockConfig+0x1bc>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f003 020c 	and.w	r2, r3, #12
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	429a      	cmp	r2, r3
 80035de:	d1eb      	bne.n	80035b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035e0:	4b25      	ldr	r3, [pc, #148]	@ (8003678 <HAL_RCC_ClockConfig+0x1b8>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 030f 	and.w	r3, r3, #15
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d20c      	bcs.n	8003608 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ee:	4b22      	ldr	r3, [pc, #136]	@ (8003678 <HAL_RCC_ClockConfig+0x1b8>)
 80035f0:	683a      	ldr	r2, [r7, #0]
 80035f2:	b2d2      	uxtb	r2, r2
 80035f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035f6:	4b20      	ldr	r3, [pc, #128]	@ (8003678 <HAL_RCC_ClockConfig+0x1b8>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 030f 	and.w	r3, r3, #15
 80035fe:	683a      	ldr	r2, [r7, #0]
 8003600:	429a      	cmp	r2, r3
 8003602:	d001      	beq.n	8003608 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e032      	b.n	800366e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0304 	and.w	r3, r3, #4
 8003610:	2b00      	cmp	r3, #0
 8003612:	d008      	beq.n	8003626 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003614:	4b19      	ldr	r3, [pc, #100]	@ (800367c <HAL_RCC_ClockConfig+0x1bc>)
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	4916      	ldr	r1, [pc, #88]	@ (800367c <HAL_RCC_ClockConfig+0x1bc>)
 8003622:	4313      	orrs	r3, r2
 8003624:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0308 	and.w	r3, r3, #8
 800362e:	2b00      	cmp	r3, #0
 8003630:	d009      	beq.n	8003646 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003632:	4b12      	ldr	r3, [pc, #72]	@ (800367c <HAL_RCC_ClockConfig+0x1bc>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	490e      	ldr	r1, [pc, #56]	@ (800367c <HAL_RCC_ClockConfig+0x1bc>)
 8003642:	4313      	orrs	r3, r2
 8003644:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003646:	f000 f855 	bl	80036f4 <HAL_RCC_GetSysClockFreq>
 800364a:	4602      	mov	r2, r0
 800364c:	4b0b      	ldr	r3, [pc, #44]	@ (800367c <HAL_RCC_ClockConfig+0x1bc>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	091b      	lsrs	r3, r3, #4
 8003652:	f003 030f 	and.w	r3, r3, #15
 8003656:	490a      	ldr	r1, [pc, #40]	@ (8003680 <HAL_RCC_ClockConfig+0x1c0>)
 8003658:	5ccb      	ldrb	r3, [r1, r3]
 800365a:	fa22 f303 	lsr.w	r3, r2, r3
 800365e:	4a09      	ldr	r2, [pc, #36]	@ (8003684 <HAL_RCC_ClockConfig+0x1c4>)
 8003660:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003662:	4b09      	ldr	r3, [pc, #36]	@ (8003688 <HAL_RCC_ClockConfig+0x1c8>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4618      	mov	r0, r3
 8003668:	f7fe f9f8 	bl	8001a5c <HAL_InitTick>

  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	40023c00 	.word	0x40023c00
 800367c:	40023800 	.word	0x40023800
 8003680:	0800510c 	.word	0x0800510c
 8003684:	20000000 	.word	0x20000000
 8003688:	20000004 	.word	0x20000004

0800368c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003690:	4b03      	ldr	r3, [pc, #12]	@ (80036a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003692:	681b      	ldr	r3, [r3, #0]
}
 8003694:	4618      	mov	r0, r3
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	20000000 	.word	0x20000000

080036a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036a8:	f7ff fff0 	bl	800368c <HAL_RCC_GetHCLKFreq>
 80036ac:	4602      	mov	r2, r0
 80036ae:	4b05      	ldr	r3, [pc, #20]	@ (80036c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	0a9b      	lsrs	r3, r3, #10
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	4903      	ldr	r1, [pc, #12]	@ (80036c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036ba:	5ccb      	ldrb	r3, [r1, r3]
 80036bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40023800 	.word	0x40023800
 80036c8:	0800511c 	.word	0x0800511c

080036cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036d0:	f7ff ffdc 	bl	800368c <HAL_RCC_GetHCLKFreq>
 80036d4:	4602      	mov	r2, r0
 80036d6:	4b05      	ldr	r3, [pc, #20]	@ (80036ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	0b5b      	lsrs	r3, r3, #13
 80036dc:	f003 0307 	and.w	r3, r3, #7
 80036e0:	4903      	ldr	r1, [pc, #12]	@ (80036f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036e2:	5ccb      	ldrb	r3, [r1, r3]
 80036e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	40023800 	.word	0x40023800
 80036f0:	0800511c 	.word	0x0800511c

080036f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036f8:	b0ae      	sub	sp, #184	@ 0xb8
 80036fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80036fc:	2300      	movs	r3, #0
 80036fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003702:	2300      	movs	r3, #0
 8003704:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003708:	2300      	movs	r3, #0
 800370a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800370e:	2300      	movs	r3, #0
 8003710:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003714:	2300      	movs	r3, #0
 8003716:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800371a:	4bcb      	ldr	r3, [pc, #812]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x354>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f003 030c 	and.w	r3, r3, #12
 8003722:	2b0c      	cmp	r3, #12
 8003724:	f200 8206 	bhi.w	8003b34 <HAL_RCC_GetSysClockFreq+0x440>
 8003728:	a201      	add	r2, pc, #4	@ (adr r2, 8003730 <HAL_RCC_GetSysClockFreq+0x3c>)
 800372a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800372e:	bf00      	nop
 8003730:	08003765 	.word	0x08003765
 8003734:	08003b35 	.word	0x08003b35
 8003738:	08003b35 	.word	0x08003b35
 800373c:	08003b35 	.word	0x08003b35
 8003740:	0800376d 	.word	0x0800376d
 8003744:	08003b35 	.word	0x08003b35
 8003748:	08003b35 	.word	0x08003b35
 800374c:	08003b35 	.word	0x08003b35
 8003750:	08003775 	.word	0x08003775
 8003754:	08003b35 	.word	0x08003b35
 8003758:	08003b35 	.word	0x08003b35
 800375c:	08003b35 	.word	0x08003b35
 8003760:	08003965 	.word	0x08003965
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003764:	4bb9      	ldr	r3, [pc, #740]	@ (8003a4c <HAL_RCC_GetSysClockFreq+0x358>)
 8003766:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800376a:	e1e7      	b.n	8003b3c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800376c:	4bb8      	ldr	r3, [pc, #736]	@ (8003a50 <HAL_RCC_GetSysClockFreq+0x35c>)
 800376e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003772:	e1e3      	b.n	8003b3c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003774:	4bb4      	ldr	r3, [pc, #720]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x354>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800377c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003780:	4bb1      	ldr	r3, [pc, #708]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x354>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d071      	beq.n	8003870 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800378c:	4bae      	ldr	r3, [pc, #696]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x354>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	099b      	lsrs	r3, r3, #6
 8003792:	2200      	movs	r2, #0
 8003794:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003798:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800379c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80037a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80037a8:	2300      	movs	r3, #0
 80037aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80037ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80037b2:	4622      	mov	r2, r4
 80037b4:	462b      	mov	r3, r5
 80037b6:	f04f 0000 	mov.w	r0, #0
 80037ba:	f04f 0100 	mov.w	r1, #0
 80037be:	0159      	lsls	r1, r3, #5
 80037c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037c4:	0150      	lsls	r0, r2, #5
 80037c6:	4602      	mov	r2, r0
 80037c8:	460b      	mov	r3, r1
 80037ca:	4621      	mov	r1, r4
 80037cc:	1a51      	subs	r1, r2, r1
 80037ce:	6439      	str	r1, [r7, #64]	@ 0x40
 80037d0:	4629      	mov	r1, r5
 80037d2:	eb63 0301 	sbc.w	r3, r3, r1
 80037d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80037d8:	f04f 0200 	mov.w	r2, #0
 80037dc:	f04f 0300 	mov.w	r3, #0
 80037e0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80037e4:	4649      	mov	r1, r9
 80037e6:	018b      	lsls	r3, r1, #6
 80037e8:	4641      	mov	r1, r8
 80037ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037ee:	4641      	mov	r1, r8
 80037f0:	018a      	lsls	r2, r1, #6
 80037f2:	4641      	mov	r1, r8
 80037f4:	1a51      	subs	r1, r2, r1
 80037f6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80037f8:	4649      	mov	r1, r9
 80037fa:	eb63 0301 	sbc.w	r3, r3, r1
 80037fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003800:	f04f 0200 	mov.w	r2, #0
 8003804:	f04f 0300 	mov.w	r3, #0
 8003808:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800380c:	4649      	mov	r1, r9
 800380e:	00cb      	lsls	r3, r1, #3
 8003810:	4641      	mov	r1, r8
 8003812:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003816:	4641      	mov	r1, r8
 8003818:	00ca      	lsls	r2, r1, #3
 800381a:	4610      	mov	r0, r2
 800381c:	4619      	mov	r1, r3
 800381e:	4603      	mov	r3, r0
 8003820:	4622      	mov	r2, r4
 8003822:	189b      	adds	r3, r3, r2
 8003824:	633b      	str	r3, [r7, #48]	@ 0x30
 8003826:	462b      	mov	r3, r5
 8003828:	460a      	mov	r2, r1
 800382a:	eb42 0303 	adc.w	r3, r2, r3
 800382e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003830:	f04f 0200 	mov.w	r2, #0
 8003834:	f04f 0300 	mov.w	r3, #0
 8003838:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800383c:	4629      	mov	r1, r5
 800383e:	024b      	lsls	r3, r1, #9
 8003840:	4621      	mov	r1, r4
 8003842:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003846:	4621      	mov	r1, r4
 8003848:	024a      	lsls	r2, r1, #9
 800384a:	4610      	mov	r0, r2
 800384c:	4619      	mov	r1, r3
 800384e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003852:	2200      	movs	r2, #0
 8003854:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003858:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800385c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003860:	f7fd f8c0 	bl	80009e4 <__aeabi_uldivmod>
 8003864:	4602      	mov	r2, r0
 8003866:	460b      	mov	r3, r1
 8003868:	4613      	mov	r3, r2
 800386a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800386e:	e067      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003870:	4b75      	ldr	r3, [pc, #468]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x354>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	099b      	lsrs	r3, r3, #6
 8003876:	2200      	movs	r2, #0
 8003878:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800387c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003880:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003888:	67bb      	str	r3, [r7, #120]	@ 0x78
 800388a:	2300      	movs	r3, #0
 800388c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800388e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003892:	4622      	mov	r2, r4
 8003894:	462b      	mov	r3, r5
 8003896:	f04f 0000 	mov.w	r0, #0
 800389a:	f04f 0100 	mov.w	r1, #0
 800389e:	0159      	lsls	r1, r3, #5
 80038a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038a4:	0150      	lsls	r0, r2, #5
 80038a6:	4602      	mov	r2, r0
 80038a8:	460b      	mov	r3, r1
 80038aa:	4621      	mov	r1, r4
 80038ac:	1a51      	subs	r1, r2, r1
 80038ae:	62b9      	str	r1, [r7, #40]	@ 0x28
 80038b0:	4629      	mov	r1, r5
 80038b2:	eb63 0301 	sbc.w	r3, r3, r1
 80038b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038b8:	f04f 0200 	mov.w	r2, #0
 80038bc:	f04f 0300 	mov.w	r3, #0
 80038c0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80038c4:	4649      	mov	r1, r9
 80038c6:	018b      	lsls	r3, r1, #6
 80038c8:	4641      	mov	r1, r8
 80038ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038ce:	4641      	mov	r1, r8
 80038d0:	018a      	lsls	r2, r1, #6
 80038d2:	4641      	mov	r1, r8
 80038d4:	ebb2 0a01 	subs.w	sl, r2, r1
 80038d8:	4649      	mov	r1, r9
 80038da:	eb63 0b01 	sbc.w	fp, r3, r1
 80038de:	f04f 0200 	mov.w	r2, #0
 80038e2:	f04f 0300 	mov.w	r3, #0
 80038e6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80038ea:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80038ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038f2:	4692      	mov	sl, r2
 80038f4:	469b      	mov	fp, r3
 80038f6:	4623      	mov	r3, r4
 80038f8:	eb1a 0303 	adds.w	r3, sl, r3
 80038fc:	623b      	str	r3, [r7, #32]
 80038fe:	462b      	mov	r3, r5
 8003900:	eb4b 0303 	adc.w	r3, fp, r3
 8003904:	627b      	str	r3, [r7, #36]	@ 0x24
 8003906:	f04f 0200 	mov.w	r2, #0
 800390a:	f04f 0300 	mov.w	r3, #0
 800390e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003912:	4629      	mov	r1, r5
 8003914:	028b      	lsls	r3, r1, #10
 8003916:	4621      	mov	r1, r4
 8003918:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800391c:	4621      	mov	r1, r4
 800391e:	028a      	lsls	r2, r1, #10
 8003920:	4610      	mov	r0, r2
 8003922:	4619      	mov	r1, r3
 8003924:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003928:	2200      	movs	r2, #0
 800392a:	673b      	str	r3, [r7, #112]	@ 0x70
 800392c:	677a      	str	r2, [r7, #116]	@ 0x74
 800392e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003932:	f7fd f857 	bl	80009e4 <__aeabi_uldivmod>
 8003936:	4602      	mov	r2, r0
 8003938:	460b      	mov	r3, r1
 800393a:	4613      	mov	r3, r2
 800393c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003940:	4b41      	ldr	r3, [pc, #260]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x354>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	0c1b      	lsrs	r3, r3, #16
 8003946:	f003 0303 	and.w	r3, r3, #3
 800394a:	3301      	adds	r3, #1
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8003952:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003956:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800395a:	fbb2 f3f3 	udiv	r3, r2, r3
 800395e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003962:	e0eb      	b.n	8003b3c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003964:	4b38      	ldr	r3, [pc, #224]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x354>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800396c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003970:	4b35      	ldr	r3, [pc, #212]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x354>)
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d06b      	beq.n	8003a54 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800397c:	4b32      	ldr	r3, [pc, #200]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x354>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	099b      	lsrs	r3, r3, #6
 8003982:	2200      	movs	r2, #0
 8003984:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003986:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003988:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800398a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800398e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003990:	2300      	movs	r3, #0
 8003992:	667b      	str	r3, [r7, #100]	@ 0x64
 8003994:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003998:	4622      	mov	r2, r4
 800399a:	462b      	mov	r3, r5
 800399c:	f04f 0000 	mov.w	r0, #0
 80039a0:	f04f 0100 	mov.w	r1, #0
 80039a4:	0159      	lsls	r1, r3, #5
 80039a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039aa:	0150      	lsls	r0, r2, #5
 80039ac:	4602      	mov	r2, r0
 80039ae:	460b      	mov	r3, r1
 80039b0:	4621      	mov	r1, r4
 80039b2:	1a51      	subs	r1, r2, r1
 80039b4:	61b9      	str	r1, [r7, #24]
 80039b6:	4629      	mov	r1, r5
 80039b8:	eb63 0301 	sbc.w	r3, r3, r1
 80039bc:	61fb      	str	r3, [r7, #28]
 80039be:	f04f 0200 	mov.w	r2, #0
 80039c2:	f04f 0300 	mov.w	r3, #0
 80039c6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80039ca:	4659      	mov	r1, fp
 80039cc:	018b      	lsls	r3, r1, #6
 80039ce:	4651      	mov	r1, sl
 80039d0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039d4:	4651      	mov	r1, sl
 80039d6:	018a      	lsls	r2, r1, #6
 80039d8:	4651      	mov	r1, sl
 80039da:	ebb2 0801 	subs.w	r8, r2, r1
 80039de:	4659      	mov	r1, fp
 80039e0:	eb63 0901 	sbc.w	r9, r3, r1
 80039e4:	f04f 0200 	mov.w	r2, #0
 80039e8:	f04f 0300 	mov.w	r3, #0
 80039ec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039f0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039f4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039f8:	4690      	mov	r8, r2
 80039fa:	4699      	mov	r9, r3
 80039fc:	4623      	mov	r3, r4
 80039fe:	eb18 0303 	adds.w	r3, r8, r3
 8003a02:	613b      	str	r3, [r7, #16]
 8003a04:	462b      	mov	r3, r5
 8003a06:	eb49 0303 	adc.w	r3, r9, r3
 8003a0a:	617b      	str	r3, [r7, #20]
 8003a0c:	f04f 0200 	mov.w	r2, #0
 8003a10:	f04f 0300 	mov.w	r3, #0
 8003a14:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003a18:	4629      	mov	r1, r5
 8003a1a:	024b      	lsls	r3, r1, #9
 8003a1c:	4621      	mov	r1, r4
 8003a1e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a22:	4621      	mov	r1, r4
 8003a24:	024a      	lsls	r2, r1, #9
 8003a26:	4610      	mov	r0, r2
 8003a28:	4619      	mov	r1, r3
 8003a2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003a2e:	2200      	movs	r2, #0
 8003a30:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a32:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003a34:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003a38:	f7fc ffd4 	bl	80009e4 <__aeabi_uldivmod>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	460b      	mov	r3, r1
 8003a40:	4613      	mov	r3, r2
 8003a42:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a46:	e065      	b.n	8003b14 <HAL_RCC_GetSysClockFreq+0x420>
 8003a48:	40023800 	.word	0x40023800
 8003a4c:	00f42400 	.word	0x00f42400
 8003a50:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a54:	4b3d      	ldr	r3, [pc, #244]	@ (8003b4c <HAL_RCC_GetSysClockFreq+0x458>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	099b      	lsrs	r3, r3, #6
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	4611      	mov	r1, r2
 8003a60:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a64:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a66:	2300      	movs	r3, #0
 8003a68:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a6a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003a6e:	4642      	mov	r2, r8
 8003a70:	464b      	mov	r3, r9
 8003a72:	f04f 0000 	mov.w	r0, #0
 8003a76:	f04f 0100 	mov.w	r1, #0
 8003a7a:	0159      	lsls	r1, r3, #5
 8003a7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a80:	0150      	lsls	r0, r2, #5
 8003a82:	4602      	mov	r2, r0
 8003a84:	460b      	mov	r3, r1
 8003a86:	4641      	mov	r1, r8
 8003a88:	1a51      	subs	r1, r2, r1
 8003a8a:	60b9      	str	r1, [r7, #8]
 8003a8c:	4649      	mov	r1, r9
 8003a8e:	eb63 0301 	sbc.w	r3, r3, r1
 8003a92:	60fb      	str	r3, [r7, #12]
 8003a94:	f04f 0200 	mov.w	r2, #0
 8003a98:	f04f 0300 	mov.w	r3, #0
 8003a9c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003aa0:	4659      	mov	r1, fp
 8003aa2:	018b      	lsls	r3, r1, #6
 8003aa4:	4651      	mov	r1, sl
 8003aa6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003aaa:	4651      	mov	r1, sl
 8003aac:	018a      	lsls	r2, r1, #6
 8003aae:	4651      	mov	r1, sl
 8003ab0:	1a54      	subs	r4, r2, r1
 8003ab2:	4659      	mov	r1, fp
 8003ab4:	eb63 0501 	sbc.w	r5, r3, r1
 8003ab8:	f04f 0200 	mov.w	r2, #0
 8003abc:	f04f 0300 	mov.w	r3, #0
 8003ac0:	00eb      	lsls	r3, r5, #3
 8003ac2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ac6:	00e2      	lsls	r2, r4, #3
 8003ac8:	4614      	mov	r4, r2
 8003aca:	461d      	mov	r5, r3
 8003acc:	4643      	mov	r3, r8
 8003ace:	18e3      	adds	r3, r4, r3
 8003ad0:	603b      	str	r3, [r7, #0]
 8003ad2:	464b      	mov	r3, r9
 8003ad4:	eb45 0303 	adc.w	r3, r5, r3
 8003ad8:	607b      	str	r3, [r7, #4]
 8003ada:	f04f 0200 	mov.w	r2, #0
 8003ade:	f04f 0300 	mov.w	r3, #0
 8003ae2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ae6:	4629      	mov	r1, r5
 8003ae8:	028b      	lsls	r3, r1, #10
 8003aea:	4621      	mov	r1, r4
 8003aec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003af0:	4621      	mov	r1, r4
 8003af2:	028a      	lsls	r2, r1, #10
 8003af4:	4610      	mov	r0, r2
 8003af6:	4619      	mov	r1, r3
 8003af8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003afc:	2200      	movs	r2, #0
 8003afe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b00:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003b02:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003b06:	f7fc ff6d 	bl	80009e4 <__aeabi_uldivmod>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	4613      	mov	r3, r2
 8003b10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003b14:	4b0d      	ldr	r3, [pc, #52]	@ (8003b4c <HAL_RCC_GetSysClockFreq+0x458>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	0f1b      	lsrs	r3, r3, #28
 8003b1a:	f003 0307 	and.w	r3, r3, #7
 8003b1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8003b22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003b26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003b32:	e003      	b.n	8003b3c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b34:	4b06      	ldr	r3, [pc, #24]	@ (8003b50 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003b36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003b3a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b3c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	37b8      	adds	r7, #184	@ 0xb8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b4a:	bf00      	nop
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	00f42400 	.word	0x00f42400

08003b54 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e28d      	b.n	8004082 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f000 8083 	beq.w	8003c7a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003b74:	4b94      	ldr	r3, [pc, #592]	@ (8003dc8 <HAL_RCC_OscConfig+0x274>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f003 030c 	and.w	r3, r3, #12
 8003b7c:	2b04      	cmp	r3, #4
 8003b7e:	d019      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003b80:	4b91      	ldr	r3, [pc, #580]	@ (8003dc8 <HAL_RCC_OscConfig+0x274>)
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003b88:	2b08      	cmp	r3, #8
 8003b8a:	d106      	bne.n	8003b9a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003b8c:	4b8e      	ldr	r3, [pc, #568]	@ (8003dc8 <HAL_RCC_OscConfig+0x274>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b98:	d00c      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b9a:	4b8b      	ldr	r3, [pc, #556]	@ (8003dc8 <HAL_RCC_OscConfig+0x274>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003ba2:	2b0c      	cmp	r3, #12
 8003ba4:	d112      	bne.n	8003bcc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ba6:	4b88      	ldr	r3, [pc, #544]	@ (8003dc8 <HAL_RCC_OscConfig+0x274>)
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bb2:	d10b      	bne.n	8003bcc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bb4:	4b84      	ldr	r3, [pc, #528]	@ (8003dc8 <HAL_RCC_OscConfig+0x274>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d05b      	beq.n	8003c78 <HAL_RCC_OscConfig+0x124>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d157      	bne.n	8003c78 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e25a      	b.n	8004082 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bd4:	d106      	bne.n	8003be4 <HAL_RCC_OscConfig+0x90>
 8003bd6:	4b7c      	ldr	r3, [pc, #496]	@ (8003dc8 <HAL_RCC_OscConfig+0x274>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a7b      	ldr	r2, [pc, #492]	@ (8003dc8 <HAL_RCC_OscConfig+0x274>)
 8003bdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003be0:	6013      	str	r3, [r2, #0]
 8003be2:	e01d      	b.n	8003c20 <HAL_RCC_OscConfig+0xcc>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003bec:	d10c      	bne.n	8003c08 <HAL_RCC_OscConfig+0xb4>
 8003bee:	4b76      	ldr	r3, [pc, #472]	@ (8003dc8 <HAL_RCC_OscConfig+0x274>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a75      	ldr	r2, [pc, #468]	@ (8003dc8 <HAL_RCC_OscConfig+0x274>)
 8003bf4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003bf8:	6013      	str	r3, [r2, #0]
 8003bfa:	4b73      	ldr	r3, [pc, #460]	@ (8003dc8 <HAL_RCC_OscConfig+0x274>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a72      	ldr	r2, [pc, #456]	@ (8003dc8 <HAL_RCC_OscConfig+0x274>)
 8003c00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	e00b      	b.n	8003c20 <HAL_RCC_OscConfig+0xcc>
 8003c08:	4b6f      	ldr	r3, [pc, #444]	@ (8003dc8 <HAL_RCC_OscConfig+0x274>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a6e      	ldr	r2, [pc, #440]	@ (8003dc8 <HAL_RCC_OscConfig+0x274>)
 8003c0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c12:	6013      	str	r3, [r2, #0]
 8003c14:	4b6c      	ldr	r3, [pc, #432]	@ (8003dc8 <HAL_RCC_OscConfig+0x274>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a6b      	ldr	r2, [pc, #428]	@ (8003dc8 <HAL_RCC_OscConfig+0x274>)
 8003c1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d013      	beq.n	8003c50 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c28:	f7fd ff5c 	bl	8001ae4 <HAL_GetTick>
 8003c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c2e:	e008      	b.n	8003c42 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c30:	f7fd ff58 	bl	8001ae4 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b64      	cmp	r3, #100	@ 0x64
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e21f      	b.n	8004082 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c42:	4b61      	ldr	r3, [pc, #388]	@ (8003dc8 <HAL_RCC_OscConfig+0x274>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d0f0      	beq.n	8003c30 <HAL_RCC_OscConfig+0xdc>
 8003c4e:	e014      	b.n	8003c7a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c50:	f7fd ff48 	bl	8001ae4 <HAL_GetTick>
 8003c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c58:	f7fd ff44 	bl	8001ae4 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b64      	cmp	r3, #100	@ 0x64
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e20b      	b.n	8004082 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c6a:	4b57      	ldr	r3, [pc, #348]	@ (8003dc8 <HAL_RCC_OscConfig+0x274>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1f0      	bne.n	8003c58 <HAL_RCC_OscConfig+0x104>
 8003c76:	e000      	b.n	8003c7a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d06f      	beq.n	8003d66 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003c86:	4b50      	ldr	r3, [pc, #320]	@ (8003dc8 <HAL_RCC_OscConfig+0x274>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f003 030c 	and.w	r3, r3, #12
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d017      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003c92:	4b4d      	ldr	r3, [pc, #308]	@ (8003dc8 <HAL_RCC_OscConfig+0x274>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003c9a:	2b08      	cmp	r3, #8
 8003c9c:	d105      	bne.n	8003caa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003c9e:	4b4a      	ldr	r3, [pc, #296]	@ (8003dc8 <HAL_RCC_OscConfig+0x274>)
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00b      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003caa:	4b47      	ldr	r3, [pc, #284]	@ (8003dc8 <HAL_RCC_OscConfig+0x274>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003cb2:	2b0c      	cmp	r3, #12
 8003cb4:	d11c      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cb6:	4b44      	ldr	r3, [pc, #272]	@ (8003dc8 <HAL_RCC_OscConfig+0x274>)
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d116      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cc2:	4b41      	ldr	r3, [pc, #260]	@ (8003dc8 <HAL_RCC_OscConfig+0x274>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d005      	beq.n	8003cda <HAL_RCC_OscConfig+0x186>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d001      	beq.n	8003cda <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e1d3      	b.n	8004082 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cda:	4b3b      	ldr	r3, [pc, #236]	@ (8003dc8 <HAL_RCC_OscConfig+0x274>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	00db      	lsls	r3, r3, #3
 8003ce8:	4937      	ldr	r1, [pc, #220]	@ (8003dc8 <HAL_RCC_OscConfig+0x274>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cee:	e03a      	b.n	8003d66 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d020      	beq.n	8003d3a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cf8:	4b34      	ldr	r3, [pc, #208]	@ (8003dcc <HAL_RCC_OscConfig+0x278>)
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cfe:	f7fd fef1 	bl	8001ae4 <HAL_GetTick>
 8003d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d04:	e008      	b.n	8003d18 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d06:	f7fd feed 	bl	8001ae4 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d901      	bls.n	8003d18 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e1b4      	b.n	8004082 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d18:	4b2b      	ldr	r3, [pc, #172]	@ (8003dc8 <HAL_RCC_OscConfig+0x274>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d0f0      	beq.n	8003d06 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d24:	4b28      	ldr	r3, [pc, #160]	@ (8003dc8 <HAL_RCC_OscConfig+0x274>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	00db      	lsls	r3, r3, #3
 8003d32:	4925      	ldr	r1, [pc, #148]	@ (8003dc8 <HAL_RCC_OscConfig+0x274>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	600b      	str	r3, [r1, #0]
 8003d38:	e015      	b.n	8003d66 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d3a:	4b24      	ldr	r3, [pc, #144]	@ (8003dcc <HAL_RCC_OscConfig+0x278>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d40:	f7fd fed0 	bl	8001ae4 <HAL_GetTick>
 8003d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d46:	e008      	b.n	8003d5a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d48:	f7fd fecc 	bl	8001ae4 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e193      	b.n	8004082 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d5a:	4b1b      	ldr	r3, [pc, #108]	@ (8003dc8 <HAL_RCC_OscConfig+0x274>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1f0      	bne.n	8003d48 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0308 	and.w	r3, r3, #8
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d036      	beq.n	8003de0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d016      	beq.n	8003da8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d7a:	4b15      	ldr	r3, [pc, #84]	@ (8003dd0 <HAL_RCC_OscConfig+0x27c>)
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d80:	f7fd feb0 	bl	8001ae4 <HAL_GetTick>
 8003d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d86:	e008      	b.n	8003d9a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d88:	f7fd feac 	bl	8001ae4 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e173      	b.n	8004082 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8003dc8 <HAL_RCC_OscConfig+0x274>)
 8003d9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d0f0      	beq.n	8003d88 <HAL_RCC_OscConfig+0x234>
 8003da6:	e01b      	b.n	8003de0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003da8:	4b09      	ldr	r3, [pc, #36]	@ (8003dd0 <HAL_RCC_OscConfig+0x27c>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dae:	f7fd fe99 	bl	8001ae4 <HAL_GetTick>
 8003db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003db4:	e00e      	b.n	8003dd4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003db6:	f7fd fe95 	bl	8001ae4 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d907      	bls.n	8003dd4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e15c      	b.n	8004082 <HAL_RCC_OscConfig+0x52e>
 8003dc8:	40023800 	.word	0x40023800
 8003dcc:	42470000 	.word	0x42470000
 8003dd0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dd4:	4b8a      	ldr	r3, [pc, #552]	@ (8004000 <HAL_RCC_OscConfig+0x4ac>)
 8003dd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1ea      	bne.n	8003db6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 8097 	beq.w	8003f1c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dee:	2300      	movs	r3, #0
 8003df0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003df2:	4b83      	ldr	r3, [pc, #524]	@ (8004000 <HAL_RCC_OscConfig+0x4ac>)
 8003df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10f      	bne.n	8003e1e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dfe:	2300      	movs	r3, #0
 8003e00:	60bb      	str	r3, [r7, #8]
 8003e02:	4b7f      	ldr	r3, [pc, #508]	@ (8004000 <HAL_RCC_OscConfig+0x4ac>)
 8003e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e06:	4a7e      	ldr	r2, [pc, #504]	@ (8004000 <HAL_RCC_OscConfig+0x4ac>)
 8003e08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e0e:	4b7c      	ldr	r3, [pc, #496]	@ (8004000 <HAL_RCC_OscConfig+0x4ac>)
 8003e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e16:	60bb      	str	r3, [r7, #8]
 8003e18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e1e:	4b79      	ldr	r3, [pc, #484]	@ (8004004 <HAL_RCC_OscConfig+0x4b0>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d118      	bne.n	8003e5c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e2a:	4b76      	ldr	r3, [pc, #472]	@ (8004004 <HAL_RCC_OscConfig+0x4b0>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a75      	ldr	r2, [pc, #468]	@ (8004004 <HAL_RCC_OscConfig+0x4b0>)
 8003e30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e36:	f7fd fe55 	bl	8001ae4 <HAL_GetTick>
 8003e3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e3c:	e008      	b.n	8003e50 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e3e:	f7fd fe51 	bl	8001ae4 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d901      	bls.n	8003e50 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e118      	b.n	8004082 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e50:	4b6c      	ldr	r3, [pc, #432]	@ (8004004 <HAL_RCC_OscConfig+0x4b0>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d0f0      	beq.n	8003e3e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d106      	bne.n	8003e72 <HAL_RCC_OscConfig+0x31e>
 8003e64:	4b66      	ldr	r3, [pc, #408]	@ (8004000 <HAL_RCC_OscConfig+0x4ac>)
 8003e66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e68:	4a65      	ldr	r2, [pc, #404]	@ (8004000 <HAL_RCC_OscConfig+0x4ac>)
 8003e6a:	f043 0301 	orr.w	r3, r3, #1
 8003e6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e70:	e01c      	b.n	8003eac <HAL_RCC_OscConfig+0x358>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	2b05      	cmp	r3, #5
 8003e78:	d10c      	bne.n	8003e94 <HAL_RCC_OscConfig+0x340>
 8003e7a:	4b61      	ldr	r3, [pc, #388]	@ (8004000 <HAL_RCC_OscConfig+0x4ac>)
 8003e7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e7e:	4a60      	ldr	r2, [pc, #384]	@ (8004000 <HAL_RCC_OscConfig+0x4ac>)
 8003e80:	f043 0304 	orr.w	r3, r3, #4
 8003e84:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e86:	4b5e      	ldr	r3, [pc, #376]	@ (8004000 <HAL_RCC_OscConfig+0x4ac>)
 8003e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e8a:	4a5d      	ldr	r2, [pc, #372]	@ (8004000 <HAL_RCC_OscConfig+0x4ac>)
 8003e8c:	f043 0301 	orr.w	r3, r3, #1
 8003e90:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e92:	e00b      	b.n	8003eac <HAL_RCC_OscConfig+0x358>
 8003e94:	4b5a      	ldr	r3, [pc, #360]	@ (8004000 <HAL_RCC_OscConfig+0x4ac>)
 8003e96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e98:	4a59      	ldr	r2, [pc, #356]	@ (8004000 <HAL_RCC_OscConfig+0x4ac>)
 8003e9a:	f023 0301 	bic.w	r3, r3, #1
 8003e9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ea0:	4b57      	ldr	r3, [pc, #348]	@ (8004000 <HAL_RCC_OscConfig+0x4ac>)
 8003ea2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea4:	4a56      	ldr	r2, [pc, #344]	@ (8004000 <HAL_RCC_OscConfig+0x4ac>)
 8003ea6:	f023 0304 	bic.w	r3, r3, #4
 8003eaa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d015      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb4:	f7fd fe16 	bl	8001ae4 <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eba:	e00a      	b.n	8003ed2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ebc:	f7fd fe12 	bl	8001ae4 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e0d7      	b.n	8004082 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ed2:	4b4b      	ldr	r3, [pc, #300]	@ (8004000 <HAL_RCC_OscConfig+0x4ac>)
 8003ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d0ee      	beq.n	8003ebc <HAL_RCC_OscConfig+0x368>
 8003ede:	e014      	b.n	8003f0a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee0:	f7fd fe00 	bl	8001ae4 <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ee6:	e00a      	b.n	8003efe <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ee8:	f7fd fdfc 	bl	8001ae4 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e0c1      	b.n	8004082 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003efe:	4b40      	ldr	r3, [pc, #256]	@ (8004000 <HAL_RCC_OscConfig+0x4ac>)
 8003f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1ee      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f0a:	7dfb      	ldrb	r3, [r7, #23]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d105      	bne.n	8003f1c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f10:	4b3b      	ldr	r3, [pc, #236]	@ (8004000 <HAL_RCC_OscConfig+0x4ac>)
 8003f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f14:	4a3a      	ldr	r2, [pc, #232]	@ (8004000 <HAL_RCC_OscConfig+0x4ac>)
 8003f16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f1a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f000 80ad 	beq.w	8004080 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f26:	4b36      	ldr	r3, [pc, #216]	@ (8004000 <HAL_RCC_OscConfig+0x4ac>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f003 030c 	and.w	r3, r3, #12
 8003f2e:	2b08      	cmp	r3, #8
 8003f30:	d060      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d145      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f3a:	4b33      	ldr	r3, [pc, #204]	@ (8004008 <HAL_RCC_OscConfig+0x4b4>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f40:	f7fd fdd0 	bl	8001ae4 <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f46:	e008      	b.n	8003f5a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f48:	f7fd fdcc 	bl	8001ae4 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e093      	b.n	8004082 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f5a:	4b29      	ldr	r3, [pc, #164]	@ (8004000 <HAL_RCC_OscConfig+0x4ac>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1f0      	bne.n	8003f48 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	69da      	ldr	r2, [r3, #28]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f74:	019b      	lsls	r3, r3, #6
 8003f76:	431a      	orrs	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f7c:	085b      	lsrs	r3, r3, #1
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	041b      	lsls	r3, r3, #16
 8003f82:	431a      	orrs	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f88:	061b      	lsls	r3, r3, #24
 8003f8a:	431a      	orrs	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f90:	071b      	lsls	r3, r3, #28
 8003f92:	491b      	ldr	r1, [pc, #108]	@ (8004000 <HAL_RCC_OscConfig+0x4ac>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f98:	4b1b      	ldr	r3, [pc, #108]	@ (8004008 <HAL_RCC_OscConfig+0x4b4>)
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f9e:	f7fd fda1 	bl	8001ae4 <HAL_GetTick>
 8003fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fa4:	e008      	b.n	8003fb8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fa6:	f7fd fd9d 	bl	8001ae4 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e064      	b.n	8004082 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fb8:	4b11      	ldr	r3, [pc, #68]	@ (8004000 <HAL_RCC_OscConfig+0x4ac>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d0f0      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x452>
 8003fc4:	e05c      	b.n	8004080 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fc6:	4b10      	ldr	r3, [pc, #64]	@ (8004008 <HAL_RCC_OscConfig+0x4b4>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fcc:	f7fd fd8a 	bl	8001ae4 <HAL_GetTick>
 8003fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fd2:	e008      	b.n	8003fe6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fd4:	f7fd fd86 	bl	8001ae4 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e04d      	b.n	8004082 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fe6:	4b06      	ldr	r3, [pc, #24]	@ (8004000 <HAL_RCC_OscConfig+0x4ac>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1f0      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x480>
 8003ff2:	e045      	b.n	8004080 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d107      	bne.n	800400c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e040      	b.n	8004082 <HAL_RCC_OscConfig+0x52e>
 8004000:	40023800 	.word	0x40023800
 8004004:	40007000 	.word	0x40007000
 8004008:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800400c:	4b1f      	ldr	r3, [pc, #124]	@ (800408c <HAL_RCC_OscConfig+0x538>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d030      	beq.n	800407c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004024:	429a      	cmp	r2, r3
 8004026:	d129      	bne.n	800407c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004032:	429a      	cmp	r2, r3
 8004034:	d122      	bne.n	800407c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800403c:	4013      	ands	r3, r2
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004042:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004044:	4293      	cmp	r3, r2
 8004046:	d119      	bne.n	800407c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004052:	085b      	lsrs	r3, r3, #1
 8004054:	3b01      	subs	r3, #1
 8004056:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004058:	429a      	cmp	r2, r3
 800405a:	d10f      	bne.n	800407c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004066:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004068:	429a      	cmp	r2, r3
 800406a:	d107      	bne.n	800407c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004076:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004078:	429a      	cmp	r2, r3
 800407a:	d001      	beq.n	8004080 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e000      	b.n	8004082 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3718      	adds	r7, #24
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	40023800 	.word	0x40023800

08004090 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d101      	bne.n	80040a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e042      	b.n	8004128 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d106      	bne.n	80040bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f7fd fb64 	bl	8001784 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2224      	movs	r2, #36	@ 0x24
 80040c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68da      	ldr	r2, [r3, #12]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 fd69 	bl	8004bac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	691a      	ldr	r2, [r3, #16]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80040e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	695a      	ldr	r2, [r3, #20]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80040f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68da      	ldr	r2, [r3, #12]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004108:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2220      	movs	r2, #32
 8004114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2220      	movs	r2, #32
 800411c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3708      	adds	r7, #8
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b08a      	sub	sp, #40	@ 0x28
 8004134:	af02      	add	r7, sp, #8
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	603b      	str	r3, [r7, #0]
 800413c:	4613      	mov	r3, r2
 800413e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004140:	2300      	movs	r3, #0
 8004142:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800414a:	b2db      	uxtb	r3, r3
 800414c:	2b20      	cmp	r3, #32
 800414e:	d175      	bne.n	800423c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d002      	beq.n	800415c <HAL_UART_Transmit+0x2c>
 8004156:	88fb      	ldrh	r3, [r7, #6]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d101      	bne.n	8004160 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e06e      	b.n	800423e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2221      	movs	r2, #33	@ 0x21
 800416a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800416e:	f7fd fcb9 	bl	8001ae4 <HAL_GetTick>
 8004172:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	88fa      	ldrh	r2, [r7, #6]
 8004178:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	88fa      	ldrh	r2, [r7, #6]
 800417e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004188:	d108      	bne.n	800419c <HAL_UART_Transmit+0x6c>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d104      	bne.n	800419c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004192:	2300      	movs	r3, #0
 8004194:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	61bb      	str	r3, [r7, #24]
 800419a:	e003      	b.n	80041a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041a0:	2300      	movs	r3, #0
 80041a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80041a4:	e02e      	b.n	8004204 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	9300      	str	r3, [sp, #0]
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	2200      	movs	r2, #0
 80041ae:	2180      	movs	r1, #128	@ 0x80
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f000 fb05 	bl	80047c0 <UART_WaitOnFlagUntilTimeout>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d005      	beq.n	80041c8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2220      	movs	r2, #32
 80041c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e03a      	b.n	800423e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d10b      	bne.n	80041e6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	881b      	ldrh	r3, [r3, #0]
 80041d2:	461a      	mov	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	3302      	adds	r3, #2
 80041e2:	61bb      	str	r3, [r7, #24]
 80041e4:	e007      	b.n	80041f6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	781a      	ldrb	r2, [r3, #0]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	3301      	adds	r3, #1
 80041f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	3b01      	subs	r3, #1
 80041fe:	b29a      	uxth	r2, r3
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004208:	b29b      	uxth	r3, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1cb      	bne.n	80041a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	9300      	str	r3, [sp, #0]
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	2200      	movs	r2, #0
 8004216:	2140      	movs	r1, #64	@ 0x40
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f000 fad1 	bl	80047c0 <UART_WaitOnFlagUntilTimeout>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d005      	beq.n	8004230 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2220      	movs	r2, #32
 8004228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e006      	b.n	800423e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2220      	movs	r2, #32
 8004234:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004238:	2300      	movs	r3, #0
 800423a:	e000      	b.n	800423e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800423c:	2302      	movs	r3, #2
  }
}
 800423e:	4618      	mov	r0, r3
 8004240:	3720      	adds	r7, #32
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
	...

08004248 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b0ba      	sub	sp, #232	@ 0xe8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800426e:	2300      	movs	r3, #0
 8004270:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004274:	2300      	movs	r3, #0
 8004276:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800427a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800427e:	f003 030f 	and.w	r3, r3, #15
 8004282:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004286:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800428a:	2b00      	cmp	r3, #0
 800428c:	d10f      	bne.n	80042ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800428e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004292:	f003 0320 	and.w	r3, r3, #32
 8004296:	2b00      	cmp	r3, #0
 8004298:	d009      	beq.n	80042ae <HAL_UART_IRQHandler+0x66>
 800429a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800429e:	f003 0320 	and.w	r3, r3, #32
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d003      	beq.n	80042ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 fbc2 	bl	8004a30 <UART_Receive_IT>
      return;
 80042ac:	e25b      	b.n	8004766 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80042ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 80de 	beq.w	8004474 <HAL_UART_IRQHandler+0x22c>
 80042b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d106      	bne.n	80042d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80042c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042c8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f000 80d1 	beq.w	8004474 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80042d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00b      	beq.n	80042f6 <HAL_UART_IRQHandler+0xae>
 80042de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d005      	beq.n	80042f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ee:	f043 0201 	orr.w	r2, r3, #1
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042fa:	f003 0304 	and.w	r3, r3, #4
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00b      	beq.n	800431a <HAL_UART_IRQHandler+0xd2>
 8004302:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	2b00      	cmp	r3, #0
 800430c:	d005      	beq.n	800431a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004312:	f043 0202 	orr.w	r2, r3, #2
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800431a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00b      	beq.n	800433e <HAL_UART_IRQHandler+0xf6>
 8004326:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	2b00      	cmp	r3, #0
 8004330:	d005      	beq.n	800433e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004336:	f043 0204 	orr.w	r2, r3, #4
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800433e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004342:	f003 0308 	and.w	r3, r3, #8
 8004346:	2b00      	cmp	r3, #0
 8004348:	d011      	beq.n	800436e <HAL_UART_IRQHandler+0x126>
 800434a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800434e:	f003 0320 	and.w	r3, r3, #32
 8004352:	2b00      	cmp	r3, #0
 8004354:	d105      	bne.n	8004362 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004356:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b00      	cmp	r3, #0
 8004360:	d005      	beq.n	800436e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004366:	f043 0208 	orr.w	r2, r3, #8
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004372:	2b00      	cmp	r3, #0
 8004374:	f000 81f2 	beq.w	800475c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800437c:	f003 0320 	and.w	r3, r3, #32
 8004380:	2b00      	cmp	r3, #0
 8004382:	d008      	beq.n	8004396 <HAL_UART_IRQHandler+0x14e>
 8004384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004388:	f003 0320 	and.w	r3, r3, #32
 800438c:	2b00      	cmp	r3, #0
 800438e:	d002      	beq.n	8004396 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 fb4d 	bl	8004a30 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043a0:	2b40      	cmp	r3, #64	@ 0x40
 80043a2:	bf0c      	ite	eq
 80043a4:	2301      	moveq	r3, #1
 80043a6:	2300      	movne	r3, #0
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043b2:	f003 0308 	and.w	r3, r3, #8
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d103      	bne.n	80043c2 <HAL_UART_IRQHandler+0x17a>
 80043ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d04f      	beq.n	8004462 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 fa55 	bl	8004872 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043d2:	2b40      	cmp	r3, #64	@ 0x40
 80043d4:	d141      	bne.n	800445a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	3314      	adds	r3, #20
 80043dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80043e4:	e853 3f00 	ldrex	r3, [r3]
 80043e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80043ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80043f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	3314      	adds	r3, #20
 80043fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004402:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004406:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800440e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004412:	e841 2300 	strex	r3, r2, [r1]
 8004416:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800441a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1d9      	bne.n	80043d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004426:	2b00      	cmp	r3, #0
 8004428:	d013      	beq.n	8004452 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800442e:	4a7e      	ldr	r2, [pc, #504]	@ (8004628 <HAL_UART_IRQHandler+0x3e0>)
 8004430:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004436:	4618      	mov	r0, r3
 8004438:	f7fe fc1c 	bl	8002c74 <HAL_DMA_Abort_IT>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d016      	beq.n	8004470 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004446:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800444c:	4610      	mov	r0, r2
 800444e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004450:	e00e      	b.n	8004470 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 f99e 	bl	8004794 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004458:	e00a      	b.n	8004470 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 f99a 	bl	8004794 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004460:	e006      	b.n	8004470 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 f996 	bl	8004794 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800446e:	e175      	b.n	800475c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004470:	bf00      	nop
    return;
 8004472:	e173      	b.n	800475c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004478:	2b01      	cmp	r3, #1
 800447a:	f040 814f 	bne.w	800471c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800447e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004482:	f003 0310 	and.w	r3, r3, #16
 8004486:	2b00      	cmp	r3, #0
 8004488:	f000 8148 	beq.w	800471c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800448c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004490:	f003 0310 	and.w	r3, r3, #16
 8004494:	2b00      	cmp	r3, #0
 8004496:	f000 8141 	beq.w	800471c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800449a:	2300      	movs	r3, #0
 800449c:	60bb      	str	r3, [r7, #8]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	60bb      	str	r3, [r7, #8]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	60bb      	str	r3, [r7, #8]
 80044ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ba:	2b40      	cmp	r3, #64	@ 0x40
 80044bc:	f040 80b6 	bne.w	800462c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80044cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f000 8145 	beq.w	8004760 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80044da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80044de:	429a      	cmp	r2, r3
 80044e0:	f080 813e 	bcs.w	8004760 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80044ea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044f0:	69db      	ldr	r3, [r3, #28]
 80044f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044f6:	f000 8088 	beq.w	800460a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	330c      	adds	r3, #12
 8004500:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004504:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004508:	e853 3f00 	ldrex	r3, [r3]
 800450c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004510:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004514:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004518:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	330c      	adds	r3, #12
 8004522:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004526:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800452a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004532:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004536:	e841 2300 	strex	r3, r2, [r1]
 800453a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800453e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1d9      	bne.n	80044fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	3314      	adds	r3, #20
 800454c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004550:	e853 3f00 	ldrex	r3, [r3]
 8004554:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004556:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004558:	f023 0301 	bic.w	r3, r3, #1
 800455c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	3314      	adds	r3, #20
 8004566:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800456a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800456e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004570:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004572:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004576:	e841 2300 	strex	r3, r2, [r1]
 800457a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800457c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1e1      	bne.n	8004546 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	3314      	adds	r3, #20
 8004588:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800458c:	e853 3f00 	ldrex	r3, [r3]
 8004590:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004592:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004594:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004598:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	3314      	adds	r3, #20
 80045a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80045a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80045a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045aa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80045ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80045ae:	e841 2300 	strex	r3, r2, [r1]
 80045b2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80045b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1e3      	bne.n	8004582 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2220      	movs	r2, #32
 80045be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	330c      	adds	r3, #12
 80045ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045d2:	e853 3f00 	ldrex	r3, [r3]
 80045d6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80045d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045da:	f023 0310 	bic.w	r3, r3, #16
 80045de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	330c      	adds	r3, #12
 80045e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80045ec:	65ba      	str	r2, [r7, #88]	@ 0x58
 80045ee:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80045f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80045f4:	e841 2300 	strex	r3, r2, [r1]
 80045f8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80045fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d1e3      	bne.n	80045c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004604:	4618      	mov	r0, r3
 8004606:	f7fe fac5 	bl	8002b94 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2202      	movs	r2, #2
 800460e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004618:	b29b      	uxth	r3, r3
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	b29b      	uxth	r3, r3
 800461e:	4619      	mov	r1, r3
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 f8c1 	bl	80047a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004626:	e09b      	b.n	8004760 <HAL_UART_IRQHandler+0x518>
 8004628:	08004939 	.word	0x08004939
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004634:	b29b      	uxth	r3, r3
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004640:	b29b      	uxth	r3, r3
 8004642:	2b00      	cmp	r3, #0
 8004644:	f000 808e 	beq.w	8004764 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004648:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800464c:	2b00      	cmp	r3, #0
 800464e:	f000 8089 	beq.w	8004764 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	330c      	adds	r3, #12
 8004658:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800465c:	e853 3f00 	ldrex	r3, [r3]
 8004660:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004664:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004668:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	330c      	adds	r3, #12
 8004672:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004676:	647a      	str	r2, [r7, #68]	@ 0x44
 8004678:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800467c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800467e:	e841 2300 	strex	r3, r2, [r1]
 8004682:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004684:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1e3      	bne.n	8004652 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	3314      	adds	r3, #20
 8004690:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004694:	e853 3f00 	ldrex	r3, [r3]
 8004698:	623b      	str	r3, [r7, #32]
   return(result);
 800469a:	6a3b      	ldr	r3, [r7, #32]
 800469c:	f023 0301 	bic.w	r3, r3, #1
 80046a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	3314      	adds	r3, #20
 80046aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80046ae:	633a      	str	r2, [r7, #48]	@ 0x30
 80046b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046b6:	e841 2300 	strex	r3, r2, [r1]
 80046ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80046bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1e3      	bne.n	800468a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2220      	movs	r2, #32
 80046c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	330c      	adds	r3, #12
 80046d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	e853 3f00 	ldrex	r3, [r3]
 80046de:	60fb      	str	r3, [r7, #12]
   return(result);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f023 0310 	bic.w	r3, r3, #16
 80046e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	330c      	adds	r3, #12
 80046f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80046f4:	61fa      	str	r2, [r7, #28]
 80046f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f8:	69b9      	ldr	r1, [r7, #24]
 80046fa:	69fa      	ldr	r2, [r7, #28]
 80046fc:	e841 2300 	strex	r3, r2, [r1]
 8004700:	617b      	str	r3, [r7, #20]
   return(result);
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d1e3      	bne.n	80046d0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2202      	movs	r2, #2
 800470c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800470e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004712:	4619      	mov	r1, r3
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 f847 	bl	80047a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800471a:	e023      	b.n	8004764 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800471c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004720:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004724:	2b00      	cmp	r3, #0
 8004726:	d009      	beq.n	800473c <HAL_UART_IRQHandler+0x4f4>
 8004728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800472c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004730:	2b00      	cmp	r3, #0
 8004732:	d003      	beq.n	800473c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 f913 	bl	8004960 <UART_Transmit_IT>
    return;
 800473a:	e014      	b.n	8004766 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800473c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004740:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00e      	beq.n	8004766 <HAL_UART_IRQHandler+0x51e>
 8004748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800474c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004750:	2b00      	cmp	r3, #0
 8004752:	d008      	beq.n	8004766 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 f953 	bl	8004a00 <UART_EndTransmit_IT>
    return;
 800475a:	e004      	b.n	8004766 <HAL_UART_IRQHandler+0x51e>
    return;
 800475c:	bf00      	nop
 800475e:	e002      	b.n	8004766 <HAL_UART_IRQHandler+0x51e>
      return;
 8004760:	bf00      	nop
 8004762:	e000      	b.n	8004766 <HAL_UART_IRQHandler+0x51e>
      return;
 8004764:	bf00      	nop
  }
}
 8004766:	37e8      	adds	r7, #232	@ 0xe8
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004774:	bf00      	nop
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800479c:	bf00      	nop
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	460b      	mov	r3, r1
 80047b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b086      	sub	sp, #24
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	603b      	str	r3, [r7, #0]
 80047cc:	4613      	mov	r3, r2
 80047ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047d0:	e03b      	b.n	800484a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047d2:	6a3b      	ldr	r3, [r7, #32]
 80047d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d8:	d037      	beq.n	800484a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047da:	f7fd f983 	bl	8001ae4 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	6a3a      	ldr	r2, [r7, #32]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d302      	bcc.n	80047f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80047ea:	6a3b      	ldr	r3, [r7, #32]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d101      	bne.n	80047f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e03a      	b.n	800486a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	f003 0304 	and.w	r3, r3, #4
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d023      	beq.n	800484a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	2b80      	cmp	r3, #128	@ 0x80
 8004806:	d020      	beq.n	800484a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	2b40      	cmp	r3, #64	@ 0x40
 800480c:	d01d      	beq.n	800484a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0308 	and.w	r3, r3, #8
 8004818:	2b08      	cmp	r3, #8
 800481a:	d116      	bne.n	800484a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800481c:	2300      	movs	r3, #0
 800481e:	617b      	str	r3, [r7, #20]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	617b      	str	r3, [r7, #20]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	617b      	str	r3, [r7, #20]
 8004830:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f000 f81d 	bl	8004872 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2208      	movs	r2, #8
 800483c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e00f      	b.n	800486a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	4013      	ands	r3, r2
 8004854:	68ba      	ldr	r2, [r7, #8]
 8004856:	429a      	cmp	r2, r3
 8004858:	bf0c      	ite	eq
 800485a:	2301      	moveq	r3, #1
 800485c:	2300      	movne	r3, #0
 800485e:	b2db      	uxtb	r3, r3
 8004860:	461a      	mov	r2, r3
 8004862:	79fb      	ldrb	r3, [r7, #7]
 8004864:	429a      	cmp	r2, r3
 8004866:	d0b4      	beq.n	80047d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3718      	adds	r7, #24
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004872:	b480      	push	{r7}
 8004874:	b095      	sub	sp, #84	@ 0x54
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	330c      	adds	r3, #12
 8004880:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004884:	e853 3f00 	ldrex	r3, [r3]
 8004888:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800488a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800488c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004890:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	330c      	adds	r3, #12
 8004898:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800489a:	643a      	str	r2, [r7, #64]	@ 0x40
 800489c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80048a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80048a2:	e841 2300 	strex	r3, r2, [r1]
 80048a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80048a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1e5      	bne.n	800487a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	3314      	adds	r3, #20
 80048b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b6:	6a3b      	ldr	r3, [r7, #32]
 80048b8:	e853 3f00 	ldrex	r3, [r3]
 80048bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	f023 0301 	bic.w	r3, r3, #1
 80048c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	3314      	adds	r3, #20
 80048cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048d6:	e841 2300 	strex	r3, r2, [r1]
 80048da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1e5      	bne.n	80048ae <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d119      	bne.n	800491e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	330c      	adds	r3, #12
 80048f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	e853 3f00 	ldrex	r3, [r3]
 80048f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	f023 0310 	bic.w	r3, r3, #16
 8004900:	647b      	str	r3, [r7, #68]	@ 0x44
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	330c      	adds	r3, #12
 8004908:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800490a:	61ba      	str	r2, [r7, #24]
 800490c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490e:	6979      	ldr	r1, [r7, #20]
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	e841 2300 	strex	r3, r2, [r1]
 8004916:	613b      	str	r3, [r7, #16]
   return(result);
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1e5      	bne.n	80048ea <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2220      	movs	r2, #32
 8004922:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800492c:	bf00      	nop
 800492e:	3754      	adds	r7, #84	@ 0x54
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004944:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2200      	movs	r2, #0
 800494a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	f7ff ff1e 	bl	8004794 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004958:	bf00      	nop
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800496e:	b2db      	uxtb	r3, r3
 8004970:	2b21      	cmp	r3, #33	@ 0x21
 8004972:	d13e      	bne.n	80049f2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800497c:	d114      	bne.n	80049a8 <UART_Transmit_IT+0x48>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d110      	bne.n	80049a8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a1b      	ldr	r3, [r3, #32]
 800498a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	881b      	ldrh	r3, [r3, #0]
 8004990:	461a      	mov	r2, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800499a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a1b      	ldr	r3, [r3, #32]
 80049a0:	1c9a      	adds	r2, r3, #2
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	621a      	str	r2, [r3, #32]
 80049a6:	e008      	b.n	80049ba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a1b      	ldr	r3, [r3, #32]
 80049ac:	1c59      	adds	r1, r3, #1
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	6211      	str	r1, [r2, #32]
 80049b2:	781a      	ldrb	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80049be:	b29b      	uxth	r3, r3
 80049c0:	3b01      	subs	r3, #1
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	4619      	mov	r1, r3
 80049c8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10f      	bne.n	80049ee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68da      	ldr	r2, [r3, #12]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80049dc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68da      	ldr	r2, [r3, #12]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80049ec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80049ee:	2300      	movs	r3, #0
 80049f0:	e000      	b.n	80049f4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80049f2:	2302      	movs	r3, #2
  }
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3714      	adds	r7, #20
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68da      	ldr	r2, [r3, #12]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a16:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2220      	movs	r2, #32
 8004a1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f7ff fea3 	bl	800476c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3708      	adds	r7, #8
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b08c      	sub	sp, #48	@ 0x30
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	2b22      	cmp	r3, #34	@ 0x22
 8004a42:	f040 80ae 	bne.w	8004ba2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a4e:	d117      	bne.n	8004a80 <UART_Receive_IT+0x50>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d113      	bne.n	8004a80 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a60:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a72:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a78:	1c9a      	adds	r2, r3, #2
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a7e:	e026      	b.n	8004ace <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004a86:	2300      	movs	r3, #0
 8004a88:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a92:	d007      	beq.n	8004aa4 <UART_Receive_IT+0x74>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d10a      	bne.n	8004ab2 <UART_Receive_IT+0x82>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d106      	bne.n	8004ab2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	b2da      	uxtb	r2, r3
 8004aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aae:	701a      	strb	r2, [r3, #0]
 8004ab0:	e008      	b.n	8004ac4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004abe:	b2da      	uxtb	r2, r3
 8004ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ac2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ac8:	1c5a      	adds	r2, r3, #1
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	4619      	mov	r1, r3
 8004adc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d15d      	bne.n	8004b9e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68da      	ldr	r2, [r3, #12]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f022 0220 	bic.w	r2, r2, #32
 8004af0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68da      	ldr	r2, [r3, #12]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b00:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	695a      	ldr	r2, [r3, #20]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f022 0201 	bic.w	r2, r2, #1
 8004b10:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2220      	movs	r2, #32
 8004b16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d135      	bne.n	8004b94 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	330c      	adds	r3, #12
 8004b34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	e853 3f00 	ldrex	r3, [r3]
 8004b3c:	613b      	str	r3, [r7, #16]
   return(result);
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	f023 0310 	bic.w	r3, r3, #16
 8004b44:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	330c      	adds	r3, #12
 8004b4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b4e:	623a      	str	r2, [r7, #32]
 8004b50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b52:	69f9      	ldr	r1, [r7, #28]
 8004b54:	6a3a      	ldr	r2, [r7, #32]
 8004b56:	e841 2300 	strex	r3, r2, [r1]
 8004b5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1e5      	bne.n	8004b2e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0310 	and.w	r3, r3, #16
 8004b6c:	2b10      	cmp	r3, #16
 8004b6e:	d10a      	bne.n	8004b86 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b70:	2300      	movs	r3, #0
 8004b72:	60fb      	str	r3, [r7, #12]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	60fb      	str	r3, [r7, #12]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	60fb      	str	r3, [r7, #12]
 8004b84:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f7ff fe0b 	bl	80047a8 <HAL_UARTEx_RxEventCallback>
 8004b92:	e002      	b.n	8004b9a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f7ff fdf3 	bl	8004780 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	e002      	b.n	8004ba4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	e000      	b.n	8004ba4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004ba2:	2302      	movs	r3, #2
  }
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3730      	adds	r7, #48	@ 0x30
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bb0:	b0c0      	sub	sp, #256	@ 0x100
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bc8:	68d9      	ldr	r1, [r3, #12]
 8004bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	ea40 0301 	orr.w	r3, r0, r1
 8004bd4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bda:	689a      	ldr	r2, [r3, #8]
 8004bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	431a      	orrs	r2, r3
 8004be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	431a      	orrs	r2, r3
 8004bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bf0:	69db      	ldr	r3, [r3, #28]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004c04:	f021 010c 	bic.w	r1, r1, #12
 8004c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004c12:	430b      	orrs	r3, r1
 8004c14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c26:	6999      	ldr	r1, [r3, #24]
 8004c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	ea40 0301 	orr.w	r3, r0, r1
 8004c32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	4b8f      	ldr	r3, [pc, #572]	@ (8004e78 <UART_SetConfig+0x2cc>)
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d005      	beq.n	8004c4c <UART_SetConfig+0xa0>
 8004c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	4b8d      	ldr	r3, [pc, #564]	@ (8004e7c <UART_SetConfig+0x2d0>)
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d104      	bne.n	8004c56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c4c:	f7fe fd3e 	bl	80036cc <HAL_RCC_GetPCLK2Freq>
 8004c50:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004c54:	e003      	b.n	8004c5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c56:	f7fe fd25 	bl	80036a4 <HAL_RCC_GetPCLK1Freq>
 8004c5a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c62:	69db      	ldr	r3, [r3, #28]
 8004c64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c68:	f040 810c 	bne.w	8004e84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c70:	2200      	movs	r2, #0
 8004c72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004c76:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004c7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004c7e:	4622      	mov	r2, r4
 8004c80:	462b      	mov	r3, r5
 8004c82:	1891      	adds	r1, r2, r2
 8004c84:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004c86:	415b      	adcs	r3, r3
 8004c88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004c8e:	4621      	mov	r1, r4
 8004c90:	eb12 0801 	adds.w	r8, r2, r1
 8004c94:	4629      	mov	r1, r5
 8004c96:	eb43 0901 	adc.w	r9, r3, r1
 8004c9a:	f04f 0200 	mov.w	r2, #0
 8004c9e:	f04f 0300 	mov.w	r3, #0
 8004ca2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ca6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004caa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cae:	4690      	mov	r8, r2
 8004cb0:	4699      	mov	r9, r3
 8004cb2:	4623      	mov	r3, r4
 8004cb4:	eb18 0303 	adds.w	r3, r8, r3
 8004cb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004cbc:	462b      	mov	r3, r5
 8004cbe:	eb49 0303 	adc.w	r3, r9, r3
 8004cc2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004cd2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004cd6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004cda:	460b      	mov	r3, r1
 8004cdc:	18db      	adds	r3, r3, r3
 8004cde:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	eb42 0303 	adc.w	r3, r2, r3
 8004ce6:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ce8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004cec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004cf0:	f7fb fe78 	bl	80009e4 <__aeabi_uldivmod>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	4b61      	ldr	r3, [pc, #388]	@ (8004e80 <UART_SetConfig+0x2d4>)
 8004cfa:	fba3 2302 	umull	r2, r3, r3, r2
 8004cfe:	095b      	lsrs	r3, r3, #5
 8004d00:	011c      	lsls	r4, r3, #4
 8004d02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d06:	2200      	movs	r2, #0
 8004d08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d0c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004d10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004d14:	4642      	mov	r2, r8
 8004d16:	464b      	mov	r3, r9
 8004d18:	1891      	adds	r1, r2, r2
 8004d1a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004d1c:	415b      	adcs	r3, r3
 8004d1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004d24:	4641      	mov	r1, r8
 8004d26:	eb12 0a01 	adds.w	sl, r2, r1
 8004d2a:	4649      	mov	r1, r9
 8004d2c:	eb43 0b01 	adc.w	fp, r3, r1
 8004d30:	f04f 0200 	mov.w	r2, #0
 8004d34:	f04f 0300 	mov.w	r3, #0
 8004d38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d44:	4692      	mov	sl, r2
 8004d46:	469b      	mov	fp, r3
 8004d48:	4643      	mov	r3, r8
 8004d4a:	eb1a 0303 	adds.w	r3, sl, r3
 8004d4e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d52:	464b      	mov	r3, r9
 8004d54:	eb4b 0303 	adc.w	r3, fp, r3
 8004d58:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d68:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004d6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004d70:	460b      	mov	r3, r1
 8004d72:	18db      	adds	r3, r3, r3
 8004d74:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d76:	4613      	mov	r3, r2
 8004d78:	eb42 0303 	adc.w	r3, r2, r3
 8004d7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004d82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004d86:	f7fb fe2d 	bl	80009e4 <__aeabi_uldivmod>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	4611      	mov	r1, r2
 8004d90:	4b3b      	ldr	r3, [pc, #236]	@ (8004e80 <UART_SetConfig+0x2d4>)
 8004d92:	fba3 2301 	umull	r2, r3, r3, r1
 8004d96:	095b      	lsrs	r3, r3, #5
 8004d98:	2264      	movs	r2, #100	@ 0x64
 8004d9a:	fb02 f303 	mul.w	r3, r2, r3
 8004d9e:	1acb      	subs	r3, r1, r3
 8004da0:	00db      	lsls	r3, r3, #3
 8004da2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004da6:	4b36      	ldr	r3, [pc, #216]	@ (8004e80 <UART_SetConfig+0x2d4>)
 8004da8:	fba3 2302 	umull	r2, r3, r3, r2
 8004dac:	095b      	lsrs	r3, r3, #5
 8004dae:	005b      	lsls	r3, r3, #1
 8004db0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004db4:	441c      	add	r4, r3
 8004db6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004dc0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004dc4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004dc8:	4642      	mov	r2, r8
 8004dca:	464b      	mov	r3, r9
 8004dcc:	1891      	adds	r1, r2, r2
 8004dce:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004dd0:	415b      	adcs	r3, r3
 8004dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004dd4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004dd8:	4641      	mov	r1, r8
 8004dda:	1851      	adds	r1, r2, r1
 8004ddc:	6339      	str	r1, [r7, #48]	@ 0x30
 8004dde:	4649      	mov	r1, r9
 8004de0:	414b      	adcs	r3, r1
 8004de2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004de4:	f04f 0200 	mov.w	r2, #0
 8004de8:	f04f 0300 	mov.w	r3, #0
 8004dec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004df0:	4659      	mov	r1, fp
 8004df2:	00cb      	lsls	r3, r1, #3
 8004df4:	4651      	mov	r1, sl
 8004df6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dfa:	4651      	mov	r1, sl
 8004dfc:	00ca      	lsls	r2, r1, #3
 8004dfe:	4610      	mov	r0, r2
 8004e00:	4619      	mov	r1, r3
 8004e02:	4603      	mov	r3, r0
 8004e04:	4642      	mov	r2, r8
 8004e06:	189b      	adds	r3, r3, r2
 8004e08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e0c:	464b      	mov	r3, r9
 8004e0e:	460a      	mov	r2, r1
 8004e10:	eb42 0303 	adc.w	r3, r2, r3
 8004e14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004e24:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004e28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	18db      	adds	r3, r3, r3
 8004e30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e32:	4613      	mov	r3, r2
 8004e34:	eb42 0303 	adc.w	r3, r2, r3
 8004e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004e42:	f7fb fdcf 	bl	80009e4 <__aeabi_uldivmod>
 8004e46:	4602      	mov	r2, r0
 8004e48:	460b      	mov	r3, r1
 8004e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e80 <UART_SetConfig+0x2d4>)
 8004e4c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e50:	095b      	lsrs	r3, r3, #5
 8004e52:	2164      	movs	r1, #100	@ 0x64
 8004e54:	fb01 f303 	mul.w	r3, r1, r3
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	00db      	lsls	r3, r3, #3
 8004e5c:	3332      	adds	r3, #50	@ 0x32
 8004e5e:	4a08      	ldr	r2, [pc, #32]	@ (8004e80 <UART_SetConfig+0x2d4>)
 8004e60:	fba2 2303 	umull	r2, r3, r2, r3
 8004e64:	095b      	lsrs	r3, r3, #5
 8004e66:	f003 0207 	and.w	r2, r3, #7
 8004e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4422      	add	r2, r4
 8004e72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e74:	e106      	b.n	8005084 <UART_SetConfig+0x4d8>
 8004e76:	bf00      	nop
 8004e78:	40011000 	.word	0x40011000
 8004e7c:	40011400 	.word	0x40011400
 8004e80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004e8e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004e92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004e96:	4642      	mov	r2, r8
 8004e98:	464b      	mov	r3, r9
 8004e9a:	1891      	adds	r1, r2, r2
 8004e9c:	6239      	str	r1, [r7, #32]
 8004e9e:	415b      	adcs	r3, r3
 8004ea0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ea2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ea6:	4641      	mov	r1, r8
 8004ea8:	1854      	adds	r4, r2, r1
 8004eaa:	4649      	mov	r1, r9
 8004eac:	eb43 0501 	adc.w	r5, r3, r1
 8004eb0:	f04f 0200 	mov.w	r2, #0
 8004eb4:	f04f 0300 	mov.w	r3, #0
 8004eb8:	00eb      	lsls	r3, r5, #3
 8004eba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ebe:	00e2      	lsls	r2, r4, #3
 8004ec0:	4614      	mov	r4, r2
 8004ec2:	461d      	mov	r5, r3
 8004ec4:	4643      	mov	r3, r8
 8004ec6:	18e3      	adds	r3, r4, r3
 8004ec8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004ecc:	464b      	mov	r3, r9
 8004ece:	eb45 0303 	adc.w	r3, r5, r3
 8004ed2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004ee2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004ee6:	f04f 0200 	mov.w	r2, #0
 8004eea:	f04f 0300 	mov.w	r3, #0
 8004eee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004ef2:	4629      	mov	r1, r5
 8004ef4:	008b      	lsls	r3, r1, #2
 8004ef6:	4621      	mov	r1, r4
 8004ef8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004efc:	4621      	mov	r1, r4
 8004efe:	008a      	lsls	r2, r1, #2
 8004f00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004f04:	f7fb fd6e 	bl	80009e4 <__aeabi_uldivmod>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	4b60      	ldr	r3, [pc, #384]	@ (8005090 <UART_SetConfig+0x4e4>)
 8004f0e:	fba3 2302 	umull	r2, r3, r3, r2
 8004f12:	095b      	lsrs	r3, r3, #5
 8004f14:	011c      	lsls	r4, r3, #4
 8004f16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004f20:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004f24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004f28:	4642      	mov	r2, r8
 8004f2a:	464b      	mov	r3, r9
 8004f2c:	1891      	adds	r1, r2, r2
 8004f2e:	61b9      	str	r1, [r7, #24]
 8004f30:	415b      	adcs	r3, r3
 8004f32:	61fb      	str	r3, [r7, #28]
 8004f34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f38:	4641      	mov	r1, r8
 8004f3a:	1851      	adds	r1, r2, r1
 8004f3c:	6139      	str	r1, [r7, #16]
 8004f3e:	4649      	mov	r1, r9
 8004f40:	414b      	adcs	r3, r1
 8004f42:	617b      	str	r3, [r7, #20]
 8004f44:	f04f 0200 	mov.w	r2, #0
 8004f48:	f04f 0300 	mov.w	r3, #0
 8004f4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f50:	4659      	mov	r1, fp
 8004f52:	00cb      	lsls	r3, r1, #3
 8004f54:	4651      	mov	r1, sl
 8004f56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f5a:	4651      	mov	r1, sl
 8004f5c:	00ca      	lsls	r2, r1, #3
 8004f5e:	4610      	mov	r0, r2
 8004f60:	4619      	mov	r1, r3
 8004f62:	4603      	mov	r3, r0
 8004f64:	4642      	mov	r2, r8
 8004f66:	189b      	adds	r3, r3, r2
 8004f68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f6c:	464b      	mov	r3, r9
 8004f6e:	460a      	mov	r2, r1
 8004f70:	eb42 0303 	adc.w	r3, r2, r3
 8004f74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f82:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004f84:	f04f 0200 	mov.w	r2, #0
 8004f88:	f04f 0300 	mov.w	r3, #0
 8004f8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004f90:	4649      	mov	r1, r9
 8004f92:	008b      	lsls	r3, r1, #2
 8004f94:	4641      	mov	r1, r8
 8004f96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f9a:	4641      	mov	r1, r8
 8004f9c:	008a      	lsls	r2, r1, #2
 8004f9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004fa2:	f7fb fd1f 	bl	80009e4 <__aeabi_uldivmod>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	460b      	mov	r3, r1
 8004faa:	4611      	mov	r1, r2
 8004fac:	4b38      	ldr	r3, [pc, #224]	@ (8005090 <UART_SetConfig+0x4e4>)
 8004fae:	fba3 2301 	umull	r2, r3, r3, r1
 8004fb2:	095b      	lsrs	r3, r3, #5
 8004fb4:	2264      	movs	r2, #100	@ 0x64
 8004fb6:	fb02 f303 	mul.w	r3, r2, r3
 8004fba:	1acb      	subs	r3, r1, r3
 8004fbc:	011b      	lsls	r3, r3, #4
 8004fbe:	3332      	adds	r3, #50	@ 0x32
 8004fc0:	4a33      	ldr	r2, [pc, #204]	@ (8005090 <UART_SetConfig+0x4e4>)
 8004fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc6:	095b      	lsrs	r3, r3, #5
 8004fc8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004fcc:	441c      	add	r4, r3
 8004fce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	673b      	str	r3, [r7, #112]	@ 0x70
 8004fd6:	677a      	str	r2, [r7, #116]	@ 0x74
 8004fd8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004fdc:	4642      	mov	r2, r8
 8004fde:	464b      	mov	r3, r9
 8004fe0:	1891      	adds	r1, r2, r2
 8004fe2:	60b9      	str	r1, [r7, #8]
 8004fe4:	415b      	adcs	r3, r3
 8004fe6:	60fb      	str	r3, [r7, #12]
 8004fe8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fec:	4641      	mov	r1, r8
 8004fee:	1851      	adds	r1, r2, r1
 8004ff0:	6039      	str	r1, [r7, #0]
 8004ff2:	4649      	mov	r1, r9
 8004ff4:	414b      	adcs	r3, r1
 8004ff6:	607b      	str	r3, [r7, #4]
 8004ff8:	f04f 0200 	mov.w	r2, #0
 8004ffc:	f04f 0300 	mov.w	r3, #0
 8005000:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005004:	4659      	mov	r1, fp
 8005006:	00cb      	lsls	r3, r1, #3
 8005008:	4651      	mov	r1, sl
 800500a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800500e:	4651      	mov	r1, sl
 8005010:	00ca      	lsls	r2, r1, #3
 8005012:	4610      	mov	r0, r2
 8005014:	4619      	mov	r1, r3
 8005016:	4603      	mov	r3, r0
 8005018:	4642      	mov	r2, r8
 800501a:	189b      	adds	r3, r3, r2
 800501c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800501e:	464b      	mov	r3, r9
 8005020:	460a      	mov	r2, r1
 8005022:	eb42 0303 	adc.w	r3, r2, r3
 8005026:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	663b      	str	r3, [r7, #96]	@ 0x60
 8005032:	667a      	str	r2, [r7, #100]	@ 0x64
 8005034:	f04f 0200 	mov.w	r2, #0
 8005038:	f04f 0300 	mov.w	r3, #0
 800503c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005040:	4649      	mov	r1, r9
 8005042:	008b      	lsls	r3, r1, #2
 8005044:	4641      	mov	r1, r8
 8005046:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800504a:	4641      	mov	r1, r8
 800504c:	008a      	lsls	r2, r1, #2
 800504e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005052:	f7fb fcc7 	bl	80009e4 <__aeabi_uldivmod>
 8005056:	4602      	mov	r2, r0
 8005058:	460b      	mov	r3, r1
 800505a:	4b0d      	ldr	r3, [pc, #52]	@ (8005090 <UART_SetConfig+0x4e4>)
 800505c:	fba3 1302 	umull	r1, r3, r3, r2
 8005060:	095b      	lsrs	r3, r3, #5
 8005062:	2164      	movs	r1, #100	@ 0x64
 8005064:	fb01 f303 	mul.w	r3, r1, r3
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	011b      	lsls	r3, r3, #4
 800506c:	3332      	adds	r3, #50	@ 0x32
 800506e:	4a08      	ldr	r2, [pc, #32]	@ (8005090 <UART_SetConfig+0x4e4>)
 8005070:	fba2 2303 	umull	r2, r3, r2, r3
 8005074:	095b      	lsrs	r3, r3, #5
 8005076:	f003 020f 	and.w	r2, r3, #15
 800507a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4422      	add	r2, r4
 8005082:	609a      	str	r2, [r3, #8]
}
 8005084:	bf00      	nop
 8005086:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800508a:	46bd      	mov	sp, r7
 800508c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005090:	51eb851f 	.word	0x51eb851f

08005094 <memset>:
 8005094:	4402      	add	r2, r0
 8005096:	4603      	mov	r3, r0
 8005098:	4293      	cmp	r3, r2
 800509a:	d100      	bne.n	800509e <memset+0xa>
 800509c:	4770      	bx	lr
 800509e:	f803 1b01 	strb.w	r1, [r3], #1
 80050a2:	e7f9      	b.n	8005098 <memset+0x4>

080050a4 <__libc_init_array>:
 80050a4:	b570      	push	{r4, r5, r6, lr}
 80050a6:	4d0d      	ldr	r5, [pc, #52]	@ (80050dc <__libc_init_array+0x38>)
 80050a8:	4c0d      	ldr	r4, [pc, #52]	@ (80050e0 <__libc_init_array+0x3c>)
 80050aa:	1b64      	subs	r4, r4, r5
 80050ac:	10a4      	asrs	r4, r4, #2
 80050ae:	2600      	movs	r6, #0
 80050b0:	42a6      	cmp	r6, r4
 80050b2:	d109      	bne.n	80050c8 <__libc_init_array+0x24>
 80050b4:	4d0b      	ldr	r5, [pc, #44]	@ (80050e4 <__libc_init_array+0x40>)
 80050b6:	4c0c      	ldr	r4, [pc, #48]	@ (80050e8 <__libc_init_array+0x44>)
 80050b8:	f000 f818 	bl	80050ec <_init>
 80050bc:	1b64      	subs	r4, r4, r5
 80050be:	10a4      	asrs	r4, r4, #2
 80050c0:	2600      	movs	r6, #0
 80050c2:	42a6      	cmp	r6, r4
 80050c4:	d105      	bne.n	80050d2 <__libc_init_array+0x2e>
 80050c6:	bd70      	pop	{r4, r5, r6, pc}
 80050c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80050cc:	4798      	blx	r3
 80050ce:	3601      	adds	r6, #1
 80050d0:	e7ee      	b.n	80050b0 <__libc_init_array+0xc>
 80050d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80050d6:	4798      	blx	r3
 80050d8:	3601      	adds	r6, #1
 80050da:	e7f2      	b.n	80050c2 <__libc_init_array+0x1e>
 80050dc:	08005134 	.word	0x08005134
 80050e0:	08005134 	.word	0x08005134
 80050e4:	08005134 	.word	0x08005134
 80050e8:	08005138 	.word	0x08005138

080050ec <_init>:
 80050ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ee:	bf00      	nop
 80050f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050f2:	bc08      	pop	{r3}
 80050f4:	469e      	mov	lr, r3
 80050f6:	4770      	bx	lr

080050f8 <_fini>:
 80050f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050fa:	bf00      	nop
 80050fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050fe:	bc08      	pop	{r3}
 8005100:	469e      	mov	lr, r3
 8005102:	4770      	bx	lr
