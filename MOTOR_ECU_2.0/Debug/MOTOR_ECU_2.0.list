
MOTOR_ECU_2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009330  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  08009500  08009500  0000a500  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098f0  080098f0  0000b1dc  2**0
                  CONTENTS
  4 .ARM          00000008  080098f0  080098f0  0000a8f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080098f8  080098f8  0000b1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098f8  080098f8  0000a8f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080098fc  080098fc  0000a8fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009900  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a8  200001e0  08009adc  0000b1e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000588  08009adc  0000b588  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011476  00000000  00000000  0000b20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027ad  00000000  00000000  0001c682  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe0  00000000  00000000  0001ee30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c5c  00000000  00000000  0001fe10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002386d  00000000  00000000  00020a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012ad2  00000000  00000000  000442d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5b0d  00000000  00000000  00056dab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012c8b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054ac  00000000  00000000  0012c8fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00131da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080094e8 	.word	0x080094e8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	080094e8 	.word	0x080094e8

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <USART_ReceiveData>:


char *crcOK;

uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000f4a:	b29b      	uxth	r3, r3
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <USART_SendData>:

void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	460b      	mov	r3, r1
 8000f62:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000f64:	887b      	ldrh	r3, [r7, #2]
 8000f66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	605a      	str	r2, [r3, #4]
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
	...

08000f7c <usart_setup>:


uint8_t getUsartIndex(void);

void usart_setup(uint32_t baud) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]

	ow_uart.Instance = OW_USART;
 8000f84:	4b15      	ldr	r3, [pc, #84]	@ (8000fdc <usart_setup+0x60>)
 8000f86:	4a16      	ldr	r2, [pc, #88]	@ (8000fe0 <usart_setup+0x64>)
 8000f88:	601a      	str	r2, [r3, #0]
	ow_uart.Init.BaudRate = baud;
 8000f8a:	4a14      	ldr	r2, [pc, #80]	@ (8000fdc <usart_setup+0x60>)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6053      	str	r3, [r2, #4]
	ow_uart.Init.WordLength = UART_WORDLENGTH_8B;
 8000f90:	4b12      	ldr	r3, [pc, #72]	@ (8000fdc <usart_setup+0x60>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
	ow_uart.Init.StopBits = UART_STOPBITS_1;
 8000f96:	4b11      	ldr	r3, [pc, #68]	@ (8000fdc <usart_setup+0x60>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	60da      	str	r2, [r3, #12]
	ow_uart.Init.Parity = UART_PARITY_NONE;
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fdc <usart_setup+0x60>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	611a      	str	r2, [r3, #16]
	ow_uart.Init.Mode = UART_MODE_TX_RX;
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8000fdc <usart_setup+0x60>)
 8000fa4:	220c      	movs	r2, #12
 8000fa6:	615a      	str	r2, [r3, #20]
	ow_uart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8000fdc <usart_setup+0x60>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	619a      	str	r2, [r3, #24]
	ow_uart.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fae:	4b0b      	ldr	r3, [pc, #44]	@ (8000fdc <usart_setup+0x60>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	61da      	str	r2, [r3, #28]
	if (HAL_HalfDuplex_Init(&ow_uart) != HAL_OK)
 8000fb4:	4809      	ldr	r0, [pc, #36]	@ (8000fdc <usart_setup+0x60>)
 8000fb6:	f004 fd29 	bl	8005a0c <HAL_HalfDuplex_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d000      	beq.n	8000fc2 <usart_setup+0x46>
	{
		//	    Error_Handler();
		__asm__("NOP");
 8000fc0:	bf00      	nop
	}

	__HAL_UART_ENABLE_IT(&ow_uart, UART_IT_RXNE);
 8000fc2:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <usart_setup+0x60>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	68da      	ldr	r2, [r3, #12]
 8000fc8:	4b04      	ldr	r3, [pc, #16]	@ (8000fdc <usart_setup+0x60>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f042 0220 	orr.w	r2, r2, #32
 8000fd0:	60da      	str	r2, [r3, #12]
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	200002c8 	.word	0x200002c8
 8000fe0:	40011000 	.word	0x40011000

08000fe4 <owInit>:

void owInit(OneWire *ow) {
 8000fe4:	b480      	push	{r7}
 8000fe6:	b087      	sub	sp, #28
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  int i=0, k = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	613b      	str	r3, [r7, #16]
  for (; i < MAXDEVICES_ON_THE_BUS; i++) {
 8000ff4:	e015      	b.n	8001022 <owInit+0x3e>
   uint8_t *r = (uint8_t *)&ow->ids[i];      
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	00db      	lsls	r3, r3, #3
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	60fb      	str	r3, [r7, #12]
    k=0;
 8001000:	2300      	movs	r3, #0
 8001002:	613b      	str	r3, [r7, #16]
    for (; k < 8; k++)
 8001004:	e007      	b.n	8001016 <owInit+0x32>
    r[k] = 0;
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	68fa      	ldr	r2, [r7, #12]
 800100a:	4413      	add	r3, r2
 800100c:	2200      	movs	r2, #0
 800100e:	701a      	strb	r2, [r3, #0]
    for (; k < 8; k++)
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	3301      	adds	r3, #1
 8001014:	613b      	str	r3, [r7, #16]
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	2b07      	cmp	r3, #7
 800101a:	ddf4      	ble.n	8001006 <owInit+0x22>
  for (; i < MAXDEVICES_ON_THE_BUS; i++) {
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	3301      	adds	r3, #1
 8001020:	617b      	str	r3, [r7, #20]
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	2b00      	cmp	r3, #0
 8001026:	dde6      	ble.n	8000ff6 <owInit+0x12>
  }
  k=0;
 8001028:	2300      	movs	r3, #0
 800102a:	613b      	str	r3, [r7, #16]
  for (; k < 8; k++)
 800102c:	e008      	b.n	8001040 <owInit+0x5c>
    ow->lastROM[k] = 0x00;
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	4413      	add	r3, r2
 8001034:	330c      	adds	r3, #12
 8001036:	2200      	movs	r2, #0
 8001038:	701a      	strb	r2, [r3, #0]
  for (; k < 8; k++)
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	3301      	adds	r3, #1
 800103e:	613b      	str	r3, [r7, #16]
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	2b07      	cmp	r3, #7
 8001044:	ddf3      	ble.n	800102e <owInit+0x4a>
  ow->lastDiscrepancy = 64;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2240      	movs	r2, #64	@ 0x40
 800104a:	609a      	str	r2, [r3, #8]

}
 800104c:	bf00      	nop
 800104e:	371c      	adds	r7, #28
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <owReadHandler>:

void owReadHandler() { //обработчик прерыания USART
 8001058:	b590      	push	{r4, r7, lr}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
  uint8_t index = getUsartIndex();
 800105e:	f000 f850 	bl	8001102 <getUsartIndex>
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
  /* Проверяем, что мы вызвали прерывание из-за RXNE. */
  if (((OW_USART->CR1 & USART_CR1_RXNEIE) != 0) &&
 8001066:	4b18      	ldr	r3, [pc, #96]	@ (80010c8 <owReadHandler+0x70>)
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	f003 0320 	and.w	r3, r3, #32
 800106e:	2b00      	cmp	r3, #0
 8001070:	d025      	beq.n	80010be <owReadHandler+0x66>
      ((OW_USART->SR & UART_FLAG_RXNE) != (uint16_t)RESET)) {
 8001072:	4b15      	ldr	r3, [pc, #84]	@ (80010c8 <owReadHandler+0x70>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0320 	and.w	r3, r3, #32
  if (((OW_USART->CR1 & USART_CR1_RXNEIE) != 0) &&
 800107a:	2b00      	cmp	r3, #0
 800107c:	d01f      	beq.n	80010be <owReadHandler+0x66>

    /* Получаем данные из периферии и сбрасываем флаг*/
		while ((OW_USART->SR & UART_FLAG_RXNE) == (uint16_t)RESET){;}
 800107e:	bf00      	nop
 8001080:	4b11      	ldr	r3, [pc, #68]	@ (80010c8 <owReadHandler+0x70>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f003 0320 	and.w	r3, r3, #32
 8001088:	2b00      	cmp	r3, #0
 800108a:	d0f9      	beq.n	8001080 <owReadHandler+0x28>
    rc_buffer[index] = USART_ReceiveData(OW_USART);              
 800108c:	79fc      	ldrb	r4, [r7, #7]
 800108e:	480e      	ldr	r0, [pc, #56]	@ (80010c8 <owReadHandler+0x70>)
 8001090:	f7ff ff52 	bl	8000f38 <USART_ReceiveData>
 8001094:	4603      	mov	r3, r0
 8001096:	461a      	mov	r2, r3
 8001098:	4b0c      	ldr	r3, [pc, #48]	@ (80010cc <owReadHandler+0x74>)
 800109a:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
    recvFlag &= ~(1 << index);//сбрасываем флаг ответ получен после 
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	2201      	movs	r2, #1
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	b25b      	sxtb	r3, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	b25a      	sxtb	r2, r3
 80010ac:	4b08      	ldr	r3, [pc, #32]	@ (80010d0 <owReadHandler+0x78>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	b25b      	sxtb	r3, r3
 80010b4:	4013      	ands	r3, r2
 80010b6:	b25b      	sxtb	r3, r3
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	4b05      	ldr	r3, [pc, #20]	@ (80010d0 <owReadHandler+0x78>)
 80010bc:	701a      	strb	r2, [r3, #0]
  }
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd90      	pop	{r4, r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40011000 	.word	0x40011000
 80010cc:	20000200 	.word	0x20000200
 80010d0:	200001fc 	.word	0x200001fc

080010d4 <owResetCmd>:
 *
 * @param N usart -- выбранный для реализации 1wire usart
 * @return Возвращает 1 если на шине кто-то есть и 0 в противном случае
 */

  uint16_t owResetCmd() {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
	uint16_t owPresence;
	
	usart_setup(9600);
 80010da:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 80010de:	f7ff ff4d 	bl	8000f7c <usart_setup>

  owSend(0xF0); // Send RESET отправляем импуль сброса
 80010e2:	20f0      	movs	r0, #240	@ 0xf0
 80010e4:	f000 f816 	bl	8001114 <owSend>
  owPresence = owEchoRead(); // Ждём PRESENCE на шине и вовзращаем, что есть
 80010e8:	f000 f854 	bl	8001194 <owEchoRead>
 80010ec:	4603      	mov	r3, r0
 80010ee:	80fb      	strh	r3, [r7, #6]

	usart_setup(115200);// перенастраиваем скорость UART
 80010f0:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 80010f4:	f7ff ff42 	bl	8000f7c <usart_setup>
  return owPresence;
 80010f8:	88fb      	ldrh	r3, [r7, #6]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <getUsartIndex>:

uint8_t getUsartIndex() {// смотрит по номеру UART c каким будет идти работа
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0
//	uint8_t result;
//	if(OW_USART==USART1)result = 0;
//	else if (OW_USART==USART2)result = 1;
//	else if (OW_USART==USART3)result = 2;
	return 0;
 8001106:	2300      	movs	r3, #0
}
 8001108:	4618      	mov	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
	...

08001114 <owSend>:

void owSend(uint16_t data) {
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	80fb      	strh	r3, [r7, #6]
  recvFlag |= (1 << getUsartIndex());//устанавливаем флаг если попадем в обработчик прерывания там он сбросится
 800111e:	f7ff fff0 	bl	8001102 <getUsartIndex>
 8001122:	4603      	mov	r3, r0
 8001124:	461a      	mov	r2, r3
 8001126:	2301      	movs	r3, #1
 8001128:	4093      	lsls	r3, r2
 800112a:	b25a      	sxtb	r2, r3
 800112c:	4b0d      	ldr	r3, [pc, #52]	@ (8001164 <owSend+0x50>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	b2db      	uxtb	r3, r3
 8001132:	b25b      	sxtb	r3, r3
 8001134:	4313      	orrs	r3, r2
 8001136:	b25b      	sxtb	r3, r3
 8001138:	b2da      	uxtb	r2, r3
 800113a:	4b0a      	ldr	r3, [pc, #40]	@ (8001164 <owSend+0x50>)
 800113c:	701a      	strb	r2, [r3, #0]
  USART_SendData(OW_USART, data);//отправляем данные
 800113e:	88fb      	ldrh	r3, [r7, #6]
 8001140:	4619      	mov	r1, r3
 8001142:	4809      	ldr	r0, [pc, #36]	@ (8001168 <owSend+0x54>)
 8001144:	f7ff ff08 	bl	8000f58 <USART_SendData>
	while(__HAL_UART_GET_FLAG(&ow_uart, UART_FLAG_TC) == RESET);//ждем пока передача закончится
 8001148:	bf00      	nop
 800114a:	4b08      	ldr	r3, [pc, #32]	@ (800116c <owSend+0x58>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001154:	2b40      	cmp	r3, #64	@ 0x40
 8001156:	d1f8      	bne.n	800114a <owSend+0x36>
}
 8001158:	bf00      	nop
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	200001fc 	.word	0x200001fc
 8001168:	40011000 	.word	0x40011000
 800116c:	200002c8 	.word	0x200002c8

08001170 <owReadSlot>:

uint8_t owReadSlot(uint16_t data) {//читаем у нас пришла единица или ноль в ответ
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	80fb      	strh	r3, [r7, #6]
  return (data == OW_READ) ? 1 : 0; //если пришло 0xFF, то бит = 1, что то другое бит = 0
 800117a:	88fb      	ldrh	r3, [r7, #6]
 800117c:	2bff      	cmp	r3, #255	@ 0xff
 800117e:	bf0c      	ite	eq
 8001180:	2301      	moveq	r3, #1
 8001182:	2300      	movne	r3, #0
 8001184:	b2db      	uxtb	r3, r3
}
 8001186:	4618      	mov	r0, r3
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
	...

08001194 <owEchoRead>:

uint16_t owEchoRead() {//
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
  uint8_t i = getUsartIndex();//получаем номер USART
 800119a:	f7ff ffb2 	bl	8001102 <getUsartIndex>
 800119e:	4603      	mov	r3, r0
 80011a0:	717b      	strb	r3, [r7, #5]
  uint16_t pause = 1000;
 80011a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011a6:	80fb      	strh	r3, [r7, #6]
  while (recvFlag & (1 << i) && pause--);// ждем пока кто-то не ответит но не больше паузы
 80011a8:	bf00      	nop
 80011aa:	4b0c      	ldr	r3, [pc, #48]	@ (80011dc <owEchoRead+0x48>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	461a      	mov	r2, r3
 80011b2:	797b      	ldrb	r3, [r7, #5]
 80011b4:	fa42 f303 	asr.w	r3, r2, r3
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d004      	beq.n	80011ca <owEchoRead+0x36>
 80011c0:	88fb      	ldrh	r3, [r7, #6]
 80011c2:	1e5a      	subs	r2, r3, #1
 80011c4:	80fa      	strh	r2, [r7, #6]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d1ef      	bne.n	80011aa <owEchoRead+0x16>
  return rc_buffer[i];//в зависимости от используемого номера UART 
 80011ca:	797b      	ldrb	r3, [r7, #5]
 80011cc:	4a04      	ldr	r2, [pc, #16]	@ (80011e0 <owEchoRead+0x4c>)
 80011ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011d2:	b29b      	uxth	r3, r3
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	200001fc 	.word	0x200001fc
 80011e0:	20000200 	.word	0x20000200

080011e4 <byteToBits>:

uint8_t *byteToBits(uint8_t ow_byte, uint8_t *bits) {//разлагаем 1 байт на 8 байт ,кодируем так скасказать в посылку для 1wire
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	71fb      	strb	r3, [r7, #7]
  uint8_t i;
  for (i = 0; i < 8; i++) {
 80011f0:	2300      	movs	r3, #0
 80011f2:	73fb      	strb	r3, [r7, #15]
 80011f4:	e014      	b.n	8001220 <byteToBits+0x3c>
    if (ow_byte & 0x01) {//если текущий бит в байте ==1 то
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d003      	beq.n	8001208 <byteToBits+0x24>
      *bits = WIRE_1; //заменяем на число которое при передаче по USART для 1wire будет единцией t.e 0xFF
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	22ff      	movs	r2, #255	@ 0xff
 8001204:	701a      	strb	r2, [r3, #0]
 8001206:	e002      	b.n	800120e <byteToBits+0x2a>
    } else {
      *bits = WIRE_0;// тоже самое только для 0
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	2200      	movs	r2, #0
 800120c:	701a      	strb	r2, [r3, #0]
    }
    bits++;
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	3301      	adds	r3, #1
 8001212:	603b      	str	r3, [r7, #0]
    ow_byte = ow_byte >> 1; //сдвигаем обработанный бит
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	085b      	lsrs	r3, r3, #1
 8001218:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 800121a:	7bfb      	ldrb	r3, [r7, #15]
 800121c:	3301      	adds	r3, #1
 800121e:	73fb      	strb	r3, [r7, #15]
 8001220:	7bfb      	ldrb	r3, [r7, #15]
 8001222:	2b07      	cmp	r3, #7
 8001224:	d9e7      	bls.n	80011f6 <byteToBits+0x12>
  }
  return bits; //возвращае массив для передачи 
 8001226:	683b      	ldr	r3, [r7, #0]
}
 8001228:	4618      	mov	r0, r3
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <owSendByte>:
/**
 * Метод пересылает последовательно 8 байт по одному на каждый бит в data
 * @param usart -- выбранный для эмуляции 1wire UART
 * @param d -- данные
 */
void owSendByte(uint8_t d) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
  uint8_t data[8];
	int i;
  byteToBits(d, data);//преобразовываем байт в биты "массив байт для  передачи UART и эмуляции 1WIRE"
 800123e:	f107 020c 	add.w	r2, r7, #12
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	4611      	mov	r1, r2
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff ffcc 	bl	80011e4 <byteToBits>
  for (i = 0; i < 8; ++i) {
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
 8001250:	e00a      	b.n	8001268 <owSendByte+0x34>
    owSend(data[i]);
 8001252:	f107 020c 	add.w	r2, r7, #12
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	4413      	add	r3, r2
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ff59 	bl	8001114 <owSend>
  for (i = 0; i < 8; ++i) {
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	3301      	adds	r3, #1
 8001266:	617b      	str	r3, [r7, #20]
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	2b07      	cmp	r3, #7
 800126c:	ddf1      	ble.n	8001252 <owSendByte+0x1e>
  }
}
 800126e:	bf00      	nop
 8001270:	bf00      	nop
 8001272:	3718      	adds	r7, #24
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <owCRC>:
  }
  return target_byte; //возвращаем полученный байт
}

/* Подсчет CRC8 массива mas длиной Len */
uint8_t owCRC(uint8_t *mas, uint8_t Len) {
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	460b      	mov	r3, r1
 8001282:	70fb      	strb	r3, [r7, #3]
  uint8_t i, dat, crc, fb, st_byt;
  st_byt = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	733b      	strb	r3, [r7, #12]
  crc = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	737b      	strb	r3, [r7, #13]
  do {
    dat = mas[st_byt];
 800128c:	7b3b      	ldrb	r3, [r7, #12]
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	4413      	add	r3, r2
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i < 8; i++) {  // счетчик битов в байте
 8001296:	2300      	movs	r3, #0
 8001298:	73fb      	strb	r3, [r7, #15]
 800129a:	e018      	b.n	80012ce <owCRC+0x56>
      fb = crc ^ dat;
 800129c:	7b7a      	ldrb	r2, [r7, #13]
 800129e:	7bbb      	ldrb	r3, [r7, #14]
 80012a0:	4053      	eors	r3, r2
 80012a2:	72fb      	strb	r3, [r7, #11]
      fb &= 1;
 80012a4:	7afb      	ldrb	r3, [r7, #11]
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	72fb      	strb	r3, [r7, #11]
      crc >>= 1;
 80012ac:	7b7b      	ldrb	r3, [r7, #13]
 80012ae:	085b      	lsrs	r3, r3, #1
 80012b0:	737b      	strb	r3, [r7, #13]
      dat >>= 1;
 80012b2:	7bbb      	ldrb	r3, [r7, #14]
 80012b4:	085b      	lsrs	r3, r3, #1
 80012b6:	73bb      	strb	r3, [r7, #14]
      if (fb == 1) crc ^= 0x8c; // полином
 80012b8:	7afb      	ldrb	r3, [r7, #11]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d104      	bne.n	80012c8 <owCRC+0x50>
 80012be:	7b7b      	ldrb	r3, [r7, #13]
 80012c0:	f083 0373 	eor.w	r3, r3, #115	@ 0x73
 80012c4:	43db      	mvns	r3, r3
 80012c6:	737b      	strb	r3, [r7, #13]
    for (i = 0; i < 8; i++) {  // счетчик битов в байте
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
 80012ca:	3301      	adds	r3, #1
 80012cc:	73fb      	strb	r3, [r7, #15]
 80012ce:	7bfb      	ldrb	r3, [r7, #15]
 80012d0:	2b07      	cmp	r3, #7
 80012d2:	d9e3      	bls.n	800129c <owCRC+0x24>
    }
    st_byt++;
 80012d4:	7b3b      	ldrb	r3, [r7, #12]
 80012d6:	3301      	adds	r3, #1
 80012d8:	733b      	strb	r3, [r7, #12]
  } while (st_byt < Len); // счетчик байтов в массиве
 80012da:	7b3a      	ldrb	r2, [r7, #12]
 80012dc:	78fb      	ldrb	r3, [r7, #3]
 80012de:	429a      	cmp	r2, r3
 80012e0:	d3d4      	bcc.n	800128c <owCRC+0x14>
  return crc;
 80012e2:	7b7b      	ldrb	r3, [r7, #13]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <owCRC8>:

uint8_t owCRC8(RomCode *rom){
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  return owCRC((uint8_t*)rom, 7);                        
 80012f8:	2107      	movs	r1, #7
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff ffbc 	bl	8001278 <owCRC>
 8001300:	4603      	mov	r3, r0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <hasNextRom>:
 * return 0 if hasn't
 * return -1 if error reading happened
 *
 * переделать на функции обратного вызова для реакции на ошибки
 */
int hasNextRom(OneWire *ow, uint8_t *ROM) {//
 800130a:	b580      	push	{r7, lr}
 800130c:	b088      	sub	sp, #32
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
 8001312:	6039      	str	r1, [r7, #0]
	uint8_t ui32BitNumber = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	77fb      	strb	r3, [r7, #31]
  int zeroFork = -1;
 8001318:	f04f 33ff 	mov.w	r3, #4294967295
 800131c:	61bb      	str	r3, [r7, #24]
	uint8_t i = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	75fb      	strb	r3, [r7, #23]
  if (owResetCmd() == ONEWIRE_NOBODY) { //есть ли кто на шине
 8001322:	f7ff fed7 	bl	80010d4 <owResetCmd>
 8001326:	4603      	mov	r3, r0
 8001328:	2bf0      	cmp	r3, #240	@ 0xf0
 800132a:	d101      	bne.n	8001330 <hasNextRom+0x26>
    return 0;
 800132c:	2300      	movs	r3, #0
 800132e:	e097      	b.n	8001460 <hasNextRom+0x156>
  }
  owSendByte(ONEWIRE_SEARCH);//
 8001330:	20f0      	movs	r0, #240	@ 0xf0
 8001332:	f7ff ff7f 	bl	8001234 <owSendByte>
  do {
		uint8_t answerBit =0;
 8001336:	2300      	movs	r3, #0
 8001338:	757b      	strb	r3, [r7, #21]
    int byteNum = ui32BitNumber / 8;
 800133a:	7ffb      	ldrb	r3, [r7, #31]
 800133c:	08db      	lsrs	r3, r3, #3
 800133e:	b2db      	uxtb	r3, r3
 8001340:	613b      	str	r3, [r7, #16]
    uint8_t *current = (ROM) + byteNum;
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	4413      	add	r3, r2
 8001348:	60fb      	str	r3, [r7, #12]
    uint8_t cB, cmp_cB, searchDirection = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	75bb      	strb	r3, [r7, #22]
    owSend(OW_READ); // чтение прямого бита
 800134e:	20ff      	movs	r0, #255	@ 0xff
 8001350:	f7ff fee0 	bl	8001114 <owSend>
    cB = owReadSlot(owEchoRead());//ответ от датчика
 8001354:	f7ff ff1e 	bl	8001194 <owEchoRead>
 8001358:	4603      	mov	r3, r0
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff ff08 	bl	8001170 <owReadSlot>
 8001360:	4603      	mov	r3, r0
 8001362:	72fb      	strb	r3, [r7, #11]
    owSend(OW_READ); // чтение инверсного бита
 8001364:	20ff      	movs	r0, #255	@ 0xff
 8001366:	f7ff fed5 	bl	8001114 <owSend>
    cmp_cB = owReadSlot(owEchoRead());//ответ от датчика
 800136a:	f7ff ff13 	bl	8001194 <owEchoRead>
 800136e:	4603      	mov	r3, r0
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff fefd 	bl	8001170 <owReadSlot>
 8001376:	4603      	mov	r3, r0
 8001378:	72bb      	strb	r3, [r7, #10]
    if (cB == cmp_cB && cB == 1)//сравниваем два ответа
 800137a:	7afa      	ldrb	r2, [r7, #11]
 800137c:	7abb      	ldrb	r3, [r7, #10]
 800137e:	429a      	cmp	r2, r3
 8001380:	d105      	bne.n	800138e <hasNextRom+0x84>
 8001382:	7afb      	ldrb	r3, [r7, #11]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d102      	bne.n	800138e <hasNextRom+0x84>
      return -1;//ошибка никто не ответил 
 8001388:	f04f 33ff 	mov.w	r3, #4294967295
 800138c:	e068      	b.n	8001460 <hasNextRom+0x156>
    if (cB != cmp_cB) { //нормальная ситуация пришло либо 10 либо 01
 800138e:	7afa      	ldrb	r2, [r7, #11]
 8001390:	7abb      	ldrb	r3, [r7, #10]
 8001392:	429a      	cmp	r2, r3
 8001394:	d002      	beq.n	800139c <hasNextRom+0x92>
      searchDirection = cB;//выбираем в каком направлении будем двигатся дальше
 8001396:	7afb      	ldrb	r3, [r7, #11]
 8001398:	75bb      	strb	r3, [r7, #22]
 800139a:	e023      	b.n	80013e4 <hasNextRom+0xda>
			} else {//колизия пришло 00 т.е текущий бит у ROM-ов разный
				if (ui32BitNumber == ow->lastDiscrepancy)//если текущая позиция колизии равна прошлой
 800139c:	7ffa      	ldrb	r2, [r7, #31]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d102      	bne.n	80013ac <hasNextRom+0xa2>
        searchDirection = 1;//выбираем в каком направлении будем двигатся дальше
 80013a6:	2301      	movs	r3, #1
 80013a8:	75bb      	strb	r3, [r7, #22]
 80013aa:	e01b      	b.n	80013e4 <hasNextRom+0xda>
      else {
        if (ui32BitNumber > ow->lastDiscrepancy) {//если мы зашили дальше
 80013ac:	7ffa      	ldrb	r2, [r7, #31]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	dd02      	ble.n	80013bc <hasNextRom+0xb2>
          searchDirection = 0;//выбираем в каком направлении будем двигатся дальше 
 80013b6:	2300      	movs	r3, #0
 80013b8:	75bb      	strb	r3, [r7, #22]
 80013ba:	e00e      	b.n	80013da <hasNextRom+0xd0>
        } else {
          searchDirection = (uint8_t) ((ow->lastROM[byteNum] >> ui32BitNumber % 8) & 0x01);
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	4413      	add	r3, r2
 80013c2:	330c      	adds	r3, #12
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	461a      	mov	r2, r3
 80013c8:	7ffb      	ldrb	r3, [r7, #31]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	fa42 f303 	asr.w	r3, r2, r3
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	f003 0301 	and.w	r3, r3, #1
 80013d8:	75bb      	strb	r3, [r7, #22]
        }
        if (searchDirection == 0)
 80013da:	7dbb      	ldrb	r3, [r7, #22]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d101      	bne.n	80013e4 <hasNextRom+0xda>
          zeroFork = ui32BitNumber;//запоминаем развилку
 80013e0:	7ffb      	ldrb	r3, [r7, #31]
 80013e2:	61bb      	str	r3, [r7, #24]
      }
    }
    // сохраняем бит
    if (searchDirection)
 80013e4:	7dbb      	ldrb	r3, [r7, #22]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d00e      	beq.n	8001408 <hasNextRom+0xfe>
      *(current) |= 1 << ui32BitNumber % 8;//выставляем бит в текущем байте байте
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	b25a      	sxtb	r2, r3
 80013f0:	7ffb      	ldrb	r3, [r7, #31]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	2101      	movs	r1, #1
 80013f8:	fa01 f303 	lsl.w	r3, r1, r3
 80013fc:	b25b      	sxtb	r3, r3
 80013fe:	4313      	orrs	r3, r2
 8001400:	b25b      	sxtb	r3, r3
 8001402:	b2da      	uxtb	r2, r3
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	701a      	strb	r2, [r3, #0]
    answerBit = (uint8_t) ((searchDirection == 0) ? WIRE_0 : WIRE_1);// решаем кого отключить
 8001408:	7dbb      	ldrb	r3, [r7, #22]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d101      	bne.n	8001412 <hasNextRom+0x108>
 800140e:	2300      	movs	r3, #0
 8001410:	e000      	b.n	8001414 <hasNextRom+0x10a>
 8001412:	23ff      	movs	r3, #255	@ 0xff
 8001414:	757b      	strb	r3, [r7, #21]
    owSend(answerBit);//вырубаем "мешающие" устройсва
 8001416:	7d7b      	ldrb	r3, [r7, #21]
 8001418:	b29b      	uxth	r3, r3
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff fe7a 	bl	8001114 <owSend>
    ui32BitNumber++;//ищем следующий бит
 8001420:	7ffb      	ldrb	r3, [r7, #31]
 8001422:	3301      	adds	r3, #1
 8001424:	77fb      	strb	r3, [r7, #31]
		} while (ui32BitNumber < 64);//пока не найден весь ROM все биты
 8001426:	7ffb      	ldrb	r3, [r7, #31]
 8001428:	2b3f      	cmp	r3, #63	@ 0x3f
 800142a:	d984      	bls.n	8001336 <hasNextRom+0x2c>
  ow->lastDiscrepancy = zeroFork;//запоминаем развилку
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	609a      	str	r2, [r3, #8]
  for (; i < 7; i++)
 8001432:	e00b      	b.n	800144c <hasNextRom+0x142>
    ow->lastROM[i] = ROM[i];//запоминаем последний ROM
 8001434:	7dfb      	ldrb	r3, [r7, #23]
 8001436:	683a      	ldr	r2, [r7, #0]
 8001438:	441a      	add	r2, r3
 800143a:	7dfb      	ldrb	r3, [r7, #23]
 800143c:	7811      	ldrb	r1, [r2, #0]
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	4413      	add	r3, r2
 8001442:	460a      	mov	r2, r1
 8001444:	731a      	strb	r2, [r3, #12]
  for (; i < 7; i++)
 8001446:	7dfb      	ldrb	r3, [r7, #23]
 8001448:	3301      	adds	r3, #1
 800144a:	75fb      	strb	r3, [r7, #23]
 800144c:	7dfb      	ldrb	r3, [r7, #23]
 800144e:	2b06      	cmp	r3, #6
 8001450:	d9f0      	bls.n	8001434 <hasNextRom+0x12a>
  return ow->lastDiscrepancy > 0;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	2b00      	cmp	r3, #0
 8001458:	bfcc      	ite	gt
 800145a:	2301      	movgt	r3, #1
 800145c:	2300      	movle	r3, #0
 800145e:	b2db      	uxtb	r3, r3
}
 8001460:	4618      	mov	r0, r3
 8001462:	3720      	adds	r7, #32
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <owSearchCmd>:

// Возвращает количество устройств на шине или код ошибки, если значение меньше 0
int owSearchCmd(OneWire *ow) {
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  int device = 0, nextROM;
 8001470:	2300      	movs	r3, #0
 8001472:	60fb      	str	r3, [r7, #12]
  owInit(ow);
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f7ff fdb5 	bl	8000fe4 <owInit>
  do {
    nextROM = hasNextRom(ow, (uint8_t*)(&ow->ids[device])); //передаем указатель на структуру куда положить след.ROM
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	00db      	lsls	r3, r3, #3
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	4413      	add	r3, r2
 8001482:	4619      	mov	r1, r3
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7ff ff40 	bl	800130a <hasNextRom>
 800148a:	60b8      	str	r0, [r7, #8]
    if (nextROM<0)
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	2b00      	cmp	r3, #0
 8001490:	da02      	bge.n	8001498 <owSearchCmd+0x30>
      return -1;
 8001492:	f04f 33ff 	mov.w	r3, #4294967295
 8001496:	e009      	b.n	80014ac <owSearchCmd+0x44>
    device++;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	3301      	adds	r3, #1
 800149c:	60fb      	str	r3, [r7, #12]
		} while (nextROM && device < MAXDEVICES_ON_THE_BUS);//ищем пока кто-то есть и этих кто-то не больше дефайна
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d002      	beq.n	80014aa <owSearchCmd+0x42>
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	dde7      	ble.n	800147a <owSearchCmd+0x12>
		return device;//возвращаем порядковый номер датчика (устройства) на шине
 80014aa:	68fb      	ldr	r3, [r7, #12]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <owMatchRomCmd>:
void owSkipRomCmd(OneWire *ow) {//отправляет команду пропуска ROM после этого следующая команда будет
  owResetCmd();                 //для всех устройств на шине
  owSendByte(ONEWIRE_SKIP_ROM);
}

void owMatchRomCmd(RomCode *rom) {//позволяет мастеру обращаться к конкретному  ведомому устройству
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
	int i = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]
  owResetCmd();
 80014c0:	f7ff fe08 	bl	80010d4 <owResetCmd>
  owSendByte(ONEWIRE_MATCH_ROM);//обращаемся к конкретному устройсву
 80014c4:	2055      	movs	r0, #85	@ 0x55
 80014c6:	f7ff feb5 	bl	8001234 <owSendByte>
  for (; i < 8; i++)
 80014ca:	e009      	b.n	80014e0 <owMatchRomCmd+0x2c>
	owSendByte(*(((uint8_t *) rom) + i));//"перебираемся по структуре как по массиву" первой звездочкой получаем i тый байт из структуры
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	4413      	add	r3, r2
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff fead 	bl	8001234 <owSendByte>
  for (; i < 8; i++)
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	3301      	adds	r3, #1
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2b07      	cmp	r3, #7
 80014e4:	ddf2      	ble.n	80014cc <owMatchRomCmd+0x18>
}
 80014e6:	bf00      	nop
 80014e8:	bf00      	nop
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <owConvertTemperatureCmd>:

void owConvertTemperatureCmd(OneWire *ow, RomCode *rom) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  owMatchRomCmd(rom);//позволяет мастеру обращаться к конкретному  ведомому устройству
 80014fa:	6838      	ldr	r0, [r7, #0]
 80014fc:	f7ff ffda 	bl	80014b4 <owMatchRomCmd>
  owSendByte(ONEWIRE_CONVERT_TEMPERATURE);//говорим датчику пора бы преобразовать температуру
 8001500:	2044      	movs	r0, #68	@ 0x44
 8001502:	f7ff fe97 	bl	8001234 <owSendByte>
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <owReadScratchpadCmd>:
 * @param ow -- OneWire pointer
 * @param rom -- selected device on the bus
 * @param data -- buffer for data
 * @return data
 */
uint8_t *owReadScratchpadCmd(OneWire *ow, RomCode *rom, uint8_t *data) {//читаем память датчика
 800150e:	b580      	push	{r7, lr}
 8001510:	b086      	sub	sp, #24
 8001512:	af00      	add	r7, sp, #0
 8001514:	60f8      	str	r0, [r7, #12]
 8001516:	60b9      	str	r1, [r7, #8]
 8001518:	607a      	str	r2, [r7, #4]
  uint16_t b = 0, p;
 800151a:	2300      	movs	r3, #0
 800151c:	82fb      	strh	r3, [r7, #22]
  switch (rom->family) {
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b10      	cmp	r3, #16
 8001524:	d001      	beq.n	800152a <owReadScratchpadCmd+0x1c>
 8001526:	2b28      	cmp	r3, #40	@ 0x28
 8001528:	d109      	bne.n	800153e <owReadScratchpadCmd+0x30>
    case DS18B20:
    case DS18S20:
      p = 72;  //9*8 =72 == равняется 9 байт данных
 800152a:	2348      	movs	r3, #72	@ 0x48
 800152c:	82bb      	strh	r3, [r7, #20]
      break;
 800152e:	bf00      	nop
    default:
      return data;

  }
  owMatchRomCmd(rom);
 8001530:	68b8      	ldr	r0, [r7, #8]
 8001532:	f7ff ffbf 	bl	80014b4 <owMatchRomCmd>
  owSendByte(ONEWIRE_READ_SCRATCHPAD);//отправляем команду на чтение памяти
 8001536:	20be      	movs	r0, #190	@ 0xbe
 8001538:	f7ff fe7c 	bl	8001234 <owSendByte>
  while (b < p) {// пока мы не обработали 9 байт 
 800153c:	e048      	b.n	80015d0 <owReadScratchpadCmd+0xc2>
      return data;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	e04b      	b.n	80015da <owReadScratchpadCmd+0xcc>
    uint8_t pos = (uint8_t) ((p - 8) / 8 - (b / 8)); //позиция обрабатываемого байта
 8001542:	8abb      	ldrh	r3, [r7, #20]
 8001544:	3b08      	subs	r3, #8
 8001546:	2b00      	cmp	r3, #0
 8001548:	da00      	bge.n	800154c <owReadScratchpadCmd+0x3e>
 800154a:	3307      	adds	r3, #7
 800154c:	10db      	asrs	r3, r3, #3
 800154e:	b2da      	uxtb	r2, r3
 8001550:	8afb      	ldrh	r3, [r7, #22]
 8001552:	08db      	lsrs	r3, r3, #3
 8001554:	b29b      	uxth	r3, r3
 8001556:	b2db      	uxtb	r3, r3
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	74fb      	strb	r3, [r7, #19]
    uint8_t bt; 
		owSend(OW_READ);
 800155c:	20ff      	movs	r0, #255	@ 0xff
 800155e:	f7ff fdd9 	bl	8001114 <owSend>
    bt = owReadSlot(owEchoRead());//читаем данные 
 8001562:	f7ff fe17 	bl	8001194 <owEchoRead>
 8001566:	4603      	mov	r3, r0
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff fe01 	bl	8001170 <owReadSlot>
 800156e:	4603      	mov	r3, r0
 8001570:	74bb      	strb	r3, [r7, #18]
    if (bt == 1)
 8001572:	7cbb      	ldrb	r3, [r7, #18]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d113      	bne.n	80015a0 <owReadScratchpadCmd+0x92>
      data[pos] |= 1 << b % 8;//выставляем бит в нужной позиции
 8001578:	7cfb      	ldrb	r3, [r7, #19]
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	4413      	add	r3, r2
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	b25a      	sxtb	r2, r3
 8001582:	8afb      	ldrh	r3, [r7, #22]
 8001584:	f003 0307 	and.w	r3, r3, #7
 8001588:	2101      	movs	r1, #1
 800158a:	fa01 f303 	lsl.w	r3, r1, r3
 800158e:	b25b      	sxtb	r3, r3
 8001590:	4313      	orrs	r3, r2
 8001592:	b259      	sxtb	r1, r3
 8001594:	7cfb      	ldrb	r3, [r7, #19]
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	4413      	add	r3, r2
 800159a:	b2ca      	uxtb	r2, r1
 800159c:	701a      	strb	r2, [r3, #0]
 800159e:	e014      	b.n	80015ca <owReadScratchpadCmd+0xbc>
    else
      data[pos] &= ~(1 << b % 8);//сбрасываем бит в нужной позиции
 80015a0:	7cfb      	ldrb	r3, [r7, #19]
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	4413      	add	r3, r2
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	b25a      	sxtb	r2, r3
 80015aa:	8afb      	ldrh	r3, [r7, #22]
 80015ac:	f003 0307 	and.w	r3, r3, #7
 80015b0:	2101      	movs	r1, #1
 80015b2:	fa01 f303 	lsl.w	r3, r1, r3
 80015b6:	b25b      	sxtb	r3, r3
 80015b8:	43db      	mvns	r3, r3
 80015ba:	b25b      	sxtb	r3, r3
 80015bc:	4013      	ands	r3, r2
 80015be:	b259      	sxtb	r1, r3
 80015c0:	7cfb      	ldrb	r3, [r7, #19]
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	4413      	add	r3, r2
 80015c6:	b2ca      	uxtb	r2, r1
 80015c8:	701a      	strb	r2, [r3, #0]
    b++;//следующий бит
 80015ca:	8afb      	ldrh	r3, [r7, #22]
 80015cc:	3301      	adds	r3, #1
 80015ce:	82fb      	strh	r3, [r7, #22]
  while (b < p) {// пока мы не обработали 9 байт 
 80015d0:	8afa      	ldrh	r2, [r7, #22]
 80015d2:	8abb      	ldrh	r3, [r7, #20]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d3b4      	bcc.n	8001542 <owReadScratchpadCmd+0x34>
  }
  return data;
 80015d8:	687b      	ldr	r3, [r7, #4]
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3718      	adds	r7, #24
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <readTemperature>:
 * @param ow -- OneWire bus pointer
 * @param rom -- selected device
 * @param reSense -- do you want resense temp for next time?
 * @return struct with data
 */
Temperature readTemperature(OneWire *ow, RomCode *rom, uint8_t reSense) {
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b08c      	sub	sp, #48	@ 0x30
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	60f8      	str	r0, [r7, #12]
 80015ea:	60b9      	str	r1, [r7, #8]
 80015ec:	4613      	mov	r3, r2
 80015ee:	71fb      	strb	r3, [r7, #7]
	Scratchpad_DS18B20 *sp;
	Scratchpad_DS18S20 *spP;
  Temperature t;
	uint8_t pad[9];
  t.inCelsus = 0x00;
 80015f0:	2300      	movs	r3, #0
 80015f2:	f887 3020 	strb.w	r3, [r7, #32]
  t.frac = 0x00;
 80015f6:	2300      	movs	r3, #0
 80015f8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  sp = (Scratchpad_DS18B20 *) &pad; 
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	62fb      	str	r3, [r7, #44]	@ 0x2c
  spP = (Scratchpad_DS18S20 *) &pad;
 8001602:	f107 0314 	add.w	r3, r7, #20
 8001606:	62bb      	str	r3, [r7, #40]	@ 0x28
  switch (rom->family) {
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b10      	cmp	r3, #16
 800160e:	d022      	beq.n	8001656 <readTemperature+0x74>
 8001610:	2b28      	cmp	r3, #40	@ 0x28
 8001612:	d13a      	bne.n	800168a <readTemperature+0xa8>
    case DS18B20:
      owReadScratchpadCmd(ow, rom, pad);//читаем память  для DS18B20
 8001614:	f107 0314 	add.w	r3, r7, #20
 8001618:	461a      	mov	r2, r3
 800161a:	68b9      	ldr	r1, [r7, #8]
 800161c:	68f8      	ldr	r0, [r7, #12]
 800161e:	f7ff ff76 	bl	800150e <owReadScratchpadCmd>
      t.inCelsus = (int8_t) (sp->temp_msb << 4) | (sp->temp_lsb >> 4);//целая часть
 8001622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001624:	79db      	ldrb	r3, [r3, #7]
 8001626:	011b      	lsls	r3, r3, #4
 8001628:	b25a      	sxtb	r2, r3
 800162a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800162c:	7a1b      	ldrb	r3, [r3, #8]
 800162e:	091b      	lsrs	r3, r3, #4
 8001630:	b2db      	uxtb	r3, r3
 8001632:	b25b      	sxtb	r3, r3
 8001634:	4313      	orrs	r3, r2
 8001636:	b25b      	sxtb	r3, r3
 8001638:	f887 3020 	strb.w	r3, [r7, #32]
      t.frac = (uint8_t) ((((sp->temp_lsb & 0x0F)) * 10) >> 4);//дробная
 800163c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800163e:	7a1b      	ldrb	r3, [r3, #8]
 8001640:	f003 020f 	and.w	r2, r3, #15
 8001644:	4613      	mov	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	4413      	add	r3, r2
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	111b      	asrs	r3, r3, #4
 800164e:	b2db      	uxtb	r3, r3
 8001650:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
      break;
 8001654:	e01c      	b.n	8001690 <readTemperature+0xae>
    case DS18S20:
      owReadScratchpadCmd(ow, rom, pad);//читаем память  для DS18S20
 8001656:	f107 0314 	add.w	r3, r7, #20
 800165a:	461a      	mov	r2, r3
 800165c:	68b9      	ldr	r1, [r7, #8]
 800165e:	68f8      	ldr	r0, [r7, #12]
 8001660:	f7ff ff55 	bl	800150e <owReadScratchpadCmd>
      t.inCelsus = spP->temp_lsb >> 1;
 8001664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001666:	7a1b      	ldrb	r3, [r3, #8]
 8001668:	085b      	lsrs	r3, r3, #1
 800166a:	b2db      	uxtb	r3, r3
 800166c:	b25b      	sxtb	r3, r3
 800166e:	f887 3020 	strb.w	r3, [r7, #32]
      t.frac = (uint8_t) 5 * (spP->temp_lsb & 0x01);
 8001672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001674:	7a1b      	ldrb	r3, [r3, #8]
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	b2db      	uxtb	r3, r3
 800167c:	461a      	mov	r2, r3
 800167e:	0092      	lsls	r2, r2, #2
 8001680:	4413      	add	r3, r2
 8001682:	b2db      	uxtb	r3, r3
 8001684:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
      break;
 8001688:	e002      	b.n	8001690 <readTemperature+0xae>
    default:
      return t;
 800168a:	8c3b      	ldrh	r3, [r7, #32]
 800168c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800168e:	e008      	b.n	80016a2 <readTemperature+0xc0>
  }
  if (reSense) {
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d003      	beq.n	800169e <readTemperature+0xbc>
    owConvertTemperatureCmd(ow, rom);//можно сразу после как забрали данные отдаем датчику команду на преобразования температуры
 8001696:	68b9      	ldr	r1, [r7, #8]
 8001698:	68f8      	ldr	r0, [r7, #12]
 800169a:	f7ff ff29 	bl	80014f0 <owConvertTemperatureCmd>
  }
  return t;
 800169e:	8c3b      	ldrh	r3, [r7, #32]
 80016a0:	84bb      	strh	r3, [r7, #36]	@ 0x24
}
 80016a2:	2300      	movs	r3, #0
 80016a4:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80016a8:	f362 0307 	bfi	r3, r2, #0, #8
 80016ac:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80016b0:	f362 230f 	bfi	r3, r2, #8, #8
 80016b4:	4618      	mov	r0, r3
 80016b6:	3730      	adds	r7, #48	@ 0x30
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <get_ROMid>:
  owMatchRomCmd(rom);
  owSendByte(ONEWIRE_RECALL_E2);
}


int get_ROMid (void){
 80016bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016be:	b089      	sub	sp, #36	@ 0x24
 80016c0:	af06      	add	r7, sp, #24
	if (owResetCmd() != ONEWIRE_NOBODY) {    // is anybody on the bus?
 80016c2:	f7ff fd07 	bl	80010d4 <owResetCmd>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2bf0      	cmp	r3, #240	@ 0xf0
 80016ca:	d079      	beq.n	80017c0 <get_ROMid+0x104>
		devices = owSearchCmd(&ow);        // получить ROMid в�?ех у�?трой�?т на шине или вернуть код ошибки
 80016cc:	484e      	ldr	r0, [pc, #312]	@ (8001808 <get_ROMid+0x14c>)
 80016ce:	f7ff fecb 	bl	8001468 <owSearchCmd>
 80016d2:	4603      	mov	r3, r0
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	4b4d      	ldr	r3, [pc, #308]	@ (800180c <get_ROMid+0x150>)
 80016d8:	701a      	strb	r2, [r3, #0]
		if (devices <= 0) {
 80016da:	4b4c      	ldr	r3, [pc, #304]	@ (800180c <get_ROMid+0x150>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d113      	bne.n	800170a <get_ROMid+0x4e>
			while (1){
				pDelay = 1000000;
 80016e2:	4b4b      	ldr	r3, [pc, #300]	@ (8001810 <get_ROMid+0x154>)
 80016e4:	4a4b      	ldr	r2, [pc, #300]	@ (8001814 <get_ROMid+0x158>)
 80016e6:	601a      	str	r2, [r3, #0]
				for (i = 0; i < pDelay * 1; i++)    /* Wait a bit. */
 80016e8:	4b4b      	ldr	r3, [pc, #300]	@ (8001818 <get_ROMid+0x15c>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	e005      	b.n	80016fc <get_ROMid+0x40>
					__asm__("nop");
 80016f0:	bf00      	nop
				for (i = 0; i < pDelay * 1; i++)    /* Wait a bit. */
 80016f2:	4b49      	ldr	r3, [pc, #292]	@ (8001818 <get_ROMid+0x15c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	3301      	adds	r3, #1
 80016f8:	4a47      	ldr	r2, [pc, #284]	@ (8001818 <get_ROMid+0x15c>)
 80016fa:	6013      	str	r3, [r2, #0]
 80016fc:	4b46      	ldr	r3, [pc, #280]	@ (8001818 <get_ROMid+0x15c>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b43      	ldr	r3, [pc, #268]	@ (8001810 <get_ROMid+0x154>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	429a      	cmp	r2, r3
 8001706:	d3f3      	bcc.n	80016f0 <get_ROMid+0x34>
				pDelay = 1000000;
 8001708:	e7eb      	b.n	80016e2 <get_ROMid+0x26>
			}

		}
		i = 0;
 800170a:	4b43      	ldr	r3, [pc, #268]	@ (8001818 <get_ROMid+0x15c>)
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
		for (; i < devices; i++) {//выводим в кон�?оль в�?е найденные ROM
 8001710:	e04f      	b.n	80017b2 <get_ROMid+0xf6>
			RomCode *r = &ow.ids[i];
 8001712:	4b41      	ldr	r3, [pc, #260]	@ (8001818 <get_ROMid+0x15c>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	4a3b      	ldr	r2, [pc, #236]	@ (8001808 <get_ROMid+0x14c>)
 800171a:	4413      	add	r3, r2
 800171c:	607b      	str	r3, [r7, #4]
			uint8_t crc = owCRC8(r);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff fde6 	bl	80012f0 <owCRC8>
 8001724:	4603      	mov	r3, r0
 8001726:	70fb      	strb	r3, [r7, #3]
			crcOK = (crc == r->crc)?"CRC OK":"CRC ERROR!";
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	79db      	ldrb	r3, [r3, #7]
 800172c:	78fa      	ldrb	r2, [r7, #3]
 800172e:	429a      	cmp	r2, r3
 8001730:	d101      	bne.n	8001736 <get_ROMid+0x7a>
 8001732:	4b3a      	ldr	r3, [pc, #232]	@ (800181c <get_ROMid+0x160>)
 8001734:	e000      	b.n	8001738 <get_ROMid+0x7c>
 8001736:	4b3a      	ldr	r3, [pc, #232]	@ (8001820 <get_ROMid+0x164>)
 8001738:	4a3a      	ldr	r2, [pc, #232]	@ (8001824 <get_ROMid+0x168>)
 800173a:	6013      	str	r3, [r2, #0]
			devInfo.device = i;
 800173c:	4b36      	ldr	r3, [pc, #216]	@ (8001818 <get_ROMid+0x15c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	461a      	mov	r2, r3
 8001742:	4b39      	ldr	r3, [pc, #228]	@ (8001828 <get_ROMid+0x16c>)
 8001744:	601a      	str	r2, [r3, #0]

			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	461e      	mov	r6, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	799b      	ldrb	r3, [r3, #6]
 8001750:	469c      	mov	ip, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	795b      	ldrb	r3, [r3, #5]
 8001756:	461a      	mov	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	791b      	ldrb	r3, [r3, #4]
 800175c:	4619      	mov	r1, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	78db      	ldrb	r3, [r3, #3]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 8001762:	4618      	mov	r0, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	789b      	ldrb	r3, [r3, #2]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 8001768:	461c      	mov	r4, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	785b      	ldrb	r3, [r3, #1]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 800176e:	461d      	mov	r5, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	79db      	ldrb	r3, [r3, #7]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 8001774:	9305      	str	r3, [sp, #20]
 8001776:	9504      	str	r5, [sp, #16]
 8001778:	9403      	str	r4, [sp, #12]
 800177a:	9002      	str	r0, [sp, #8]
 800177c:	9101      	str	r1, [sp, #4]
 800177e:	9200      	str	r2, [sp, #0]
 8001780:	4663      	mov	r3, ip
 8001782:	4632      	mov	r2, r6
 8001784:	4929      	ldr	r1, [pc, #164]	@ (800182c <get_ROMid+0x170>)
 8001786:	482a      	ldr	r0, [pc, #168]	@ (8001830 <get_ROMid+0x174>)
 8001788:	f005 fd80 	bl	800728c <siprintf>

			if (crc != r->crc) {
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	79db      	ldrb	r3, [r3, #7]
 8001790:	78fa      	ldrb	r2, [r7, #3]
 8001792:	429a      	cmp	r2, r3
 8001794:	d008      	beq.n	80017a8 <get_ROMid+0xec>
				devInfo.device = i;
 8001796:	4b20      	ldr	r3, [pc, #128]	@ (8001818 <get_ROMid+0x15c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	461a      	mov	r2, r3
 800179c:	4b22      	ldr	r3, [pc, #136]	@ (8001828 <get_ROMid+0x16c>)
 800179e:	601a      	str	r2, [r3, #0]
				sprintf (devInfo.info,"\n can't read cause CNC error");
 80017a0:	4924      	ldr	r1, [pc, #144]	@ (8001834 <get_ROMid+0x178>)
 80017a2:	4823      	ldr	r0, [pc, #140]	@ (8001830 <get_ROMid+0x174>)
 80017a4:	f005 fd72 	bl	800728c <siprintf>
		for (; i < devices; i++) {//выводим в кон�?оль в�?е найденные ROM
 80017a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001818 <get_ROMid+0x15c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	3301      	adds	r3, #1
 80017ae:	4a1a      	ldr	r2, [pc, #104]	@ (8001818 <get_ROMid+0x15c>)
 80017b0:	6013      	str	r3, [r2, #0]
 80017b2:	4b16      	ldr	r3, [pc, #88]	@ (800180c <get_ROMid+0x150>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	461a      	mov	r2, r3
 80017b8:	4b17      	ldr	r3, [pc, #92]	@ (8001818 <get_ROMid+0x15c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d8a8      	bhi.n	8001712 <get_ROMid+0x56>
			}
		}

	}
	pDelay = 1000000;
 80017c0:	4b13      	ldr	r3, [pc, #76]	@ (8001810 <get_ROMid+0x154>)
 80017c2:	4a14      	ldr	r2, [pc, #80]	@ (8001814 <get_ROMid+0x158>)
 80017c4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < pDelay * 1; i++)
 80017c6:	4b14      	ldr	r3, [pc, #80]	@ (8001818 <get_ROMid+0x15c>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	e005      	b.n	80017da <get_ROMid+0x11e>
		__asm__("nop");
 80017ce:	bf00      	nop
	for (i = 0; i < pDelay * 1; i++)
 80017d0:	4b11      	ldr	r3, [pc, #68]	@ (8001818 <get_ROMid+0x15c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	3301      	adds	r3, #1
 80017d6:	4a10      	ldr	r2, [pc, #64]	@ (8001818 <get_ROMid+0x15c>)
 80017d8:	6013      	str	r3, [r2, #0]
 80017da:	4b0f      	ldr	r3, [pc, #60]	@ (8001818 <get_ROMid+0x15c>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	4b0c      	ldr	r3, [pc, #48]	@ (8001810 <get_ROMid+0x154>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d3f3      	bcc.n	80017ce <get_ROMid+0x112>

	if (strcmp(crcOK,"CRC OK") == 0) return 0;
 80017e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001824 <get_ROMid+0x168>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	490c      	ldr	r1, [pc, #48]	@ (800181c <get_ROMid+0x160>)
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7fe fd0f 	bl	8000210 <strcmp>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d101      	bne.n	80017fc <get_ROMid+0x140>
 80017f8:	2300      	movs	r3, #0
 80017fa:	e001      	b.n	8001800 <get_ROMid+0x144>
	else return -1;
 80017fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001800:	4618      	mov	r0, r3
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001808:	20000214 	.word	0x20000214
 800180c:	20000210 	.word	0x20000210
 8001810:	20000000 	.word	0x20000000
 8001814:	000f4240 	.word	0x000f4240
 8001818:	20000228 	.word	0x20000228
 800181c:	08009500 	.word	0x08009500
 8001820:	08009508 	.word	0x08009508
 8001824:	20000254 	.word	0x20000254
 8001828:	20000230 	.word	0x20000230
 800182c:	08009514 	.word	0x08009514
 8001830:	20000234 	.word	0x20000234
 8001834:	0800953c 	.word	0x0800953c

08001838 <get_Temperature>:

void get_Temperature (void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
	i=0;
 800183c:	4b3a      	ldr	r3, [pc, #232]	@ (8001928 <get_Temperature+0xf0>)
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
	for (; i < devices; i++) {
 8001842:	e067      	b.n	8001914 <get_Temperature+0xdc>
		switch ((ow.ids[i]).family) {//че у нас за датчик
 8001844:	4b38      	ldr	r3, [pc, #224]	@ (8001928 <get_Temperature+0xf0>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a38      	ldr	r2, [pc, #224]	@ (800192c <get_Temperature+0xf4>)
 800184a:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800184e:	2b28      	cmp	r3, #40	@ 0x28
 8001850:	d006      	beq.n	8001860 <get_Temperature+0x28>
 8001852:	2b28      	cmp	r3, #40	@ 0x28
 8001854:	dc56      	bgt.n	8001904 <get_Temperature+0xcc>
 8001856:	2b00      	cmp	r3, #0
 8001858:	d056      	beq.n	8001908 <get_Temperature+0xd0>
 800185a:	2b10      	cmp	r3, #16
 800185c:	d029      	beq.n	80018b2 <get_Temperature+0x7a>
			break;
		case 0x00:
			break;
		default:
			// error handler
			break;
 800185e:	e051      	b.n	8001904 <get_Temperature+0xcc>
			t = readTemperature(&ow, &ow.ids[i], 1);
 8001860:	4b31      	ldr	r3, [pc, #196]	@ (8001928 <get_Temperature+0xf0>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	4a31      	ldr	r2, [pc, #196]	@ (800192c <get_Temperature+0xf4>)
 8001868:	4413      	add	r3, r2
 800186a:	2201      	movs	r2, #1
 800186c:	4619      	mov	r1, r3
 800186e:	482f      	ldr	r0, [pc, #188]	@ (800192c <get_Temperature+0xf4>)
 8001870:	f7ff feb7 	bl	80015e2 <readTemperature>
 8001874:	4603      	mov	r3, r0
 8001876:	4a2e      	ldr	r2, [pc, #184]	@ (8001930 <get_Temperature+0xf8>)
 8001878:	8013      	strh	r3, [r2, #0]
			Temp[i] = (float)(t.inCelsus*10+t.frac)/10.0;
 800187a:	4b2d      	ldr	r3, [pc, #180]	@ (8001930 <get_Temperature+0xf8>)
 800187c:	f993 3000 	ldrsb.w	r3, [r3]
 8001880:	461a      	mov	r2, r3
 8001882:	4613      	mov	r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	4413      	add	r3, r2
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	461a      	mov	r2, r3
 800188c:	4b28      	ldr	r3, [pc, #160]	@ (8001930 <get_Temperature+0xf8>)
 800188e:	785b      	ldrb	r3, [r3, #1]
 8001890:	4413      	add	r3, r2
 8001892:	ee07 3a90 	vmov	s15, r3
 8001896:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800189a:	4b23      	ldr	r3, [pc, #140]	@ (8001928 <get_Temperature+0xf0>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80018a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018a6:	4a23      	ldr	r2, [pc, #140]	@ (8001934 <get_Temperature+0xfc>)
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	4413      	add	r3, r2
 80018ac:	edc3 7a00 	vstr	s15, [r3]
			break;
 80018b0:	e02b      	b.n	800190a <get_Temperature+0xd2>
			t = readTemperature(&ow, &ow.ids[i], 1);
 80018b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001928 <get_Temperature+0xf0>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	4a1c      	ldr	r2, [pc, #112]	@ (800192c <get_Temperature+0xf4>)
 80018ba:	4413      	add	r3, r2
 80018bc:	2201      	movs	r2, #1
 80018be:	4619      	mov	r1, r3
 80018c0:	481a      	ldr	r0, [pc, #104]	@ (800192c <get_Temperature+0xf4>)
 80018c2:	f7ff fe8e 	bl	80015e2 <readTemperature>
 80018c6:	4603      	mov	r3, r0
 80018c8:	4a19      	ldr	r2, [pc, #100]	@ (8001930 <get_Temperature+0xf8>)
 80018ca:	8013      	strh	r3, [r2, #0]
			Temp[i] = (float)(t.inCelsus*10+t.frac)/10.0;
 80018cc:	4b18      	ldr	r3, [pc, #96]	@ (8001930 <get_Temperature+0xf8>)
 80018ce:	f993 3000 	ldrsb.w	r3, [r3]
 80018d2:	461a      	mov	r2, r3
 80018d4:	4613      	mov	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4413      	add	r3, r2
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	461a      	mov	r2, r3
 80018de:	4b14      	ldr	r3, [pc, #80]	@ (8001930 <get_Temperature+0xf8>)
 80018e0:	785b      	ldrb	r3, [r3, #1]
 80018e2:	4413      	add	r3, r2
 80018e4:	ee07 3a90 	vmov	s15, r3
 80018e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001928 <get_Temperature+0xf0>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80018f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018f8:	4a0e      	ldr	r2, [pc, #56]	@ (8001934 <get_Temperature+0xfc>)
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4413      	add	r3, r2
 80018fe:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001902:	e002      	b.n	800190a <get_Temperature+0xd2>
			break;
 8001904:	bf00      	nop
 8001906:	e000      	b.n	800190a <get_Temperature+0xd2>
			break;
 8001908:	bf00      	nop
	for (; i < devices; i++) {
 800190a:	4b07      	ldr	r3, [pc, #28]	@ (8001928 <get_Temperature+0xf0>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	3301      	adds	r3, #1
 8001910:	4a05      	ldr	r2, [pc, #20]	@ (8001928 <get_Temperature+0xf0>)
 8001912:	6013      	str	r3, [r2, #0]
 8001914:	4b08      	ldr	r3, [pc, #32]	@ (8001938 <get_Temperature+0x100>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	461a      	mov	r2, r3
 800191a:	4b03      	ldr	r3, [pc, #12]	@ (8001928 <get_Temperature+0xf0>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	429a      	cmp	r2, r3
 8001920:	d890      	bhi.n	8001844 <get_Temperature+0xc>
		}
	}
//	pDelay = 4000000;
//	for (i = 0; i < pDelay * 1; i++){}   /* Wait a bit. */
}
 8001922:	bf00      	nop
 8001924:	bf00      	nop
 8001926:	bd80      	pop	{r7, pc}
 8001928:	20000228 	.word	0x20000228
 800192c:	20000214 	.word	0x20000214
 8001930:	2000022c 	.word	0x2000022c
 8001934:	2000020c 	.word	0x2000020c
 8001938:	20000210 	.word	0x20000210

0800193c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001940:	f000 ff14 	bl	800276c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001944:	f000 f8ae 	bl	8001aa4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001948:	f000 fa16 	bl	8001d78 <MX_GPIO_Init>
  MX_DMA_Init();
 800194c:	f000 f9f4 	bl	8001d38 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001950:	f000 f9c8 	bl	8001ce4 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8001954:	f000 f914 	bl	8001b80 <MX_CAN1_Init>
  MX_TIM2_Init();
 8001958:	f000 f948 	bl	8001bec <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800195c:	f000 f998 	bl	8001c90 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  filter_config();
 8001960:	f000 faa0 	bl	8001ea4 <filter_config>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_BUSOFF | CAN_IT_RX_FIFO0_MSG_PENDING);
 8001964:	f240 4102 	movw	r1, #1026	@ 0x402
 8001968:	4842      	ldr	r0, [pc, #264]	@ (8001a74 <main+0x138>)
 800196a:	f001 fba7 	bl	80030bc <HAL_CAN_ActivateNotification>

  if(HAL_CAN_Start(&hcan1) != HAL_OK){
 800196e:	4841      	ldr	r0, [pc, #260]	@ (8001a74 <main+0x138>)
 8001970:	f001 f96e 	bl	8002c50 <HAL_CAN_Start>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <main+0x42>
	  Error_Handler();
 800197a:	f000 fbc5 	bl	8002108 <Error_Handler>
  }
  if(HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1) != HAL_OK){
 800197e:	2100      	movs	r1, #0
 8001980:	483d      	ldr	r0, [pc, #244]	@ (8001a78 <main+0x13c>)
 8001982:	f003 fa8b 	bl	8004e9c <HAL_TIM_IC_Start_IT>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <main+0x54>
  	  Error_Handler();
 800198c:	f000 fbbc 	bl	8002108 <Error_Handler>
    }
  get_ROMid();
 8001990:	f7ff fe94 	bl	80016bc <get_ROMid>
  txData[0] = 0;
 8001994:	4b39      	ldr	r3, [pc, #228]	@ (8001a7c <main+0x140>)
 8001996:	2200      	movs	r2, #0
 8001998:	701a      	strb	r2, [r3, #0]
  txData[1] = 0;
 800199a:	4b38      	ldr	r3, [pc, #224]	@ (8001a7c <main+0x140>)
 800199c:	2200      	movs	r2, #0
 800199e:	705a      	strb	r2, [r3, #1]
  timer2_cnt_freq = (HAL_RCC_GetPCLK1Freq()*2)/ (htim2.Init.Prescaler+1);
 80019a0:	f002 fd36 	bl	8004410 <HAL_RCC_GetPCLK1Freq>
 80019a4:	4603      	mov	r3, r0
 80019a6:	005a      	lsls	r2, r3, #1
 80019a8:	4b33      	ldr	r3, [pc, #204]	@ (8001a78 <main+0x13c>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	3301      	adds	r3, #1
 80019ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7fe fdd6 	bl	8000564 <__aeabi_ui2d>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	4930      	ldr	r1, [pc, #192]	@ (8001a80 <main+0x144>)
 80019be:	e9c1 2300 	strd	r2, r3, [r1]
  timer2_cnt_res = 1/ timer2_cnt_freq;
 80019c2:	4b2f      	ldr	r3, [pc, #188]	@ (8001a80 <main+0x144>)
 80019c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c8:	f04f 0000 	mov.w	r0, #0
 80019cc:	492d      	ldr	r1, [pc, #180]	@ (8001a84 <main+0x148>)
 80019ce:	f7fe ff6d 	bl	80008ac <__aeabi_ddiv>
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	492c      	ldr	r1, [pc, #176]	@ (8001a88 <main+0x14c>)
 80019d8:	e9c1 2300 	strd	r2, r3, [r1]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  get_Temperature();
 80019dc:	f7ff ff2c 	bl	8001838 <get_Temperature>
	  if(is_capture_done == 1){
 80019e0:	4b2a      	ldr	r3, [pc, #168]	@ (8001a8c <main+0x150>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d1f9      	bne.n	80019dc <main+0xa0>
	  			 if(input_captures[1] > input_captures[0]){
 80019e8:	4b29      	ldr	r3, [pc, #164]	@ (8001a90 <main+0x154>)
 80019ea:	685a      	ldr	r2, [r3, #4]
 80019ec:	4b28      	ldr	r3, [pc, #160]	@ (8001a90 <main+0x154>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d907      	bls.n	8001a04 <main+0xc8>
	  			  	capture_difference = input_captures[1] - input_captures[0];
 80019f4:	4b26      	ldr	r3, [pc, #152]	@ (8001a90 <main+0x154>)
 80019f6:	685a      	ldr	r2, [r3, #4]
 80019f8:	4b25      	ldr	r3, [pc, #148]	@ (8001a90 <main+0x154>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	4a25      	ldr	r2, [pc, #148]	@ (8001a94 <main+0x158>)
 8001a00:	6013      	str	r3, [r2, #0]
 8001a02:	e009      	b.n	8001a18 <main+0xdc>
	  			 }else{
	  			  	 capture_difference = (0XFFFF - input_captures[0]) + input_captures[1];
 8001a04:	4b22      	ldr	r3, [pc, #136]	@ (8001a90 <main+0x154>)
 8001a06:	685a      	ldr	r2, [r3, #4]
 8001a08:	4b21      	ldr	r3, [pc, #132]	@ (8001a90 <main+0x154>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001a12:	33ff      	adds	r3, #255	@ 0xff
 8001a14:	4a1f      	ldr	r2, [pc, #124]	@ (8001a94 <main+0x158>)
 8001a16:	6013      	str	r3, [r2, #0]
	  			 }
	  			 user_signal_time_period = capture_difference * timer2_cnt_res;
 8001a18:	4b1e      	ldr	r3, [pc, #120]	@ (8001a94 <main+0x158>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7fe fda1 	bl	8000564 <__aeabi_ui2d>
 8001a22:	4b19      	ldr	r3, [pc, #100]	@ (8001a88 <main+0x14c>)
 8001a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a28:	f7fe fe16 	bl	8000658 <__aeabi_dmul>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	4919      	ldr	r1, [pc, #100]	@ (8001a98 <main+0x15c>)
 8001a32:	e9c1 2300 	strd	r2, r3, [r1]
	  			 user_signal_freq = 1/user_signal_time_period;
 8001a36:	4b18      	ldr	r3, [pc, #96]	@ (8001a98 <main+0x15c>)
 8001a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3c:	f04f 0000 	mov.w	r0, #0
 8001a40:	4910      	ldr	r1, [pc, #64]	@ (8001a84 <main+0x148>)
 8001a42:	f7fe ff33 	bl	80008ac <__aeabi_ddiv>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	4610      	mov	r0, r2
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	f7ff f8db 	bl	8000c08 <__aeabi_d2uiz>
 8001a52:	4603      	mov	r3, r0
 8001a54:	4a11      	ldr	r2, [pc, #68]	@ (8001a9c <main+0x160>)
 8001a56:	6013      	str	r3, [r2, #0]
//	  		//    	  			  	  	  user_signal_freq /=1000;
	  			rpm = user_signal_freq * 60;
 8001a58:	4b10      	ldr	r3, [pc, #64]	@ (8001a9c <main+0x160>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	011b      	lsls	r3, r3, #4
 8001a60:	1a9b      	subs	r3, r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	461a      	mov	r2, r3
 8001a66:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa0 <main+0x164>)
 8001a68:	601a      	str	r2, [r3, #0]


//
	  			 is_capture_done =0;
 8001a6a:	4b08      	ldr	r3, [pc, #32]	@ (8001a8c <main+0x150>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	701a      	strb	r2, [r3, #0]
	  get_Temperature();
 8001a70:	e7b4      	b.n	80019dc <main+0xa0>
 8001a72:	bf00      	nop
 8001a74:	20000258 	.word	0x20000258
 8001a78:	20000280 	.word	0x20000280
 8001a7c:	200003ec 	.word	0x200003ec
 8001a80:	200003c8 	.word	0x200003c8
 8001a84:	3ff00000 	.word	0x3ff00000
 8001a88:	200003d0 	.word	0x200003d0
 8001a8c:	200003c0 	.word	0x200003c0
 8001a90:	200003b8 	.word	0x200003b8
 8001a94:	200003c4 	.word	0x200003c4
 8001a98:	200003d8 	.word	0x200003d8
 8001a9c:	200003e0 	.word	0x200003e0
 8001aa0:	200003e4 	.word	0x200003e4

08001aa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b094      	sub	sp, #80	@ 0x50
 8001aa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aaa:	f107 031c 	add.w	r3, r7, #28
 8001aae:	2234      	movs	r2, #52	@ 0x34
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f005 fc4d 	bl	8007352 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ab8:	f107 0308 	add.w	r3, r7, #8
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ac8:	2300      	movs	r3, #0
 8001aca:	607b      	str	r3, [r7, #4]
 8001acc:	4b2a      	ldr	r3, [pc, #168]	@ (8001b78 <SystemClock_Config+0xd4>)
 8001ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad0:	4a29      	ldr	r2, [pc, #164]	@ (8001b78 <SystemClock_Config+0xd4>)
 8001ad2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ad6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ad8:	4b27      	ldr	r3, [pc, #156]	@ (8001b78 <SystemClock_Config+0xd4>)
 8001ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001adc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ae0:	607b      	str	r3, [r7, #4]
 8001ae2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	603b      	str	r3, [r7, #0]
 8001ae8:	4b24      	ldr	r3, [pc, #144]	@ (8001b7c <SystemClock_Config+0xd8>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001af0:	4a22      	ldr	r2, [pc, #136]	@ (8001b7c <SystemClock_Config+0xd8>)
 8001af2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001af6:	6013      	str	r3, [r2, #0]
 8001af8:	4b20      	ldr	r3, [pc, #128]	@ (8001b7c <SystemClock_Config+0xd8>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001b00:	603b      	str	r3, [r7, #0]
 8001b02:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b04:	2302      	movs	r3, #2
 8001b06:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b0c:	2310      	movs	r3, #16
 8001b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b10:	2302      	movs	r3, #2
 8001b12:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b14:	2300      	movs	r3, #0
 8001b16:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b18:	2308      	movs	r3, #8
 8001b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001b1c:	2354      	movs	r3, #84	@ 0x54
 8001b1e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b20:	2302      	movs	r3, #2
 8001b22:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001b24:	2302      	movs	r3, #2
 8001b26:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b2c:	f107 031c 	add.w	r3, r7, #28
 8001b30:	4618      	mov	r0, r3
 8001b32:	f002 fec5 	bl	80048c0 <HAL_RCC_OscConfig>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001b3c:	f000 fae4 	bl	8002108 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b40:	230f      	movs	r3, #15
 8001b42:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b44:	2302      	movs	r3, #2
 8001b46:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b50:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b56:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b58:	f107 0308 	add.w	r3, r7, #8
 8001b5c:	2102      	movs	r1, #2
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f002 fb64 	bl	800422c <HAL_RCC_ClockConfig>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001b6a:	f000 facd 	bl	8002108 <Error_Handler>
  }
}
 8001b6e:	bf00      	nop
 8001b70:	3750      	adds	r7, #80	@ 0x50
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40007000 	.word	0x40007000

08001b80 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001b84:	4b17      	ldr	r3, [pc, #92]	@ (8001be4 <MX_CAN1_Init+0x64>)
 8001b86:	4a18      	ldr	r2, [pc, #96]	@ (8001be8 <MX_CAN1_Init+0x68>)
 8001b88:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 8001b8a:	4b16      	ldr	r3, [pc, #88]	@ (8001be4 <MX_CAN1_Init+0x64>)
 8001b8c:	220c      	movs	r2, #12
 8001b8e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001b90:	4b14      	ldr	r3, [pc, #80]	@ (8001be4 <MX_CAN1_Init+0x64>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001b96:	4b13      	ldr	r3, [pc, #76]	@ (8001be4 <MX_CAN1_Init+0x64>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8001b9c:	4b11      	ldr	r3, [pc, #68]	@ (8001be4 <MX_CAN1_Init+0x64>)
 8001b9e:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8001ba2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8001be4 <MX_CAN1_Init+0x64>)
 8001ba6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001baa:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001bac:	4b0d      	ldr	r3, [pc, #52]	@ (8001be4 <MX_CAN1_Init+0x64>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8001bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8001be4 <MX_CAN1_Init+0x64>)
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001bb8:	4b0a      	ldr	r3, [pc, #40]	@ (8001be4 <MX_CAN1_Init+0x64>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001bbe:	4b09      	ldr	r3, [pc, #36]	@ (8001be4 <MX_CAN1_Init+0x64>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001bc4:	4b07      	ldr	r3, [pc, #28]	@ (8001be4 <MX_CAN1_Init+0x64>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001bca:	4b06      	ldr	r3, [pc, #24]	@ (8001be4 <MX_CAN1_Init+0x64>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001bd0:	4804      	ldr	r0, [pc, #16]	@ (8001be4 <MX_CAN1_Init+0x64>)
 8001bd2:	f000 fe61 	bl	8002898 <HAL_CAN_Init>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001bdc:	f000 fa94 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001be0:	bf00      	nop
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	20000258 	.word	0x20000258
 8001be8:	40006400 	.word	0x40006400

08001bec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bf2:	f107 0310 	add.w	r3, r7, #16
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001bfc:	463b      	mov	r3, r7
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	605a      	str	r2, [r3, #4]
 8001c04:	609a      	str	r2, [r3, #8]
 8001c06:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c08:	4b20      	ldr	r3, [pc, #128]	@ (8001c8c <MX_TIM2_Init+0xa0>)
 8001c0a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c0e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8001c10:	4b1e      	ldr	r3, [pc, #120]	@ (8001c8c <MX_TIM2_Init+0xa0>)
 8001c12:	2253      	movs	r2, #83	@ 0x53
 8001c14:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c16:	4b1d      	ldr	r3, [pc, #116]	@ (8001c8c <MX_TIM2_Init+0xa0>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295-1;
 8001c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001c8c <MX_TIM2_Init+0xa0>)
 8001c1e:	f06f 0201 	mvn.w	r2, #1
 8001c22:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c24:	4b19      	ldr	r3, [pc, #100]	@ (8001c8c <MX_TIM2_Init+0xa0>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c2a:	4b18      	ldr	r3, [pc, #96]	@ (8001c8c <MX_TIM2_Init+0xa0>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001c30:	4816      	ldr	r0, [pc, #88]	@ (8001c8c <MX_TIM2_Init+0xa0>)
 8001c32:	f003 f8e3 	bl	8004dfc <HAL_TIM_IC_Init>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001c3c:	f000 fa64 	bl	8002108 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c40:	2300      	movs	r3, #0
 8001c42:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c48:	f107 0310 	add.w	r3, r7, #16
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	480f      	ldr	r0, [pc, #60]	@ (8001c8c <MX_TIM2_Init+0xa0>)
 8001c50:	f003 fdfc 	bl	800584c <HAL_TIMEx_MasterConfigSynchronization>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001c5a:	f000 fa55 	bl	8002108 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001c62:	2301      	movs	r3, #1
 8001c64:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001c66:	2300      	movs	r3, #0
 8001c68:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001c6e:	463b      	mov	r3, r7
 8001c70:	2200      	movs	r2, #0
 8001c72:	4619      	mov	r1, r3
 8001c74:	4805      	ldr	r0, [pc, #20]	@ (8001c8c <MX_TIM2_Init+0xa0>)
 8001c76:	f003 fb29 	bl	80052cc <HAL_TIM_IC_ConfigChannel>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001c80:	f000 fa42 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c84:	bf00      	nop
 8001c86:	3718      	adds	r7, #24
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	20000280 	.word	0x20000280

08001c90 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c94:	4b11      	ldr	r3, [pc, #68]	@ (8001cdc <MX_USART1_UART_Init+0x4c>)
 8001c96:	4a12      	ldr	r2, [pc, #72]	@ (8001ce0 <MX_USART1_UART_Init+0x50>)
 8001c98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c9a:	4b10      	ldr	r3, [pc, #64]	@ (8001cdc <MX_USART1_UART_Init+0x4c>)
 8001c9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ca0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8001cdc <MX_USART1_UART_Init+0x4c>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8001cdc <MX_USART1_UART_Init+0x4c>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cae:	4b0b      	ldr	r3, [pc, #44]	@ (8001cdc <MX_USART1_UART_Init+0x4c>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cb4:	4b09      	ldr	r3, [pc, #36]	@ (8001cdc <MX_USART1_UART_Init+0x4c>)
 8001cb6:	220c      	movs	r2, #12
 8001cb8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cba:	4b08      	ldr	r3, [pc, #32]	@ (8001cdc <MX_USART1_UART_Init+0x4c>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cc0:	4b06      	ldr	r3, [pc, #24]	@ (8001cdc <MX_USART1_UART_Init+0x4c>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8001cc6:	4805      	ldr	r0, [pc, #20]	@ (8001cdc <MX_USART1_UART_Init+0x4c>)
 8001cc8:	f003 fea0 	bl	8005a0c <HAL_HalfDuplex_Init>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001cd2:	f000 fa19 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	200002c8 	.word	0x200002c8
 8001ce0:	40011000 	.word	0x40011000

08001ce4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ce8:	4b11      	ldr	r3, [pc, #68]	@ (8001d30 <MX_USART2_UART_Init+0x4c>)
 8001cea:	4a12      	ldr	r2, [pc, #72]	@ (8001d34 <MX_USART2_UART_Init+0x50>)
 8001cec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cee:	4b10      	ldr	r3, [pc, #64]	@ (8001d30 <MX_USART2_UART_Init+0x4c>)
 8001cf0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001cf4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8001d30 <MX_USART2_UART_Init+0x4c>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8001d30 <MX_USART2_UART_Init+0x4c>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d02:	4b0b      	ldr	r3, [pc, #44]	@ (8001d30 <MX_USART2_UART_Init+0x4c>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d08:	4b09      	ldr	r3, [pc, #36]	@ (8001d30 <MX_USART2_UART_Init+0x4c>)
 8001d0a:	220c      	movs	r2, #12
 8001d0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d0e:	4b08      	ldr	r3, [pc, #32]	@ (8001d30 <MX_USART2_UART_Init+0x4c>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d14:	4b06      	ldr	r3, [pc, #24]	@ (8001d30 <MX_USART2_UART_Init+0x4c>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d1a:	4805      	ldr	r0, [pc, #20]	@ (8001d30 <MX_USART2_UART_Init+0x4c>)
 8001d1c:	f003 fe26 	bl	800596c <HAL_UART_Init>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d26:	f000 f9ef 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20000310 	.word	0x20000310
 8001d34:	40004400 	.word	0x40004400

08001d38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	607b      	str	r3, [r7, #4]
 8001d42:	4b0c      	ldr	r3, [pc, #48]	@ (8001d74 <MX_DMA_Init+0x3c>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d46:	4a0b      	ldr	r2, [pc, #44]	@ (8001d74 <MX_DMA_Init+0x3c>)
 8001d48:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d4e:	4b09      	ldr	r3, [pc, #36]	@ (8001d74 <MX_DMA_Init+0x3c>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d56:	607b      	str	r3, [r7, #4]
 8001d58:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	2011      	movs	r0, #17
 8001d60:	f001 fcdd 	bl	800371e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001d64:	2011      	movs	r0, #17
 8001d66:	f001 fcf6 	bl	8003756 <HAL_NVIC_EnableIRQ>

}
 8001d6a:	bf00      	nop
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40023800 	.word	0x40023800

08001d78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08a      	sub	sp, #40	@ 0x28
 8001d7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7e:	f107 0314 	add.w	r3, r7, #20
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	605a      	str	r2, [r3, #4]
 8001d88:	609a      	str	r2, [r3, #8]
 8001d8a:	60da      	str	r2, [r3, #12]
 8001d8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	4b40      	ldr	r3, [pc, #256]	@ (8001e94 <MX_GPIO_Init+0x11c>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d96:	4a3f      	ldr	r2, [pc, #252]	@ (8001e94 <MX_GPIO_Init+0x11c>)
 8001d98:	f043 0304 	orr.w	r3, r3, #4
 8001d9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d9e:	4b3d      	ldr	r3, [pc, #244]	@ (8001e94 <MX_GPIO_Init+0x11c>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da2:	f003 0304 	and.w	r3, r3, #4
 8001da6:	613b      	str	r3, [r7, #16]
 8001da8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	4b39      	ldr	r3, [pc, #228]	@ (8001e94 <MX_GPIO_Init+0x11c>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db2:	4a38      	ldr	r2, [pc, #224]	@ (8001e94 <MX_GPIO_Init+0x11c>)
 8001db4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001db8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dba:	4b36      	ldr	r3, [pc, #216]	@ (8001e94 <MX_GPIO_Init+0x11c>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60bb      	str	r3, [r7, #8]
 8001dca:	4b32      	ldr	r3, [pc, #200]	@ (8001e94 <MX_GPIO_Init+0x11c>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dce:	4a31      	ldr	r2, [pc, #196]	@ (8001e94 <MX_GPIO_Init+0x11c>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dd6:	4b2f      	ldr	r3, [pc, #188]	@ (8001e94 <MX_GPIO_Init+0x11c>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	607b      	str	r3, [r7, #4]
 8001de6:	4b2b      	ldr	r3, [pc, #172]	@ (8001e94 <MX_GPIO_Init+0x11c>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dea:	4a2a      	ldr	r2, [pc, #168]	@ (8001e94 <MX_GPIO_Init+0x11c>)
 8001dec:	f043 0302 	orr.w	r3, r3, #2
 8001df0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001df2:	4b28      	ldr	r3, [pc, #160]	@ (8001e94 <MX_GPIO_Init+0x11c>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	607b      	str	r3, [r7, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, led1_Pin|led2_Pin|led3_Pin, GPIO_PIN_RESET);
 8001dfe:	2200      	movs	r2, #0
 8001e00:	21e0      	movs	r1, #224	@ 0xe0
 8001e02:	4825      	ldr	r0, [pc, #148]	@ (8001e98 <MX_GPIO_Init+0x120>)
 8001e04:	f002 f9de 	bl	80041c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led5_GPIO_Port, led5_Pin, GPIO_PIN_RESET);
 8001e08:	2200      	movs	r2, #0
 8001e0a:	2180      	movs	r1, #128	@ 0x80
 8001e0c:	4823      	ldr	r0, [pc, #140]	@ (8001e9c <MX_GPIO_Init+0x124>)
 8001e0e:	f002 f9d9 	bl	80041c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_RESET);
 8001e12:	2200      	movs	r2, #0
 8001e14:	2140      	movs	r1, #64	@ 0x40
 8001e16:	4822      	ldr	r0, [pc, #136]	@ (8001ea0 <MX_GPIO_Init+0x128>)
 8001e18:	f002 f9d4 	bl	80041c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e22:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001e26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e2c:	f107 0314 	add.w	r3, r7, #20
 8001e30:	4619      	mov	r1, r3
 8001e32:	481a      	ldr	r0, [pc, #104]	@ (8001e9c <MX_GPIO_Init+0x124>)
 8001e34:	f002 f832 	bl	8003e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : led1_Pin led2_Pin led3_Pin */
  GPIO_InitStruct.Pin = led1_Pin|led2_Pin|led3_Pin;
 8001e38:	23e0      	movs	r3, #224	@ 0xe0
 8001e3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e44:	2300      	movs	r3, #0
 8001e46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e48:	f107 0314 	add.w	r3, r7, #20
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4812      	ldr	r0, [pc, #72]	@ (8001e98 <MX_GPIO_Init+0x120>)
 8001e50:	f002 f824 	bl	8003e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : led5_Pin */
  GPIO_InitStruct.Pin = led5_Pin;
 8001e54:	2380      	movs	r3, #128	@ 0x80
 8001e56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e60:	2300      	movs	r3, #0
 8001e62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led5_GPIO_Port, &GPIO_InitStruct);
 8001e64:	f107 0314 	add.w	r3, r7, #20
 8001e68:	4619      	mov	r1, r3
 8001e6a:	480c      	ldr	r0, [pc, #48]	@ (8001e9c <MX_GPIO_Init+0x124>)
 8001e6c:	f002 f816 	bl	8003e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : led4_Pin */
  GPIO_InitStruct.Pin = led4_Pin;
 8001e70:	2340      	movs	r3, #64	@ 0x40
 8001e72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e74:	2301      	movs	r3, #1
 8001e76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led4_GPIO_Port, &GPIO_InitStruct);
 8001e80:	f107 0314 	add.w	r3, r7, #20
 8001e84:	4619      	mov	r1, r3
 8001e86:	4806      	ldr	r0, [pc, #24]	@ (8001ea0 <MX_GPIO_Init+0x128>)
 8001e88:	f002 f808 	bl	8003e9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e8c:	bf00      	nop
 8001e8e:	3728      	adds	r7, #40	@ 0x28
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40023800 	.word	0x40023800
 8001e98:	40020000 	.word	0x40020000
 8001e9c:	40020800 	.word	0x40020800
 8001ea0:	40020400 	.word	0x40020400

08001ea4 <filter_config>:

/* USER CODE BEGIN 4 */
void filter_config(void){
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08a      	sub	sp, #40	@ 0x28
 8001ea8:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef fil1;
	fil1.FilterActivation = ENABLE;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	623b      	str	r3, [r7, #32]
	fil1.FilterBank = 0;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	617b      	str	r3, [r7, #20]
	fil1.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	613b      	str	r3, [r7, #16]
	fil1.FilterIdHigh = 0x0000;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	603b      	str	r3, [r7, #0]
	fil1.FilterIdLow = 0x0000;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	607b      	str	r3, [r7, #4]
	fil1.FilterMaskIdHigh = 0x0000;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60bb      	str	r3, [r7, #8]
	fil1.FilterMaskIdLow = 0x0000;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60fb      	str	r3, [r7, #12]
	fil1.FilterMode = CAN_FILTERMODE_IDMASK;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61bb      	str	r3, [r7, #24]
	fil1.FilterScale = CAN_FILTERSCALE_32BIT;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	61fb      	str	r3, [r7, #28]

	if(HAL_CAN_ConfigFilter(&hcan1,&fil1) != HAL_OK){
 8001ece:	463b      	mov	r3, r7
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4806      	ldr	r0, [pc, #24]	@ (8001eec <filter_config+0x48>)
 8001ed4:	f000 fddc 	bl	8002a90 <HAL_CAN_ConfigFilter>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <filter_config+0x3e>
		Error_Handler();
 8001ede:	f000 f913 	bl	8002108 <Error_Handler>
	}
}
 8001ee2:	bf00      	nop
 8001ee4:	3728      	adds	r7, #40	@ 0x28
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000258 	.word	0x20000258

08001ef0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]


	uint32_t curr = __HAL_TIM_GET_COMPARE(htim , TIM_CHANNEL_1);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001efe:	60fb      	str	r3, [r7, #12]

	if(curr - last > 1000 || last == 0){
 8001f00:	4b19      	ldr	r3, [pc, #100]	@ (8001f68 <HAL_TIM_IC_CaptureCallback+0x78>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f0c:	d803      	bhi.n	8001f16 <HAL_TIM_IC_CaptureCallback+0x26>
 8001f0e:	4b16      	ldr	r3, [pc, #88]	@ (8001f68 <HAL_TIM_IC_CaptureCallback+0x78>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d121      	bne.n	8001f5a <HAL_TIM_IC_CaptureCallback+0x6a>
		if(is_capture_done == 0){
 8001f16:	4b15      	ldr	r3, [pc, #84]	@ (8001f6c <HAL_TIM_IC_CaptureCallback+0x7c>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d11a      	bne.n	8001f54 <HAL_TIM_IC_CaptureCallback+0x64>
				 if(count==1){
 8001f1e:	4b14      	ldr	r3, [pc, #80]	@ (8001f70 <HAL_TIM_IC_CaptureCallback+0x80>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d109      	bne.n	8001f3a <HAL_TIM_IC_CaptureCallback+0x4a>
						 input_captures[0] = curr;
 8001f26:	4a13      	ldr	r2, [pc, #76]	@ (8001f74 <HAL_TIM_IC_CaptureCallback+0x84>)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6013      	str	r3, [r2, #0]
						 count++;
 8001f2c:	4b10      	ldr	r3, [pc, #64]	@ (8001f70 <HAL_TIM_IC_CaptureCallback+0x80>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	3301      	adds	r3, #1
 8001f32:	b2da      	uxtb	r2, r3
 8001f34:	4b0e      	ldr	r3, [pc, #56]	@ (8001f70 <HAL_TIM_IC_CaptureCallback+0x80>)
 8001f36:	701a      	strb	r2, [r3, #0]
 8001f38:	e00c      	b.n	8001f54 <HAL_TIM_IC_CaptureCallback+0x64>
					 }else if(count == 2){
 8001f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f70 <HAL_TIM_IC_CaptureCallback+0x80>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d108      	bne.n	8001f54 <HAL_TIM_IC_CaptureCallback+0x64>
						 input_captures[1] = curr;
 8001f42:	4a0c      	ldr	r2, [pc, #48]	@ (8001f74 <HAL_TIM_IC_CaptureCallback+0x84>)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6053      	str	r3, [r2, #4]
						 count=1;
 8001f48:	4b09      	ldr	r3, [pc, #36]	@ (8001f70 <HAL_TIM_IC_CaptureCallback+0x80>)
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	701a      	strb	r2, [r3, #0]
						 is_capture_done = 1;
 8001f4e:	4b07      	ldr	r3, [pc, #28]	@ (8001f6c <HAL_TIM_IC_CaptureCallback+0x7c>)
 8001f50:	2201      	movs	r2, #1
 8001f52:	701a      	strb	r2, [r3, #0]
					 }

			}
		last = curr;
 8001f54:	4a04      	ldr	r2, [pc, #16]	@ (8001f68 <HAL_TIM_IC_CaptureCallback+0x78>)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6013      	str	r3, [r2, #0]
	}



}
 8001f5a:	bf00      	nop
 8001f5c:	3714      	adds	r7, #20
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	200003e8 	.word	0x200003e8
 8001f6c:	200003c0 	.word	0x200003c0
 8001f70:	20000004 	.word	0x20000004
 8001f74:	200003b8 	.word	0x200003b8

08001f78 <can_tx>:

void can_tx(void){
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
	txh.DLC = 8;
 8001f7e:	4b19      	ldr	r3, [pc, #100]	@ (8001fe4 <can_tx+0x6c>)
 8001f80:	2208      	movs	r2, #8
 8001f82:	611a      	str	r2, [r3, #16]
	txh.IDE = CAN_ID_EXT;
 8001f84:	4b17      	ldr	r3, [pc, #92]	@ (8001fe4 <can_tx+0x6c>)
 8001f86:	2204      	movs	r2, #4
 8001f88:	609a      	str	r2, [r3, #8]
	txh.RTR = CAN_RTR_DATA;
 8001f8a:	4b16      	ldr	r3, [pc, #88]	@ (8001fe4 <can_tx+0x6c>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	60da      	str	r2, [r3, #12]
	txh.ExtId = 0xDCBA;
 8001f90:	4b14      	ldr	r3, [pc, #80]	@ (8001fe4 <can_tx+0x6c>)
 8001f92:	f64d 42ba 	movw	r2, #56506	@ 0xdcba
 8001f96:	605a      	str	r2, [r3, #4]
	get_Temperature();
 8001f98:	f7ff fc4e 	bl	8001838 <get_Temperature>
	txData[0] = Temp[0];
 8001f9c:	4b12      	ldr	r3, [pc, #72]	@ (8001fe8 <can_tx+0x70>)
 8001f9e:	edd3 7a00 	vldr	s15, [r3]
 8001fa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fa6:	edc7 7a01 	vstr	s15, [r7, #4]
 8001faa:	793b      	ldrb	r3, [r7, #4]
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	4b0f      	ldr	r3, [pc, #60]	@ (8001fec <can_tx+0x74>)
 8001fb0:	701a      	strb	r2, [r3, #0]
	txData[1] = user_signal_freq;
 8001fb2:	4b0f      	ldr	r3, [pc, #60]	@ (8001ff0 <can_tx+0x78>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	b2da      	uxtb	r2, r3
 8001fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001fec <can_tx+0x74>)
 8001fba:	705a      	strb	r2, [r3, #1]
	if(HAL_CAN_AddTxMessage(&hcan1,&txh, txData, &mailbox1) != HAL_OK){
 8001fbc:	4b0d      	ldr	r3, [pc, #52]	@ (8001ff4 <can_tx+0x7c>)
 8001fbe:	4a0b      	ldr	r2, [pc, #44]	@ (8001fec <can_tx+0x74>)
 8001fc0:	4908      	ldr	r1, [pc, #32]	@ (8001fe4 <can_tx+0x6c>)
 8001fc2:	480d      	ldr	r0, [pc, #52]	@ (8001ff8 <can_tx+0x80>)
 8001fc4:	f000 fe88 	bl	8002cd8 <HAL_CAN_AddTxMessage>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d002      	beq.n	8001fd4 <can_tx+0x5c>
		Error_Handler();
 8001fce:	f000 f89b 	bl	8002108 <Error_Handler>
	}else{
		led_indicate(1);
	}
}
 8001fd2:	e002      	b.n	8001fda <can_tx+0x62>
		led_indicate(1);
 8001fd4:	2001      	movs	r0, #1
 8001fd6:	f000 f835 	bl	8002044 <led_indicate>
}
 8001fda:	bf00      	nop
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20000400 	.word	0x20000400
 8001fe8:	2000020c 	.word	0x2000020c
 8001fec:	200003ec 	.word	0x200003ec
 8001ff0:	200003e0 	.word	0x200003e0
 8001ff4:	200003fc 	.word	0x200003fc
 8001ff8:	20000258 	.word	0x20000258

08001ffc <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]

	if(HAL_CAN_GetRxMessage(hcan,CAN_RX_FIFO0, &rxh, rxData) != HAL_OK){
 8002004:	4b0d      	ldr	r3, [pc, #52]	@ (800203c <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8002006:	4a0e      	ldr	r2, [pc, #56]	@ (8002040 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8002008:	2100      	movs	r1, #0
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 ff34 	bl	8002e78 <HAL_CAN_GetRxMessage>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
		Error_Handler();
 8002016:	f000 f877 	bl	8002108 <Error_Handler>
	}

	if(rxh.ExtId == 0xABCD && rxh.RTR == CAN_RTR_DATA){
 800201a:	4b09      	ldr	r3, [pc, #36]	@ (8002040 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f64a 32cd 	movw	r2, #43981	@ 0xabcd
 8002022:	4293      	cmp	r3, r2
 8002024:	d105      	bne.n	8002032 <HAL_CAN_RxFifo0MsgPendingCallback+0x36>
 8002026:	4b06      	ldr	r3, [pc, #24]	@ (8002040 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HAL_CAN_RxFifo0MsgPendingCallback+0x36>
		can_tx();
 800202e:	f7ff ffa3 	bl	8001f78 <can_tx>
	}

}
 8002032:	bf00      	nop
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	200003f4 	.word	0x200003f4
 8002040:	20000418 	.word	0x20000418

08002044 <led_indicate>:
void led_indicate(uint8_t no){
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	71fb      	strb	r3, [r7, #7]
	switch(no){
 800204e:	79fb      	ldrb	r3, [r7, #7]
 8002050:	3b01      	subs	r3, #1
 8002052:	2b04      	cmp	r3, #4
 8002054:	d84d      	bhi.n	80020f2 <led_indicate+0xae>
 8002056:	a201      	add	r2, pc, #4	@ (adr r2, 800205c <led_indicate+0x18>)
 8002058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800205c:	08002071 	.word	0x08002071
 8002060:	0800208b 	.word	0x0800208b
 8002064:	080020a5 	.word	0x080020a5
 8002068:	080020bf 	.word	0x080020bf
 800206c:	080020d9 	.word	0x080020d9
	case 1:
		HAL_GPIO_TogglePin(led1_GPIO_Port, led1_Pin);
 8002070:	2120      	movs	r1, #32
 8002072:	4822      	ldr	r0, [pc, #136]	@ (80020fc <led_indicate+0xb8>)
 8002074:	f002 f8bf 	bl	80041f6 <HAL_GPIO_TogglePin>
		HAL_Delay(500);					//on board led
 8002078:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800207c:	f000 fbe8 	bl	8002850 <HAL_Delay>
		HAL_GPIO_TogglePin(led1_GPIO_Port, led1_Pin);
 8002080:	2120      	movs	r1, #32
 8002082:	481e      	ldr	r0, [pc, #120]	@ (80020fc <led_indicate+0xb8>)
 8002084:	f002 f8b7 	bl	80041f6 <HAL_GPIO_TogglePin>
		break;
 8002088:	e033      	b.n	80020f2 <led_indicate+0xae>
	case 2:
		HAL_GPIO_TogglePin(led2_GPIO_Port, led2_Pin);
 800208a:	2140      	movs	r1, #64	@ 0x40
 800208c:	481b      	ldr	r0, [pc, #108]	@ (80020fc <led_indicate+0xb8>)
 800208e:	f002 f8b2 	bl	80041f6 <HAL_GPIO_TogglePin>
		HAL_Delay(500);		// A0 led
 8002092:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002096:	f000 fbdb 	bl	8002850 <HAL_Delay>
		HAL_GPIO_TogglePin(led2_GPIO_Port, led2_Pin);
 800209a:	2140      	movs	r1, #64	@ 0x40
 800209c:	4817      	ldr	r0, [pc, #92]	@ (80020fc <led_indicate+0xb8>)
 800209e:	f002 f8aa 	bl	80041f6 <HAL_GPIO_TogglePin>
		break;
 80020a2:	e026      	b.n	80020f2 <led_indicate+0xae>
	case 3:
		HAL_GPIO_TogglePin(led3_GPIO_Port, led3_Pin);
 80020a4:	2180      	movs	r1, #128	@ 0x80
 80020a6:	4815      	ldr	r0, [pc, #84]	@ (80020fc <led_indicate+0xb8>)
 80020a8:	f002 f8a5 	bl	80041f6 <HAL_GPIO_TogglePin>
		HAL_Delay(500);			// A1 led
 80020ac:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80020b0:	f000 fbce 	bl	8002850 <HAL_Delay>
		HAL_GPIO_TogglePin(led3_GPIO_Port, led3_Pin);
 80020b4:	2180      	movs	r1, #128	@ 0x80
 80020b6:	4811      	ldr	r0, [pc, #68]	@ (80020fc <led_indicate+0xb8>)
 80020b8:	f002 f89d 	bl	80041f6 <HAL_GPIO_TogglePin>
		break;
 80020bc:	e019      	b.n	80020f2 <led_indicate+0xae>
	case 4:
		HAL_GPIO_TogglePin(led4_GPIO_Port, led4_Pin);
 80020be:	2140      	movs	r1, #64	@ 0x40
 80020c0:	480f      	ldr	r0, [pc, #60]	@ (8002100 <led_indicate+0xbc>)
 80020c2:	f002 f898 	bl	80041f6 <HAL_GPIO_TogglePin>
		HAL_Delay(500);			// A2 led
 80020c6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80020ca:	f000 fbc1 	bl	8002850 <HAL_Delay>
		HAL_GPIO_TogglePin(led4_GPIO_Port, led4_Pin);
 80020ce:	2140      	movs	r1, #64	@ 0x40
 80020d0:	480b      	ldr	r0, [pc, #44]	@ (8002100 <led_indicate+0xbc>)
 80020d2:	f002 f890 	bl	80041f6 <HAL_GPIO_TogglePin>
		break;
 80020d6:	e00c      	b.n	80020f2 <led_indicate+0xae>
	case 5:
		HAL_GPIO_TogglePin(led5_GPIO_Port, led5_Pin);
 80020d8:	2180      	movs	r1, #128	@ 0x80
 80020da:	480a      	ldr	r0, [pc, #40]	@ (8002104 <led_indicate+0xc0>)
 80020dc:	f002 f88b 	bl	80041f6 <HAL_GPIO_TogglePin>
		HAL_Delay(500);			// A2 led
 80020e0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80020e4:	f000 fbb4 	bl	8002850 <HAL_Delay>
		HAL_GPIO_TogglePin(led5_GPIO_Port, led5_Pin);
 80020e8:	2180      	movs	r1, #128	@ 0x80
 80020ea:	4806      	ldr	r0, [pc, #24]	@ (8002104 <led_indicate+0xc0>)
 80020ec:	f002 f883 	bl	80041f6 <HAL_GPIO_TogglePin>
		break;
 80020f0:	bf00      	nop
	}

}
 80020f2:	bf00      	nop
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40020000 	.word	0x40020000
 8002100:	40020400 	.word	0x40020400
 8002104:	40020800 	.word	0x40020800

08002108 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800210c:	b672      	cpsid	i
}
 800210e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002110:	bf00      	nop
 8002112:	e7fd      	b.n	8002110 <Error_Handler+0x8>

08002114 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	607b      	str	r3, [r7, #4]
 800211e:	4b1e      	ldr	r3, [pc, #120]	@ (8002198 <HAL_MspInit+0x84>)
 8002120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002122:	4a1d      	ldr	r2, [pc, #116]	@ (8002198 <HAL_MspInit+0x84>)
 8002124:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002128:	6453      	str	r3, [r2, #68]	@ 0x44
 800212a:	4b1b      	ldr	r3, [pc, #108]	@ (8002198 <HAL_MspInit+0x84>)
 800212c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800212e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002132:	607b      	str	r3, [r7, #4]
 8002134:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	603b      	str	r3, [r7, #0]
 800213a:	4b17      	ldr	r3, [pc, #92]	@ (8002198 <HAL_MspInit+0x84>)
 800213c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213e:	4a16      	ldr	r2, [pc, #88]	@ (8002198 <HAL_MspInit+0x84>)
 8002140:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002144:	6413      	str	r3, [r2, #64]	@ 0x40
 8002146:	4b14      	ldr	r3, [pc, #80]	@ (8002198 <HAL_MspInit+0x84>)
 8002148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800214e:	603b      	str	r3, [r7, #0]
 8002150:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002152:	2007      	movs	r0, #7
 8002154:	f001 fad8 	bl	8003708 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002158:	2003      	movs	r0, #3
 800215a:	f001 fad5 	bl	8003708 <HAL_NVIC_SetPriorityGrouping>
    SCB->SHCSR |= 0x7 << 16;
 800215e:	4b0f      	ldr	r3, [pc, #60]	@ (800219c <HAL_MspInit+0x88>)
 8002160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002162:	4a0e      	ldr	r2, [pc, #56]	@ (800219c <HAL_MspInit+0x88>)
 8002164:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8002168:	6253      	str	r3, [r2, #36]	@ 0x24
    	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 800216a:	2200      	movs	r2, #0
 800216c:	2100      	movs	r1, #0
 800216e:	f06f 000a 	mvn.w	r0, #10
 8002172:	f001 fad4 	bl	800371e <HAL_NVIC_SetPriority>
    	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 8002176:	2200      	movs	r2, #0
 8002178:	2100      	movs	r1, #0
 800217a:	f06f 000b 	mvn.w	r0, #11
 800217e:	f001 face 	bl	800371e <HAL_NVIC_SetPriority>
    	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 8002182:	2200      	movs	r2, #0
 8002184:	2100      	movs	r1, #0
 8002186:	f06f 0009 	mvn.w	r0, #9
 800218a:	f001 fac8 	bl	800371e <HAL_NVIC_SetPriority>
  /* USER CODE END MspInit 1 */
}
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40023800 	.word	0x40023800
 800219c:	e000ed00 	.word	0xe000ed00

080021a0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08a      	sub	sp, #40	@ 0x28
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a8:	f107 0314 	add.w	r3, r7, #20
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	609a      	str	r2, [r3, #8]
 80021b4:	60da      	str	r2, [r3, #12]
 80021b6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a29      	ldr	r2, [pc, #164]	@ (8002264 <HAL_CAN_MspInit+0xc4>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d14c      	bne.n	800225c <HAL_CAN_MspInit+0xbc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	613b      	str	r3, [r7, #16]
 80021c6:	4b28      	ldr	r3, [pc, #160]	@ (8002268 <HAL_CAN_MspInit+0xc8>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ca:	4a27      	ldr	r2, [pc, #156]	@ (8002268 <HAL_CAN_MspInit+0xc8>)
 80021cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80021d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80021d2:	4b25      	ldr	r3, [pc, #148]	@ (8002268 <HAL_CAN_MspInit+0xc8>)
 80021d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021da:	613b      	str	r3, [r7, #16]
 80021dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	4b21      	ldr	r3, [pc, #132]	@ (8002268 <HAL_CAN_MspInit+0xc8>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e6:	4a20      	ldr	r2, [pc, #128]	@ (8002268 <HAL_CAN_MspInit+0xc8>)
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002268 <HAL_CAN_MspInit+0xc8>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80021fa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80021fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002200:	2302      	movs	r3, #2
 8002202:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002208:	2303      	movs	r3, #3
 800220a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800220c:	2309      	movs	r3, #9
 800220e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002210:	f107 0314 	add.w	r3, r7, #20
 8002214:	4619      	mov	r1, r3
 8002216:	4815      	ldr	r0, [pc, #84]	@ (800226c <HAL_CAN_MspInit+0xcc>)
 8002218:	f001 fe40 	bl	8003e9c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800221c:	2200      	movs	r2, #0
 800221e:	2100      	movs	r1, #0
 8002220:	2014      	movs	r0, #20
 8002222:	f001 fa7c 	bl	800371e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002226:	2014      	movs	r0, #20
 8002228:	f001 fa95 	bl	8003756 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 800222c:	2200      	movs	r2, #0
 800222e:	2100      	movs	r1, #0
 8002230:	2016      	movs	r0, #22
 8002232:	f001 fa74 	bl	800371e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8002236:	2016      	movs	r0, #22
 8002238:	f001 fa8d 	bl	8003756 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 15, 0);
 800223c:	2200      	movs	r2, #0
 800223e:	210f      	movs	r1, #15
 8002240:	2014      	movs	r0, #20
 8002242:	f001 fa6c 	bl	800371e <HAL_NVIC_SetPriority>
       HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002246:	2014      	movs	r0, #20
 8002248:	f001 fa85 	bl	8003756 <HAL_NVIC_EnableIRQ>
       HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 15, 0);
 800224c:	2200      	movs	r2, #0
 800224e:	210f      	movs	r1, #15
 8002250:	2016      	movs	r0, #22
 8002252:	f001 fa64 	bl	800371e <HAL_NVIC_SetPriority>
       HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8002256:	2016      	movs	r0, #22
 8002258:	f001 fa7d 	bl	8003756 <HAL_NVIC_EnableIRQ>
  /* USER CODE END CAN1_MspInit 1 */

  }

}
 800225c:	bf00      	nop
 800225e:	3728      	adds	r7, #40	@ 0x28
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40006400 	.word	0x40006400
 8002268:	40023800 	.word	0x40023800
 800226c:	40020000 	.word	0x40020000

08002270 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b08a      	sub	sp, #40	@ 0x28
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002278:	f107 0314 	add.w	r3, r7, #20
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	605a      	str	r2, [r3, #4]
 8002282:	609a      	str	r2, [r3, #8]
 8002284:	60da      	str	r2, [r3, #12]
 8002286:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002290:	d133      	bne.n	80022fa <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	613b      	str	r3, [r7, #16]
 8002296:	4b1b      	ldr	r3, [pc, #108]	@ (8002304 <HAL_TIM_IC_MspInit+0x94>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229a:	4a1a      	ldr	r2, [pc, #104]	@ (8002304 <HAL_TIM_IC_MspInit+0x94>)
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80022a2:	4b18      	ldr	r3, [pc, #96]	@ (8002304 <HAL_TIM_IC_MspInit+0x94>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	613b      	str	r3, [r7, #16]
 80022ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	4b14      	ldr	r3, [pc, #80]	@ (8002304 <HAL_TIM_IC_MspInit+0x94>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b6:	4a13      	ldr	r2, [pc, #76]	@ (8002304 <HAL_TIM_IC_MspInit+0x94>)
 80022b8:	f043 0301 	orr.w	r3, r3, #1
 80022bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80022be:	4b11      	ldr	r3, [pc, #68]	@ (8002304 <HAL_TIM_IC_MspInit+0x94>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80022ca:	2301      	movs	r3, #1
 80022cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ce:	2302      	movs	r3, #2
 80022d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d6:	2300      	movs	r3, #0
 80022d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022da:	2301      	movs	r3, #1
 80022dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022de:	f107 0314 	add.w	r3, r7, #20
 80022e2:	4619      	mov	r1, r3
 80022e4:	4808      	ldr	r0, [pc, #32]	@ (8002308 <HAL_TIM_IC_MspInit+0x98>)
 80022e6:	f001 fdd9 	bl	8003e9c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80022ea:	2200      	movs	r2, #0
 80022ec:	2100      	movs	r1, #0
 80022ee:	201c      	movs	r0, #28
 80022f0:	f001 fa15 	bl	800371e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80022f4:	201c      	movs	r0, #28
 80022f6:	f001 fa2e 	bl	8003756 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80022fa:	bf00      	nop
 80022fc:	3728      	adds	r7, #40	@ 0x28
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40023800 	.word	0x40023800
 8002308:	40020000 	.word	0x40020000

0800230c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b08c      	sub	sp, #48	@ 0x30
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002314:	f107 031c 	add.w	r3, r7, #28
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	605a      	str	r2, [r3, #4]
 800231e:	609a      	str	r2, [r3, #8]
 8002320:	60da      	str	r2, [r3, #12]
 8002322:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a51      	ldr	r2, [pc, #324]	@ (8002470 <HAL_UART_MspInit+0x164>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d135      	bne.n	800239a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800232e:	2300      	movs	r3, #0
 8002330:	61bb      	str	r3, [r7, #24]
 8002332:	4b50      	ldr	r3, [pc, #320]	@ (8002474 <HAL_UART_MspInit+0x168>)
 8002334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002336:	4a4f      	ldr	r2, [pc, #316]	@ (8002474 <HAL_UART_MspInit+0x168>)
 8002338:	f043 0310 	orr.w	r3, r3, #16
 800233c:	6453      	str	r3, [r2, #68]	@ 0x44
 800233e:	4b4d      	ldr	r3, [pc, #308]	@ (8002474 <HAL_UART_MspInit+0x168>)
 8002340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002342:	f003 0310 	and.w	r3, r3, #16
 8002346:	61bb      	str	r3, [r7, #24]
 8002348:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800234a:	2300      	movs	r3, #0
 800234c:	617b      	str	r3, [r7, #20]
 800234e:	4b49      	ldr	r3, [pc, #292]	@ (8002474 <HAL_UART_MspInit+0x168>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002352:	4a48      	ldr	r2, [pc, #288]	@ (8002474 <HAL_UART_MspInit+0x168>)
 8002354:	f043 0301 	orr.w	r3, r3, #1
 8002358:	6313      	str	r3, [r2, #48]	@ 0x30
 800235a:	4b46      	ldr	r3, [pc, #280]	@ (8002474 <HAL_UART_MspInit+0x168>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	617b      	str	r3, [r7, #20]
 8002364:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002366:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800236a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800236c:	2312      	movs	r3, #18
 800236e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002370:	2300      	movs	r3, #0
 8002372:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002374:	2303      	movs	r3, #3
 8002376:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002378:	2307      	movs	r3, #7
 800237a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800237c:	f107 031c 	add.w	r3, r7, #28
 8002380:	4619      	mov	r1, r3
 8002382:	483d      	ldr	r0, [pc, #244]	@ (8002478 <HAL_UART_MspInit+0x16c>)
 8002384:	f001 fd8a 	bl	8003e9c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002388:	2200      	movs	r2, #0
 800238a:	2100      	movs	r1, #0
 800238c:	2025      	movs	r0, #37	@ 0x25
 800238e:	f001 f9c6 	bl	800371e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002392:	2025      	movs	r0, #37	@ 0x25
 8002394:	f001 f9df 	bl	8003756 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002398:	e066      	b.n	8002468 <HAL_UART_MspInit+0x15c>
  else if(huart->Instance==USART2)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a37      	ldr	r2, [pc, #220]	@ (800247c <HAL_UART_MspInit+0x170>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d161      	bne.n	8002468 <HAL_UART_MspInit+0x15c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80023a4:	2300      	movs	r3, #0
 80023a6:	613b      	str	r3, [r7, #16]
 80023a8:	4b32      	ldr	r3, [pc, #200]	@ (8002474 <HAL_UART_MspInit+0x168>)
 80023aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ac:	4a31      	ldr	r2, [pc, #196]	@ (8002474 <HAL_UART_MspInit+0x168>)
 80023ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80023b4:	4b2f      	ldr	r3, [pc, #188]	@ (8002474 <HAL_UART_MspInit+0x168>)
 80023b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023bc:	613b      	str	r3, [r7, #16]
 80023be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c0:	2300      	movs	r3, #0
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002474 <HAL_UART_MspInit+0x168>)
 80023c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c8:	4a2a      	ldr	r2, [pc, #168]	@ (8002474 <HAL_UART_MspInit+0x168>)
 80023ca:	f043 0301 	orr.w	r3, r3, #1
 80023ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80023d0:	4b28      	ldr	r3, [pc, #160]	@ (8002474 <HAL_UART_MspInit+0x168>)
 80023d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d4:	f003 0301 	and.w	r3, r3, #1
 80023d8:	60fb      	str	r3, [r7, #12]
 80023da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80023dc:	230c      	movs	r3, #12
 80023de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e0:	2302      	movs	r3, #2
 80023e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e4:	2300      	movs	r3, #0
 80023e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023e8:	2303      	movs	r3, #3
 80023ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023ec:	2307      	movs	r3, #7
 80023ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f0:	f107 031c 	add.w	r3, r7, #28
 80023f4:	4619      	mov	r1, r3
 80023f6:	4820      	ldr	r0, [pc, #128]	@ (8002478 <HAL_UART_MspInit+0x16c>)
 80023f8:	f001 fd50 	bl	8003e9c <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80023fc:	4b20      	ldr	r3, [pc, #128]	@ (8002480 <HAL_UART_MspInit+0x174>)
 80023fe:	4a21      	ldr	r2, [pc, #132]	@ (8002484 <HAL_UART_MspInit+0x178>)
 8002400:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002402:	4b1f      	ldr	r3, [pc, #124]	@ (8002480 <HAL_UART_MspInit+0x174>)
 8002404:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002408:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800240a:	4b1d      	ldr	r3, [pc, #116]	@ (8002480 <HAL_UART_MspInit+0x174>)
 800240c:	2240      	movs	r2, #64	@ 0x40
 800240e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002410:	4b1b      	ldr	r3, [pc, #108]	@ (8002480 <HAL_UART_MspInit+0x174>)
 8002412:	2200      	movs	r2, #0
 8002414:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002416:	4b1a      	ldr	r3, [pc, #104]	@ (8002480 <HAL_UART_MspInit+0x174>)
 8002418:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800241c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800241e:	4b18      	ldr	r3, [pc, #96]	@ (8002480 <HAL_UART_MspInit+0x174>)
 8002420:	2200      	movs	r2, #0
 8002422:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002424:	4b16      	ldr	r3, [pc, #88]	@ (8002480 <HAL_UART_MspInit+0x174>)
 8002426:	2200      	movs	r2, #0
 8002428:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800242a:	4b15      	ldr	r3, [pc, #84]	@ (8002480 <HAL_UART_MspInit+0x174>)
 800242c:	2200      	movs	r2, #0
 800242e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002430:	4b13      	ldr	r3, [pc, #76]	@ (8002480 <HAL_UART_MspInit+0x174>)
 8002432:	2200      	movs	r2, #0
 8002434:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002436:	4b12      	ldr	r3, [pc, #72]	@ (8002480 <HAL_UART_MspInit+0x174>)
 8002438:	2200      	movs	r2, #0
 800243a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800243c:	4810      	ldr	r0, [pc, #64]	@ (8002480 <HAL_UART_MspInit+0x174>)
 800243e:	f001 f9b1 	bl	80037a4 <HAL_DMA_Init>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <HAL_UART_MspInit+0x140>
      Error_Handler();
 8002448:	f7ff fe5e 	bl	8002108 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a0c      	ldr	r2, [pc, #48]	@ (8002480 <HAL_UART_MspInit+0x174>)
 8002450:	639a      	str	r2, [r3, #56]	@ 0x38
 8002452:	4a0b      	ldr	r2, [pc, #44]	@ (8002480 <HAL_UART_MspInit+0x174>)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002458:	2200      	movs	r2, #0
 800245a:	2100      	movs	r1, #0
 800245c:	2026      	movs	r0, #38	@ 0x26
 800245e:	f001 f95e 	bl	800371e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002462:	2026      	movs	r0, #38	@ 0x26
 8002464:	f001 f977 	bl	8003756 <HAL_NVIC_EnableIRQ>
}
 8002468:	bf00      	nop
 800246a:	3730      	adds	r7, #48	@ 0x30
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40011000 	.word	0x40011000
 8002474:	40023800 	.word	0x40023800
 8002478:	40020000 	.word	0x40020000
 800247c:	40004400 	.word	0x40004400
 8002480:	20000358 	.word	0x20000358
 8002484:	400260a0 	.word	0x400260a0

08002488 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800248c:	bf00      	nop
 800248e:	e7fd      	b.n	800248c <NMI_Handler+0x4>

08002490 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002494:	bf00      	nop
 8002496:	e7fd      	b.n	8002494 <HardFault_Handler+0x4>

08002498 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800249c:	bf00      	nop
 800249e:	e7fd      	b.n	800249c <MemManage_Handler+0x4>

080024a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024a4:	bf00      	nop
 80024a6:	e7fd      	b.n	80024a4 <BusFault_Handler+0x4>

080024a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024ac:	bf00      	nop
 80024ae:	e7fd      	b.n	80024ac <UsageFault_Handler+0x4>

080024b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024b4:	bf00      	nop
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr

080024be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024be:	b480      	push	{r7}
 80024c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024d0:	bf00      	nop
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024de:	f000 f997 	bl	8002810 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 80024e2:	f001 f952 	bl	800378a <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80024e6:	bf00      	nop
 80024e8:	bd80      	pop	{r7, pc}
	...

080024ec <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80024f0:	4802      	ldr	r0, [pc, #8]	@ (80024fc <DMA1_Stream6_IRQHandler+0x10>)
 80024f2:	f001 fa97 	bl	8003a24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80024f6:	bf00      	nop
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20000358 	.word	0x20000358

08002500 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002504:	4802      	ldr	r0, [pc, #8]	@ (8002510 <CAN1_RX0_IRQHandler+0x10>)
 8002506:	f000 fdff 	bl	8003108 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800250a:	bf00      	nop
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	20000258 	.word	0x20000258

08002514 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002518:	4802      	ldr	r0, [pc, #8]	@ (8002524 <CAN1_SCE_IRQHandler+0x10>)
 800251a:	f000 fdf5 	bl	8003108 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800251e:	bf00      	nop
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	20000258 	.word	0x20000258

08002528 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800252c:	4802      	ldr	r0, [pc, #8]	@ (8002538 <TIM2_IRQHandler+0x10>)
 800252e:	f002 fddd 	bl	80050ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002532:	bf00      	nop
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	20000280 	.word	0x20000280

0800253c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	owReadHandler();
 8002540:	f7fe fd8a 	bl	8001058 <owReadHandler>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002544:	4802      	ldr	r0, [pc, #8]	@ (8002550 <USART1_IRQHandler+0x14>)
 8002546:	f003 fab9 	bl	8005abc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800254a:	bf00      	nop
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	200002c8 	.word	0x200002c8

08002554 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002558:	4802      	ldr	r0, [pc, #8]	@ (8002564 <USART2_IRQHandler+0x10>)
 800255a:	f003 faaf 	bl	8005abc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800255e:	bf00      	nop
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	20000310 	.word	0x20000310

08002568 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  return 1;
 800256c:	2301      	movs	r3, #1
}
 800256e:	4618      	mov	r0, r3
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <_kill>:

int _kill(int pid, int sig)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002582:	f004 ff39 	bl	80073f8 <__errno>
 8002586:	4603      	mov	r3, r0
 8002588:	2216      	movs	r2, #22
 800258a:	601a      	str	r2, [r3, #0]
  return -1;
 800258c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002590:	4618      	mov	r0, r3
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <_exit>:

void _exit (int status)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80025a0:	f04f 31ff 	mov.w	r1, #4294967295
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f7ff ffe7 	bl	8002578 <_kill>
  while (1) {}    /* Make sure we hang here */
 80025aa:	bf00      	nop
 80025ac:	e7fd      	b.n	80025aa <_exit+0x12>

080025ae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b086      	sub	sp, #24
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	60f8      	str	r0, [r7, #12]
 80025b6:	60b9      	str	r1, [r7, #8]
 80025b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ba:	2300      	movs	r3, #0
 80025bc:	617b      	str	r3, [r7, #20]
 80025be:	e00a      	b.n	80025d6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80025c0:	f3af 8000 	nop.w
 80025c4:	4601      	mov	r1, r0
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	1c5a      	adds	r2, r3, #1
 80025ca:	60ba      	str	r2, [r7, #8]
 80025cc:	b2ca      	uxtb	r2, r1
 80025ce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	3301      	adds	r3, #1
 80025d4:	617b      	str	r3, [r7, #20]
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	429a      	cmp	r2, r3
 80025dc:	dbf0      	blt.n	80025c0 <_read+0x12>
  }

  return len;
 80025de:	687b      	ldr	r3, [r7, #4]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025f4:	2300      	movs	r3, #0
 80025f6:	617b      	str	r3, [r7, #20]
 80025f8:	e009      	b.n	800260e <_write+0x26>
  {
    __io_putchar(*ptr++);
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	1c5a      	adds	r2, r3, #1
 80025fe:	60ba      	str	r2, [r7, #8]
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	3301      	adds	r3, #1
 800260c:	617b      	str	r3, [r7, #20]
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	429a      	cmp	r2, r3
 8002614:	dbf1      	blt.n	80025fa <_write+0x12>
  }
  return len;
 8002616:	687b      	ldr	r3, [r7, #4]
}
 8002618:	4618      	mov	r0, r3
 800261a:	3718      	adds	r7, #24
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <_close>:

int _close(int file)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002628:	f04f 33ff 	mov.w	r3, #4294967295
}
 800262c:	4618      	mov	r0, r3
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002648:	605a      	str	r2, [r3, #4]
  return 0;
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <_isatty>:

int _isatty(int file)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002660:	2301      	movs	r3, #1
}
 8002662:	4618      	mov	r0, r3
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr

0800266e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800266e:	b480      	push	{r7}
 8002670:	b085      	sub	sp, #20
 8002672:	af00      	add	r7, sp, #0
 8002674:	60f8      	str	r0, [r7, #12]
 8002676:	60b9      	str	r1, [r7, #8]
 8002678:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002690:	4a14      	ldr	r2, [pc, #80]	@ (80026e4 <_sbrk+0x5c>)
 8002692:	4b15      	ldr	r3, [pc, #84]	@ (80026e8 <_sbrk+0x60>)
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800269c:	4b13      	ldr	r3, [pc, #76]	@ (80026ec <_sbrk+0x64>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d102      	bne.n	80026aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026a4:	4b11      	ldr	r3, [pc, #68]	@ (80026ec <_sbrk+0x64>)
 80026a6:	4a12      	ldr	r2, [pc, #72]	@ (80026f0 <_sbrk+0x68>)
 80026a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026aa:	4b10      	ldr	r3, [pc, #64]	@ (80026ec <_sbrk+0x64>)
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4413      	add	r3, r2
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d207      	bcs.n	80026c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026b8:	f004 fe9e 	bl	80073f8 <__errno>
 80026bc:	4603      	mov	r3, r0
 80026be:	220c      	movs	r2, #12
 80026c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026c2:	f04f 33ff 	mov.w	r3, #4294967295
 80026c6:	e009      	b.n	80026dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026c8:	4b08      	ldr	r3, [pc, #32]	@ (80026ec <_sbrk+0x64>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026ce:	4b07      	ldr	r3, [pc, #28]	@ (80026ec <_sbrk+0x64>)
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4413      	add	r3, r2
 80026d6:	4a05      	ldr	r2, [pc, #20]	@ (80026ec <_sbrk+0x64>)
 80026d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026da:	68fb      	ldr	r3, [r7, #12]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3718      	adds	r7, #24
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	20020000 	.word	0x20020000
 80026e8:	00000400 	.word	0x00000400
 80026ec:	20000434 	.word	0x20000434
 80026f0:	20000588 	.word	0x20000588

080026f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026f8:	4b06      	ldr	r3, [pc, #24]	@ (8002714 <SystemInit+0x20>)
 80026fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026fe:	4a05      	ldr	r2, [pc, #20]	@ (8002714 <SystemInit+0x20>)
 8002700:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002704:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002708:	bf00      	nop
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	e000ed00 	.word	0xe000ed00

08002718 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002718:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002750 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800271c:	480d      	ldr	r0, [pc, #52]	@ (8002754 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800271e:	490e      	ldr	r1, [pc, #56]	@ (8002758 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002720:	4a0e      	ldr	r2, [pc, #56]	@ (800275c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002724:	e002      	b.n	800272c <LoopCopyDataInit>

08002726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800272a:	3304      	adds	r3, #4

0800272c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800272c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800272e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002730:	d3f9      	bcc.n	8002726 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002732:	4a0b      	ldr	r2, [pc, #44]	@ (8002760 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002734:	4c0b      	ldr	r4, [pc, #44]	@ (8002764 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002738:	e001      	b.n	800273e <LoopFillZerobss>

0800273a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800273a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800273c:	3204      	adds	r2, #4

0800273e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800273e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002740:	d3fb      	bcc.n	800273a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002742:	f7ff ffd7 	bl	80026f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002746:	f004 fe5d 	bl	8007404 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800274a:	f7ff f8f7 	bl	800193c <main>
  bx  lr    
 800274e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002750:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002758:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800275c:	08009900 	.word	0x08009900
  ldr r2, =_sbss
 8002760:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002764:	20000588 	.word	0x20000588

08002768 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002768:	e7fe      	b.n	8002768 <ADC_IRQHandler>
	...

0800276c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002770:	4b0e      	ldr	r3, [pc, #56]	@ (80027ac <HAL_Init+0x40>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a0d      	ldr	r2, [pc, #52]	@ (80027ac <HAL_Init+0x40>)
 8002776:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800277a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800277c:	4b0b      	ldr	r3, [pc, #44]	@ (80027ac <HAL_Init+0x40>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a0a      	ldr	r2, [pc, #40]	@ (80027ac <HAL_Init+0x40>)
 8002782:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002786:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002788:	4b08      	ldr	r3, [pc, #32]	@ (80027ac <HAL_Init+0x40>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a07      	ldr	r2, [pc, #28]	@ (80027ac <HAL_Init+0x40>)
 800278e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002792:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002794:	2003      	movs	r0, #3
 8002796:	f000 ffb7 	bl	8003708 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800279a:	2000      	movs	r0, #0
 800279c:	f000 f808 	bl	80027b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027a0:	f7ff fcb8 	bl	8002114 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40023c00 	.word	0x40023c00

080027b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027b8:	4b12      	ldr	r3, [pc, #72]	@ (8002804 <HAL_InitTick+0x54>)
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	4b12      	ldr	r3, [pc, #72]	@ (8002808 <HAL_InitTick+0x58>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	4619      	mov	r1, r3
 80027c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80027ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ce:	4618      	mov	r0, r3
 80027d0:	f000 ffcf 	bl	8003772 <HAL_SYSTICK_Config>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e00e      	b.n	80027fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b0f      	cmp	r3, #15
 80027e2:	d80a      	bhi.n	80027fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027e4:	2200      	movs	r2, #0
 80027e6:	6879      	ldr	r1, [r7, #4]
 80027e8:	f04f 30ff 	mov.w	r0, #4294967295
 80027ec:	f000 ff97 	bl	800371e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027f0:	4a06      	ldr	r2, [pc, #24]	@ (800280c <HAL_InitTick+0x5c>)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
 80027f8:	e000      	b.n	80027fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3708      	adds	r7, #8
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	20000008 	.word	0x20000008
 8002808:	20000010 	.word	0x20000010
 800280c:	2000000c 	.word	0x2000000c

08002810 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002814:	4b06      	ldr	r3, [pc, #24]	@ (8002830 <HAL_IncTick+0x20>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	461a      	mov	r2, r3
 800281a:	4b06      	ldr	r3, [pc, #24]	@ (8002834 <HAL_IncTick+0x24>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4413      	add	r3, r2
 8002820:	4a04      	ldr	r2, [pc, #16]	@ (8002834 <HAL_IncTick+0x24>)
 8002822:	6013      	str	r3, [r2, #0]
}
 8002824:	bf00      	nop
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	20000010 	.word	0x20000010
 8002834:	20000438 	.word	0x20000438

08002838 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  return uwTick;
 800283c:	4b03      	ldr	r3, [pc, #12]	@ (800284c <HAL_GetTick+0x14>)
 800283e:	681b      	ldr	r3, [r3, #0]
}
 8002840:	4618      	mov	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	20000438 	.word	0x20000438

08002850 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002858:	f7ff ffee 	bl	8002838 <HAL_GetTick>
 800285c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002868:	d005      	beq.n	8002876 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800286a:	4b0a      	ldr	r3, [pc, #40]	@ (8002894 <HAL_Delay+0x44>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	461a      	mov	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	4413      	add	r3, r2
 8002874:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002876:	bf00      	nop
 8002878:	f7ff ffde 	bl	8002838 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	429a      	cmp	r2, r3
 8002886:	d8f7      	bhi.n	8002878 <HAL_Delay+0x28>
  {
  }
}
 8002888:	bf00      	nop
 800288a:	bf00      	nop
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	20000010 	.word	0x20000010

08002898 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e0ed      	b.n	8002a86 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d102      	bne.n	80028bc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7ff fc72 	bl	80021a0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f042 0201 	orr.w	r2, r2, #1
 80028ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028cc:	f7ff ffb4 	bl	8002838 <HAL_GetTick>
 80028d0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80028d2:	e012      	b.n	80028fa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80028d4:	f7ff ffb0 	bl	8002838 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b0a      	cmp	r3, #10
 80028e0:	d90b      	bls.n	80028fa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2205      	movs	r2, #5
 80028f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e0c5      	b.n	8002a86 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0e5      	beq.n	80028d4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 0202 	bic.w	r2, r2, #2
 8002916:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002918:	f7ff ff8e 	bl	8002838 <HAL_GetTick>
 800291c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800291e:	e012      	b.n	8002946 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002920:	f7ff ff8a 	bl	8002838 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b0a      	cmp	r3, #10
 800292c:	d90b      	bls.n	8002946 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002932:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2205      	movs	r2, #5
 800293e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e09f      	b.n	8002a86 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1e5      	bne.n	8002920 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	7e1b      	ldrb	r3, [r3, #24]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d108      	bne.n	800296e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	e007      	b.n	800297e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800297c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	7e5b      	ldrb	r3, [r3, #25]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d108      	bne.n	8002998 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002994:	601a      	str	r2, [r3, #0]
 8002996:	e007      	b.n	80029a8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	7e9b      	ldrb	r3, [r3, #26]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d108      	bne.n	80029c2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f042 0220 	orr.w	r2, r2, #32
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	e007      	b.n	80029d2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 0220 	bic.w	r2, r2, #32
 80029d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	7edb      	ldrb	r3, [r3, #27]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d108      	bne.n	80029ec <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 0210 	bic.w	r2, r2, #16
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	e007      	b.n	80029fc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f042 0210 	orr.w	r2, r2, #16
 80029fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	7f1b      	ldrb	r3, [r3, #28]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d108      	bne.n	8002a16 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f042 0208 	orr.w	r2, r2, #8
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	e007      	b.n	8002a26 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f022 0208 	bic.w	r2, r2, #8
 8002a24:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	7f5b      	ldrb	r3, [r3, #29]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d108      	bne.n	8002a40 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f042 0204 	orr.w	r2, r2, #4
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	e007      	b.n	8002a50 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f022 0204 	bic.w	r2, r2, #4
 8002a4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	695b      	ldr	r3, [r3, #20]
 8002a64:	ea42 0103 	orr.w	r1, r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	1e5a      	subs	r2, r3, #1
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
	...

08002a90 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b087      	sub	sp, #28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002aa6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002aa8:	7cfb      	ldrb	r3, [r7, #19]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d003      	beq.n	8002ab6 <HAL_CAN_ConfigFilter+0x26>
 8002aae:	7cfb      	ldrb	r3, [r7, #19]
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	f040 80be 	bne.w	8002c32 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002ab6:	4b65      	ldr	r3, [pc, #404]	@ (8002c4c <HAL_CAN_ConfigFilter+0x1bc>)
 8002ab8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002ac0:	f043 0201 	orr.w	r2, r3, #1
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002ad0:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae4:	021b      	lsls	r3, r3, #8
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	f003 031f 	and.w	r3, r3, #31
 8002af6:	2201      	movs	r2, #1
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	43db      	mvns	r3, r3
 8002b08:	401a      	ands	r2, r3
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d123      	bne.n	8002b60 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	43db      	mvns	r3, r3
 8002b22:	401a      	ands	r2, r3
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002b3a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	3248      	adds	r2, #72	@ 0x48
 8002b40:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b54:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b56:	6979      	ldr	r1, [r7, #20]
 8002b58:	3348      	adds	r3, #72	@ 0x48
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	440b      	add	r3, r1
 8002b5e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	69db      	ldr	r3, [r3, #28]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d122      	bne.n	8002bae <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	431a      	orrs	r2, r3
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002b88:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	3248      	adds	r2, #72	@ 0x48
 8002b8e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ba2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ba4:	6979      	ldr	r1, [r7, #20]
 8002ba6:	3348      	adds	r3, #72	@ 0x48
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	440b      	add	r3, r1
 8002bac:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d109      	bne.n	8002bca <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	401a      	ands	r2, r3
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002bc8:	e007      	b.n	8002bda <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d109      	bne.n	8002bf6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	43db      	mvns	r3, r3
 8002bec:	401a      	ands	r2, r3
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002bf4:	e007      	b.n	8002c06 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d107      	bne.n	8002c1e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	431a      	orrs	r2, r3
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002c24:	f023 0201 	bic.w	r2, r3, #1
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	e006      	b.n	8002c40 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c36:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
  }
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	371c      	adds	r7, #28
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	40006400 	.word	0x40006400

08002c50 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d12e      	bne.n	8002cc2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2202      	movs	r2, #2
 8002c68:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 0201 	bic.w	r2, r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c7c:	f7ff fddc 	bl	8002838 <HAL_GetTick>
 8002c80:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002c82:	e012      	b.n	8002caa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c84:	f7ff fdd8 	bl	8002838 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b0a      	cmp	r3, #10
 8002c90:	d90b      	bls.n	8002caa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c96:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2205      	movs	r2, #5
 8002ca2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e012      	b.n	8002cd0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1e5      	bne.n	8002c84 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	e006      	b.n	8002cd0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc6:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
  }
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3710      	adds	r7, #16
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b089      	sub	sp, #36	@ 0x24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
 8002ce4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cec:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002cf6:	7ffb      	ldrb	r3, [r7, #31]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d003      	beq.n	8002d04 <HAL_CAN_AddTxMessage+0x2c>
 8002cfc:	7ffb      	ldrb	r3, [r7, #31]
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	f040 80ad 	bne.w	8002e5e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10a      	bne.n	8002d24 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d105      	bne.n	8002d24 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f000 8095 	beq.w	8002e4e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	0e1b      	lsrs	r3, r3, #24
 8002d28:	f003 0303 	and.w	r3, r3, #3
 8002d2c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002d2e:	2201      	movs	r2, #1
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	409a      	lsls	r2, r3
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d10d      	bne.n	8002d5c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002d4a:	68f9      	ldr	r1, [r7, #12]
 8002d4c:	6809      	ldr	r1, [r1, #0]
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	3318      	adds	r3, #24
 8002d54:	011b      	lsls	r3, r3, #4
 8002d56:	440b      	add	r3, r1
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	e00f      	b.n	8002d7c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d66:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d6c:	68f9      	ldr	r1, [r7, #12]
 8002d6e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002d70:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	3318      	adds	r3, #24
 8002d76:	011b      	lsls	r3, r3, #4
 8002d78:	440b      	add	r3, r1
 8002d7a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6819      	ldr	r1, [r3, #0]
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	691a      	ldr	r2, [r3, #16]
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	3318      	adds	r3, #24
 8002d88:	011b      	lsls	r3, r3, #4
 8002d8a:	440b      	add	r3, r1
 8002d8c:	3304      	adds	r3, #4
 8002d8e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	7d1b      	ldrb	r3, [r3, #20]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d111      	bne.n	8002dbc <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	3318      	adds	r3, #24
 8002da0:	011b      	lsls	r3, r3, #4
 8002da2:	4413      	add	r3, r2
 8002da4:	3304      	adds	r3, #4
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	6811      	ldr	r1, [r2, #0]
 8002dac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	3318      	adds	r3, #24
 8002db4:	011b      	lsls	r3, r3, #4
 8002db6:	440b      	add	r3, r1
 8002db8:	3304      	adds	r3, #4
 8002dba:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	3307      	adds	r3, #7
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	061a      	lsls	r2, r3, #24
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	3306      	adds	r3, #6
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	041b      	lsls	r3, r3, #16
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	3305      	adds	r3, #5
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	021b      	lsls	r3, r3, #8
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	3204      	adds	r2, #4
 8002ddc:	7812      	ldrb	r2, [r2, #0]
 8002dde:	4610      	mov	r0, r2
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	6811      	ldr	r1, [r2, #0]
 8002de4:	ea43 0200 	orr.w	r2, r3, r0
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	011b      	lsls	r3, r3, #4
 8002dec:	440b      	add	r3, r1
 8002dee:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002df2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	3303      	adds	r3, #3
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	061a      	lsls	r2, r3, #24
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	3302      	adds	r3, #2
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	041b      	lsls	r3, r3, #16
 8002e04:	431a      	orrs	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	3301      	adds	r3, #1
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	021b      	lsls	r3, r3, #8
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	7812      	ldrb	r2, [r2, #0]
 8002e14:	4610      	mov	r0, r2
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	6811      	ldr	r1, [r2, #0]
 8002e1a:	ea43 0200 	orr.w	r2, r3, r0
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	011b      	lsls	r3, r3, #4
 8002e22:	440b      	add	r3, r1
 8002e24:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002e28:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	3318      	adds	r3, #24
 8002e32:	011b      	lsls	r3, r3, #4
 8002e34:	4413      	add	r3, r2
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	6811      	ldr	r1, [r2, #0]
 8002e3c:	f043 0201 	orr.w	r2, r3, #1
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	3318      	adds	r3, #24
 8002e44:	011b      	lsls	r3, r3, #4
 8002e46:	440b      	add	r3, r1
 8002e48:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	e00e      	b.n	8002e6c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e52:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e006      	b.n	8002e6c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e62:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
  }
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3724      	adds	r7, #36	@ 0x24
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b087      	sub	sp, #28
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
 8002e84:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e8c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002e8e:	7dfb      	ldrb	r3, [r7, #23]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d003      	beq.n	8002e9c <HAL_CAN_GetRxMessage+0x24>
 8002e94:	7dfb      	ldrb	r3, [r7, #23]
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	f040 8103 	bne.w	80030a2 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10e      	bne.n	8002ec0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	f003 0303 	and.w	r3, r3, #3
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d116      	bne.n	8002ede <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e0f7      	b.n	80030b0 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	f003 0303 	and.w	r3, r3, #3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d107      	bne.n	8002ede <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e0e8      	b.n	80030b0 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	331b      	adds	r3, #27
 8002ee6:	011b      	lsls	r3, r3, #4
 8002ee8:	4413      	add	r3, r2
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0204 	and.w	r2, r3, #4
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10c      	bne.n	8002f16 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	331b      	adds	r3, #27
 8002f04:	011b      	lsls	r3, r3, #4
 8002f06:	4413      	add	r3, r2
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	0d5b      	lsrs	r3, r3, #21
 8002f0c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	e00b      	b.n	8002f2e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	331b      	adds	r3, #27
 8002f1e:	011b      	lsls	r3, r3, #4
 8002f20:	4413      	add	r3, r2
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	08db      	lsrs	r3, r3, #3
 8002f26:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	331b      	adds	r3, #27
 8002f36:	011b      	lsls	r3, r3, #4
 8002f38:	4413      	add	r3, r2
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0202 	and.w	r2, r3, #2
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	331b      	adds	r3, #27
 8002f4c:	011b      	lsls	r3, r3, #4
 8002f4e:	4413      	add	r3, r2
 8002f50:	3304      	adds	r3, #4
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0308 	and.w	r3, r3, #8
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d003      	beq.n	8002f64 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2208      	movs	r2, #8
 8002f60:	611a      	str	r2, [r3, #16]
 8002f62:	e00b      	b.n	8002f7c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	331b      	adds	r3, #27
 8002f6c:	011b      	lsls	r3, r3, #4
 8002f6e:	4413      	add	r3, r2
 8002f70:	3304      	adds	r3, #4
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 020f 	and.w	r2, r3, #15
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	331b      	adds	r3, #27
 8002f84:	011b      	lsls	r3, r3, #4
 8002f86:	4413      	add	r3, r2
 8002f88:	3304      	adds	r3, #4
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	0a1b      	lsrs	r3, r3, #8
 8002f8e:	b2da      	uxtb	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	331b      	adds	r3, #27
 8002f9c:	011b      	lsls	r3, r3, #4
 8002f9e:	4413      	add	r3, r2
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	0c1b      	lsrs	r3, r3, #16
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	011b      	lsls	r3, r3, #4
 8002fb4:	4413      	add	r3, r2
 8002fb6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	b2da      	uxtb	r2, r3
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	011b      	lsls	r3, r3, #4
 8002fca:	4413      	add	r3, r2
 8002fcc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	0a1a      	lsrs	r2, r3, #8
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	b2d2      	uxtb	r2, r2
 8002fda:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	011b      	lsls	r3, r3, #4
 8002fe4:	4413      	add	r3, r2
 8002fe6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	0c1a      	lsrs	r2, r3, #16
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	3302      	adds	r3, #2
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	011b      	lsls	r3, r3, #4
 8002ffe:	4413      	add	r3, r2
 8003000:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	0e1a      	lsrs	r2, r3, #24
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	3303      	adds	r3, #3
 800300c:	b2d2      	uxtb	r2, r2
 800300e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	011b      	lsls	r3, r3, #4
 8003018:	4413      	add	r3, r2
 800301a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	3304      	adds	r3, #4
 8003024:	b2d2      	uxtb	r2, r2
 8003026:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	011b      	lsls	r3, r3, #4
 8003030:	4413      	add	r3, r2
 8003032:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	0a1a      	lsrs	r2, r3, #8
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	3305      	adds	r3, #5
 800303e:	b2d2      	uxtb	r2, r2
 8003040:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	011b      	lsls	r3, r3, #4
 800304a:	4413      	add	r3, r2
 800304c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	0c1a      	lsrs	r2, r3, #16
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	3306      	adds	r3, #6
 8003058:	b2d2      	uxtb	r2, r2
 800305a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	011b      	lsls	r3, r3, #4
 8003064:	4413      	add	r3, r2
 8003066:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	0e1a      	lsrs	r2, r3, #24
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	3307      	adds	r3, #7
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d108      	bne.n	800308e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f042 0220 	orr.w	r2, r2, #32
 800308a:	60da      	str	r2, [r3, #12]
 800308c:	e007      	b.n	800309e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	691a      	ldr	r2, [r3, #16]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f042 0220 	orr.w	r2, r2, #32
 800309c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800309e:	2300      	movs	r3, #0
 80030a0:	e006      	b.n	80030b0 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
  }
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	371c      	adds	r7, #28
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030cc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80030ce:	7bfb      	ldrb	r3, [r7, #15]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d002      	beq.n	80030da <HAL_CAN_ActivateNotification+0x1e>
 80030d4:	7bfb      	ldrb	r3, [r7, #15]
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d109      	bne.n	80030ee <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	6959      	ldr	r1, [r3, #20]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80030ea:	2300      	movs	r3, #0
 80030ec:	e006      	b.n	80030fc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
  }
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3714      	adds	r7, #20
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b08a      	sub	sp, #40	@ 0x28
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003110:	2300      	movs	r3, #0
 8003112:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003144:	6a3b      	ldr	r3, [r7, #32]
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	d07c      	beq.n	8003248 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	2b00      	cmp	r3, #0
 8003156:	d023      	beq.n	80031a0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2201      	movs	r2, #1
 800315e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f983 	bl	8003476 <HAL_CAN_TxMailbox0CompleteCallback>
 8003170:	e016      	b.n	80031a0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b00      	cmp	r3, #0
 800317a:	d004      	beq.n	8003186 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800317c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003182:	627b      	str	r3, [r7, #36]	@ 0x24
 8003184:	e00c      	b.n	80031a0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	f003 0308 	and.w	r3, r3, #8
 800318c:	2b00      	cmp	r3, #0
 800318e:	d004      	beq.n	800319a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003192:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003196:	627b      	str	r3, [r7, #36]	@ 0x24
 8003198:	e002      	b.n	80031a0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 f989 	bl	80034b2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d024      	beq.n	80031f4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80031b2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 f963 	bl	800348a <HAL_CAN_TxMailbox1CompleteCallback>
 80031c4:	e016      	b.n	80031f4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d004      	beq.n	80031da <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80031d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80031d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80031d8:	e00c      	b.n	80031f4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d004      	beq.n	80031ee <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80031e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80031ec:	e002      	b.n	80031f4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 f969 	bl	80034c6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d024      	beq.n	8003248 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003206:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d003      	beq.n	800321a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 f943 	bl	800349e <HAL_CAN_TxMailbox2CompleteCallback>
 8003218:	e016      	b.n	8003248 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d004      	beq.n	800322e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003226:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800322a:	627b      	str	r3, [r7, #36]	@ 0x24
 800322c:	e00c      	b.n	8003248 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d004      	beq.n	8003242 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800323a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800323e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003240:	e002      	b.n	8003248 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 f949 	bl	80034da <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003248:	6a3b      	ldr	r3, [r7, #32]
 800324a:	f003 0308 	and.w	r3, r3, #8
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00c      	beq.n	800326c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	f003 0310 	and.w	r3, r3, #16
 8003258:	2b00      	cmp	r3, #0
 800325a:	d007      	beq.n	800326c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800325c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800325e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003262:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2210      	movs	r2, #16
 800326a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800326c:	6a3b      	ldr	r3, [r7, #32]
 800326e:	f003 0304 	and.w	r3, r3, #4
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00b      	beq.n	800328e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	f003 0308 	and.w	r3, r3, #8
 800327c:	2b00      	cmp	r3, #0
 800327e:	d006      	beq.n	800328e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2208      	movs	r2, #8
 8003286:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f000 f930 	bl	80034ee <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800328e:	6a3b      	ldr	r3, [r7, #32]
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d009      	beq.n	80032ac <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	f003 0303 	and.w	r3, r3, #3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d002      	beq.n	80032ac <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7fe fea8 	bl	8001ffc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80032ac:	6a3b      	ldr	r3, [r7, #32]
 80032ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00c      	beq.n	80032d0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	f003 0310 	and.w	r3, r3, #16
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d007      	beq.n	80032d0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80032c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80032c6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2210      	movs	r2, #16
 80032ce:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80032d0:	6a3b      	ldr	r3, [r7, #32]
 80032d2:	f003 0320 	and.w	r3, r3, #32
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00b      	beq.n	80032f2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	f003 0308 	and.w	r3, r3, #8
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d006      	beq.n	80032f2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2208      	movs	r2, #8
 80032ea:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 f912 	bl	8003516 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80032f2:	6a3b      	ldr	r3, [r7, #32]
 80032f4:	f003 0310 	and.w	r3, r3, #16
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d009      	beq.n	8003310 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	f003 0303 	and.w	r3, r3, #3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d002      	beq.n	8003310 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 f8f9 	bl	8003502 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003310:	6a3b      	ldr	r3, [r7, #32]
 8003312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00b      	beq.n	8003332 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	f003 0310 	and.w	r3, r3, #16
 8003320:	2b00      	cmp	r3, #0
 8003322:	d006      	beq.n	8003332 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2210      	movs	r2, #16
 800332a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 f8fc 	bl	800352a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003332:	6a3b      	ldr	r3, [r7, #32]
 8003334:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00b      	beq.n	8003354 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	f003 0308 	and.w	r3, r3, #8
 8003342:	2b00      	cmp	r3, #0
 8003344:	d006      	beq.n	8003354 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2208      	movs	r2, #8
 800334c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f8f5 	bl	800353e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003354:	6a3b      	ldr	r3, [r7, #32]
 8003356:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d07b      	beq.n	8003456 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b00      	cmp	r3, #0
 8003366:	d072      	beq.n	800344e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003368:	6a3b      	ldr	r3, [r7, #32]
 800336a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800336e:	2b00      	cmp	r3, #0
 8003370:	d008      	beq.n	8003384 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003378:	2b00      	cmp	r3, #0
 800337a:	d003      	beq.n	8003384 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800337c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800337e:	f043 0301 	orr.w	r3, r3, #1
 8003382:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003384:	6a3b      	ldr	r3, [r7, #32]
 8003386:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800338a:	2b00      	cmp	r3, #0
 800338c:	d008      	beq.n	80033a0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003394:	2b00      	cmp	r3, #0
 8003396:	d003      	beq.n	80033a0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800339a:	f043 0302 	orr.w	r3, r3, #2
 800339e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80033a0:	6a3b      	ldr	r3, [r7, #32]
 80033a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d008      	beq.n	80033bc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d003      	beq.n	80033bc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80033b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b6:	f043 0304 	orr.w	r3, r3, #4
 80033ba:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80033bc:	6a3b      	ldr	r3, [r7, #32]
 80033be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d043      	beq.n	800344e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d03e      	beq.n	800344e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80033d6:	2b60      	cmp	r3, #96	@ 0x60
 80033d8:	d02b      	beq.n	8003432 <HAL_CAN_IRQHandler+0x32a>
 80033da:	2b60      	cmp	r3, #96	@ 0x60
 80033dc:	d82e      	bhi.n	800343c <HAL_CAN_IRQHandler+0x334>
 80033de:	2b50      	cmp	r3, #80	@ 0x50
 80033e0:	d022      	beq.n	8003428 <HAL_CAN_IRQHandler+0x320>
 80033e2:	2b50      	cmp	r3, #80	@ 0x50
 80033e4:	d82a      	bhi.n	800343c <HAL_CAN_IRQHandler+0x334>
 80033e6:	2b40      	cmp	r3, #64	@ 0x40
 80033e8:	d019      	beq.n	800341e <HAL_CAN_IRQHandler+0x316>
 80033ea:	2b40      	cmp	r3, #64	@ 0x40
 80033ec:	d826      	bhi.n	800343c <HAL_CAN_IRQHandler+0x334>
 80033ee:	2b30      	cmp	r3, #48	@ 0x30
 80033f0:	d010      	beq.n	8003414 <HAL_CAN_IRQHandler+0x30c>
 80033f2:	2b30      	cmp	r3, #48	@ 0x30
 80033f4:	d822      	bhi.n	800343c <HAL_CAN_IRQHandler+0x334>
 80033f6:	2b10      	cmp	r3, #16
 80033f8:	d002      	beq.n	8003400 <HAL_CAN_IRQHandler+0x2f8>
 80033fa:	2b20      	cmp	r3, #32
 80033fc:	d005      	beq.n	800340a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80033fe:	e01d      	b.n	800343c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003402:	f043 0308 	orr.w	r3, r3, #8
 8003406:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003408:	e019      	b.n	800343e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800340a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800340c:	f043 0310 	orr.w	r3, r3, #16
 8003410:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003412:	e014      	b.n	800343e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003416:	f043 0320 	orr.w	r3, r3, #32
 800341a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800341c:	e00f      	b.n	800343e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800341e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003420:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003424:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003426:	e00a      	b.n	800343e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800342a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800342e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003430:	e005      	b.n	800343e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003434:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003438:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800343a:	e000      	b.n	800343e <HAL_CAN_IRQHandler+0x336>
            break;
 800343c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	699a      	ldr	r2, [r3, #24]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800344c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2204      	movs	r2, #4
 8003454:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003458:	2b00      	cmp	r3, #0
 800345a:	d008      	beq.n	800346e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003462:	431a      	orrs	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 f872 	bl	8003552 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800346e:	bf00      	nop
 8003470:	3728      	adds	r7, #40	@ 0x28
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003476:	b480      	push	{r7}
 8003478:	b083      	sub	sp, #12
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800347e:	bf00      	nop
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr

0800348a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800348a:	b480      	push	{r7}
 800348c:	b083      	sub	sp, #12
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003492:	bf00      	nop
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr

0800349e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800349e:	b480      	push	{r7}
 80034a0:	b083      	sub	sp, #12
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80034a6:	bf00      	nop
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr

080034b2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80034b2:	b480      	push	{r7}
 80034b4:	b083      	sub	sp, #12
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80034ba:	bf00      	nop
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80034c6:	b480      	push	{r7}
 80034c8:	b083      	sub	sp, #12
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80034ce:	bf00      	nop
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr

080034da <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80034da:	b480      	push	{r7}
 80034dc:	b083      	sub	sp, #12
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80034e2:	bf00      	nop
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr

080034ee <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80034ee:	b480      	push	{r7}
 80034f0:	b083      	sub	sp, #12
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80034f6:	bf00      	nop
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr

08003502 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003502:	b480      	push	{r7}
 8003504:	b083      	sub	sp, #12
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800350a:	bf00      	nop
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr

08003516 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003516:	b480      	push	{r7}
 8003518:	b083      	sub	sp, #12
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800351e:	bf00      	nop
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr

0800352a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800352a:	b480      	push	{r7}
 800352c:	b083      	sub	sp, #12
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003532:	bf00      	nop
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr

0800353e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800353e:	b480      	push	{r7}
 8003540:	b083      	sub	sp, #12
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003546:	bf00      	nop
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003552:	b480      	push	{r7}
 8003554:	b083      	sub	sp, #12
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800355a:	bf00      	nop
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
	...

08003568 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f003 0307 	and.w	r3, r3, #7
 8003576:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003578:	4b0c      	ldr	r3, [pc, #48]	@ (80035ac <__NVIC_SetPriorityGrouping+0x44>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800357e:	68ba      	ldr	r2, [r7, #8]
 8003580:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003584:	4013      	ands	r3, r2
 8003586:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003590:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003594:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800359a:	4a04      	ldr	r2, [pc, #16]	@ (80035ac <__NVIC_SetPriorityGrouping+0x44>)
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	60d3      	str	r3, [r2, #12]
}
 80035a0:	bf00      	nop
 80035a2:	3714      	adds	r7, #20
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr
 80035ac:	e000ed00 	.word	0xe000ed00

080035b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035b4:	4b04      	ldr	r3, [pc, #16]	@ (80035c8 <__NVIC_GetPriorityGrouping+0x18>)
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	0a1b      	lsrs	r3, r3, #8
 80035ba:	f003 0307 	and.w	r3, r3, #7
}
 80035be:	4618      	mov	r0, r3
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	e000ed00 	.word	0xe000ed00

080035cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	4603      	mov	r3, r0
 80035d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	db0b      	blt.n	80035f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035de:	79fb      	ldrb	r3, [r7, #7]
 80035e0:	f003 021f 	and.w	r2, r3, #31
 80035e4:	4907      	ldr	r1, [pc, #28]	@ (8003604 <__NVIC_EnableIRQ+0x38>)
 80035e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ea:	095b      	lsrs	r3, r3, #5
 80035ec:	2001      	movs	r0, #1
 80035ee:	fa00 f202 	lsl.w	r2, r0, r2
 80035f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80035f6:	bf00      	nop
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	e000e100 	.word	0xe000e100

08003608 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	4603      	mov	r3, r0
 8003610:	6039      	str	r1, [r7, #0]
 8003612:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003618:	2b00      	cmp	r3, #0
 800361a:	db0a      	blt.n	8003632 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	b2da      	uxtb	r2, r3
 8003620:	490c      	ldr	r1, [pc, #48]	@ (8003654 <__NVIC_SetPriority+0x4c>)
 8003622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003626:	0112      	lsls	r2, r2, #4
 8003628:	b2d2      	uxtb	r2, r2
 800362a:	440b      	add	r3, r1
 800362c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003630:	e00a      	b.n	8003648 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	b2da      	uxtb	r2, r3
 8003636:	4908      	ldr	r1, [pc, #32]	@ (8003658 <__NVIC_SetPriority+0x50>)
 8003638:	79fb      	ldrb	r3, [r7, #7]
 800363a:	f003 030f 	and.w	r3, r3, #15
 800363e:	3b04      	subs	r3, #4
 8003640:	0112      	lsls	r2, r2, #4
 8003642:	b2d2      	uxtb	r2, r2
 8003644:	440b      	add	r3, r1
 8003646:	761a      	strb	r2, [r3, #24]
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr
 8003654:	e000e100 	.word	0xe000e100
 8003658:	e000ed00 	.word	0xe000ed00

0800365c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800365c:	b480      	push	{r7}
 800365e:	b089      	sub	sp, #36	@ 0x24
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	f1c3 0307 	rsb	r3, r3, #7
 8003676:	2b04      	cmp	r3, #4
 8003678:	bf28      	it	cs
 800367a:	2304      	movcs	r3, #4
 800367c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	3304      	adds	r3, #4
 8003682:	2b06      	cmp	r3, #6
 8003684:	d902      	bls.n	800368c <NVIC_EncodePriority+0x30>
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	3b03      	subs	r3, #3
 800368a:	e000      	b.n	800368e <NVIC_EncodePriority+0x32>
 800368c:	2300      	movs	r3, #0
 800368e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003690:	f04f 32ff 	mov.w	r2, #4294967295
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	fa02 f303 	lsl.w	r3, r2, r3
 800369a:	43da      	mvns	r2, r3
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	401a      	ands	r2, r3
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036a4:	f04f 31ff 	mov.w	r1, #4294967295
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	fa01 f303 	lsl.w	r3, r1, r3
 80036ae:	43d9      	mvns	r1, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036b4:	4313      	orrs	r3, r2
         );
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3724      	adds	r7, #36	@ 0x24
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
	...

080036c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	3b01      	subs	r3, #1
 80036d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036d4:	d301      	bcc.n	80036da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036d6:	2301      	movs	r3, #1
 80036d8:	e00f      	b.n	80036fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036da:	4a0a      	ldr	r2, [pc, #40]	@ (8003704 <SysTick_Config+0x40>)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	3b01      	subs	r3, #1
 80036e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036e2:	210f      	movs	r1, #15
 80036e4:	f04f 30ff 	mov.w	r0, #4294967295
 80036e8:	f7ff ff8e 	bl	8003608 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036ec:	4b05      	ldr	r3, [pc, #20]	@ (8003704 <SysTick_Config+0x40>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036f2:	4b04      	ldr	r3, [pc, #16]	@ (8003704 <SysTick_Config+0x40>)
 80036f4:	2207      	movs	r2, #7
 80036f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	e000e010 	.word	0xe000e010

08003708 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f7ff ff29 	bl	8003568 <__NVIC_SetPriorityGrouping>
}
 8003716:	bf00      	nop
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800371e:	b580      	push	{r7, lr}
 8003720:	b086      	sub	sp, #24
 8003722:	af00      	add	r7, sp, #0
 8003724:	4603      	mov	r3, r0
 8003726:	60b9      	str	r1, [r7, #8]
 8003728:	607a      	str	r2, [r7, #4]
 800372a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800372c:	2300      	movs	r3, #0
 800372e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003730:	f7ff ff3e 	bl	80035b0 <__NVIC_GetPriorityGrouping>
 8003734:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	68b9      	ldr	r1, [r7, #8]
 800373a:	6978      	ldr	r0, [r7, #20]
 800373c:	f7ff ff8e 	bl	800365c <NVIC_EncodePriority>
 8003740:	4602      	mov	r2, r0
 8003742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003746:	4611      	mov	r1, r2
 8003748:	4618      	mov	r0, r3
 800374a:	f7ff ff5d 	bl	8003608 <__NVIC_SetPriority>
}
 800374e:	bf00      	nop
 8003750:	3718      	adds	r7, #24
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b082      	sub	sp, #8
 800375a:	af00      	add	r7, sp, #0
 800375c:	4603      	mov	r3, r0
 800375e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003764:	4618      	mov	r0, r3
 8003766:	f7ff ff31 	bl	80035cc <__NVIC_EnableIRQ>
}
 800376a:	bf00      	nop
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b082      	sub	sp, #8
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7ff ffa2 	bl	80036c4 <SysTick_Config>
 8003780:	4603      	mov	r3, r0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800378e:	f000 f802 	bl	8003796 <HAL_SYSTICK_Callback>
}
 8003792:	bf00      	nop
 8003794:	bd80      	pop	{r7, pc}

08003796 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8003796:	b480      	push	{r7}
 8003798:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800379a:	bf00      	nop
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80037ac:	2300      	movs	r3, #0
 80037ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80037b0:	f7ff f842 	bl	8002838 <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d101      	bne.n	80037c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e099      	b.n	80038f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2202      	movs	r2, #2
 80037c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 0201 	bic.w	r2, r2, #1
 80037de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037e0:	e00f      	b.n	8003802 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037e2:	f7ff f829 	bl	8002838 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b05      	cmp	r3, #5
 80037ee:	d908      	bls.n	8003802 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2220      	movs	r2, #32
 80037f4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2203      	movs	r2, #3
 80037fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e078      	b.n	80038f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1e8      	bne.n	80037e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	4b38      	ldr	r3, [pc, #224]	@ (80038fc <HAL_DMA_Init+0x158>)
 800381c:	4013      	ands	r3, r2
 800381e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800382e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800383a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003846:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800384e:	697a      	ldr	r2, [r7, #20]
 8003850:	4313      	orrs	r3, r2
 8003852:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003858:	2b04      	cmp	r3, #4
 800385a:	d107      	bne.n	800386c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003864:	4313      	orrs	r3, r2
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	4313      	orrs	r3, r2
 800386a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	f023 0307 	bic.w	r3, r3, #7
 8003882:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	4313      	orrs	r3, r2
 800388c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003892:	2b04      	cmp	r3, #4
 8003894:	d117      	bne.n	80038c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	4313      	orrs	r3, r2
 800389e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00e      	beq.n	80038c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 fa7b 	bl	8003da4 <DMA_CheckFifoParam>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d008      	beq.n	80038c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2240      	movs	r2, #64	@ 0x40
 80038b8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80038c2:	2301      	movs	r3, #1
 80038c4:	e016      	b.n	80038f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 fa32 	bl	8003d38 <DMA_CalcBaseAndBitshift>
 80038d4:	4603      	mov	r3, r0
 80038d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038dc:	223f      	movs	r2, #63	@ 0x3f
 80038de:	409a      	lsls	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3718      	adds	r7, #24
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	f010803f 	.word	0xf010803f

08003900 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800390c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800390e:	f7fe ff93 	bl	8002838 <HAL_GetTick>
 8003912:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b02      	cmp	r3, #2
 800391e:	d008      	beq.n	8003932 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2280      	movs	r2, #128	@ 0x80
 8003924:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e052      	b.n	80039d8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 0216 	bic.w	r2, r2, #22
 8003940:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	695a      	ldr	r2, [r3, #20]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003950:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003956:	2b00      	cmp	r3, #0
 8003958:	d103      	bne.n	8003962 <HAL_DMA_Abort+0x62>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800395e:	2b00      	cmp	r3, #0
 8003960:	d007      	beq.n	8003972 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 0208 	bic.w	r2, r2, #8
 8003970:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 0201 	bic.w	r2, r2, #1
 8003980:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003982:	e013      	b.n	80039ac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003984:	f7fe ff58 	bl	8002838 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b05      	cmp	r3, #5
 8003990:	d90c      	bls.n	80039ac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2220      	movs	r2, #32
 8003996:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2203      	movs	r2, #3
 800399c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e015      	b.n	80039d8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1e4      	bne.n	8003984 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039be:	223f      	movs	r2, #63	@ 0x3f
 80039c0:	409a      	lsls	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3710      	adds	r7, #16
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d004      	beq.n	80039fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2280      	movs	r2, #128	@ 0x80
 80039f8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e00c      	b.n	8003a18 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2205      	movs	r2, #5
 8003a02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 0201 	bic.w	r2, r2, #1
 8003a14:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a30:	4b8e      	ldr	r3, [pc, #568]	@ (8003c6c <HAL_DMA_IRQHandler+0x248>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a8e      	ldr	r2, [pc, #568]	@ (8003c70 <HAL_DMA_IRQHandler+0x24c>)
 8003a36:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3a:	0a9b      	lsrs	r3, r3, #10
 8003a3c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a42:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a4e:	2208      	movs	r2, #8
 8003a50:	409a      	lsls	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	4013      	ands	r3, r2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d01a      	beq.n	8003a90 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0304 	and.w	r3, r3, #4
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d013      	beq.n	8003a90 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0204 	bic.w	r2, r2, #4
 8003a76:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a7c:	2208      	movs	r2, #8
 8003a7e:	409a      	lsls	r2, r3
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a88:	f043 0201 	orr.w	r2, r3, #1
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a94:	2201      	movs	r2, #1
 8003a96:	409a      	lsls	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d012      	beq.n	8003ac6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00b      	beq.n	8003ac6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	409a      	lsls	r2, r3
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003abe:	f043 0202 	orr.w	r2, r3, #2
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aca:	2204      	movs	r2, #4
 8003acc:	409a      	lsls	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d012      	beq.n	8003afc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00b      	beq.n	8003afc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ae8:	2204      	movs	r2, #4
 8003aea:	409a      	lsls	r2, r3
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003af4:	f043 0204 	orr.w	r2, r3, #4
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b00:	2210      	movs	r2, #16
 8003b02:	409a      	lsls	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	4013      	ands	r3, r2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d043      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0308 	and.w	r3, r3, #8
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d03c      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b1e:	2210      	movs	r2, #16
 8003b20:	409a      	lsls	r2, r3
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d018      	beq.n	8003b66 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d108      	bne.n	8003b54 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d024      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	4798      	blx	r3
 8003b52:	e01f      	b.n	8003b94 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d01b      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	4798      	blx	r3
 8003b64:	e016      	b.n	8003b94 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d107      	bne.n	8003b84 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 0208 	bic.w	r2, r2, #8
 8003b82:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d003      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b98:	2220      	movs	r2, #32
 8003b9a:	409a      	lsls	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 808f 	beq.w	8003cc4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0310 	and.w	r3, r3, #16
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f000 8087 	beq.w	8003cc4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bba:	2220      	movs	r2, #32
 8003bbc:	409a      	lsls	r2, r3
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b05      	cmp	r3, #5
 8003bcc:	d136      	bne.n	8003c3c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 0216 	bic.w	r2, r2, #22
 8003bdc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	695a      	ldr	r2, [r3, #20]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003bec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d103      	bne.n	8003bfe <HAL_DMA_IRQHandler+0x1da>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d007      	beq.n	8003c0e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f022 0208 	bic.w	r2, r2, #8
 8003c0c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c12:	223f      	movs	r2, #63	@ 0x3f
 8003c14:	409a      	lsls	r2, r3
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d07e      	beq.n	8003d30 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	4798      	blx	r3
        }
        return;
 8003c3a:	e079      	b.n	8003d30 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d01d      	beq.n	8003c86 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d10d      	bne.n	8003c74 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d031      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	4798      	blx	r3
 8003c68:	e02c      	b.n	8003cc4 <HAL_DMA_IRQHandler+0x2a0>
 8003c6a:	bf00      	nop
 8003c6c:	20000008 	.word	0x20000008
 8003c70:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d023      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	4798      	blx	r3
 8003c84:	e01e      	b.n	8003cc4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10f      	bne.n	8003cb4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 0210 	bic.w	r2, r2, #16
 8003ca2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d003      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d032      	beq.n	8003d32 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d022      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2205      	movs	r2, #5
 8003cdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 0201 	bic.w	r2, r2, #1
 8003cee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	60bb      	str	r3, [r7, #8]
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d307      	bcc.n	8003d0c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1f2      	bne.n	8003cf0 <HAL_DMA_IRQHandler+0x2cc>
 8003d0a:	e000      	b.n	8003d0e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003d0c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d005      	beq.n	8003d32 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	4798      	blx	r3
 8003d2e:	e000      	b.n	8003d32 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003d30:	bf00      	nop
    }
  }
}
 8003d32:	3718      	adds	r7, #24
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	3b10      	subs	r3, #16
 8003d48:	4a14      	ldr	r2, [pc, #80]	@ (8003d9c <DMA_CalcBaseAndBitshift+0x64>)
 8003d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4e:	091b      	lsrs	r3, r3, #4
 8003d50:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d52:	4a13      	ldr	r2, [pc, #76]	@ (8003da0 <DMA_CalcBaseAndBitshift+0x68>)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	4413      	add	r3, r2
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2b03      	cmp	r3, #3
 8003d64:	d909      	bls.n	8003d7a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003d6e:	f023 0303 	bic.w	r3, r3, #3
 8003d72:	1d1a      	adds	r2, r3, #4
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	659a      	str	r2, [r3, #88]	@ 0x58
 8003d78:	e007      	b.n	8003d8a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003d82:	f023 0303 	bic.w	r3, r3, #3
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3714      	adds	r7, #20
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	aaaaaaab 	.word	0xaaaaaaab
 8003da0:	08009574 	.word	0x08009574

08003da4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dac:	2300      	movs	r3, #0
 8003dae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003db4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d11f      	bne.n	8003dfe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	2b03      	cmp	r3, #3
 8003dc2:	d856      	bhi.n	8003e72 <DMA_CheckFifoParam+0xce>
 8003dc4:	a201      	add	r2, pc, #4	@ (adr r2, 8003dcc <DMA_CheckFifoParam+0x28>)
 8003dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dca:	bf00      	nop
 8003dcc:	08003ddd 	.word	0x08003ddd
 8003dd0:	08003def 	.word	0x08003def
 8003dd4:	08003ddd 	.word	0x08003ddd
 8003dd8:	08003e73 	.word	0x08003e73
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d046      	beq.n	8003e76 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dec:	e043      	b.n	8003e76 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003df2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003df6:	d140      	bne.n	8003e7a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dfc:	e03d      	b.n	8003e7a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e06:	d121      	bne.n	8003e4c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	2b03      	cmp	r3, #3
 8003e0c:	d837      	bhi.n	8003e7e <DMA_CheckFifoParam+0xda>
 8003e0e:	a201      	add	r2, pc, #4	@ (adr r2, 8003e14 <DMA_CheckFifoParam+0x70>)
 8003e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e14:	08003e25 	.word	0x08003e25
 8003e18:	08003e2b 	.word	0x08003e2b
 8003e1c:	08003e25 	.word	0x08003e25
 8003e20:	08003e3d 	.word	0x08003e3d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	73fb      	strb	r3, [r7, #15]
      break;
 8003e28:	e030      	b.n	8003e8c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e2e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d025      	beq.n	8003e82 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e3a:	e022      	b.n	8003e82 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e40:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003e44:	d11f      	bne.n	8003e86 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e4a:	e01c      	b.n	8003e86 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d903      	bls.n	8003e5a <DMA_CheckFifoParam+0xb6>
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	2b03      	cmp	r3, #3
 8003e56:	d003      	beq.n	8003e60 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e58:	e018      	b.n	8003e8c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	73fb      	strb	r3, [r7, #15]
      break;
 8003e5e:	e015      	b.n	8003e8c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e64:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00e      	beq.n	8003e8a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e70:	e00b      	b.n	8003e8a <DMA_CheckFifoParam+0xe6>
      break;
 8003e72:	bf00      	nop
 8003e74:	e00a      	b.n	8003e8c <DMA_CheckFifoParam+0xe8>
      break;
 8003e76:	bf00      	nop
 8003e78:	e008      	b.n	8003e8c <DMA_CheckFifoParam+0xe8>
      break;
 8003e7a:	bf00      	nop
 8003e7c:	e006      	b.n	8003e8c <DMA_CheckFifoParam+0xe8>
      break;
 8003e7e:	bf00      	nop
 8003e80:	e004      	b.n	8003e8c <DMA_CheckFifoParam+0xe8>
      break;
 8003e82:	bf00      	nop
 8003e84:	e002      	b.n	8003e8c <DMA_CheckFifoParam+0xe8>
      break;   
 8003e86:	bf00      	nop
 8003e88:	e000      	b.n	8003e8c <DMA_CheckFifoParam+0xe8>
      break;
 8003e8a:	bf00      	nop
    }
  } 
  
  return status; 
 8003e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3714      	adds	r7, #20
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop

08003e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b089      	sub	sp, #36	@ 0x24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	61fb      	str	r3, [r7, #28]
 8003eb6:	e165      	b.n	8004184 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003eb8:	2201      	movs	r2, #1
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	4013      	ands	r3, r2
 8003eca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	f040 8154 	bne.w	800417e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f003 0303 	and.w	r3, r3, #3
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d005      	beq.n	8003eee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d130      	bne.n	8003f50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	005b      	lsls	r3, r3, #1
 8003ef8:	2203      	movs	r2, #3
 8003efa:	fa02 f303 	lsl.w	r3, r2, r3
 8003efe:	43db      	mvns	r3, r3
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	4013      	ands	r3, r2
 8003f04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	68da      	ldr	r2, [r3, #12]
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	69ba      	ldr	r2, [r7, #24]
 8003f1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f24:	2201      	movs	r2, #1
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2c:	43db      	mvns	r3, r3
 8003f2e:	69ba      	ldr	r2, [r7, #24]
 8003f30:	4013      	ands	r3, r2
 8003f32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	091b      	lsrs	r3, r3, #4
 8003f3a:	f003 0201 	and.w	r2, r3, #1
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	fa02 f303 	lsl.w	r3, r2, r3
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f003 0303 	and.w	r3, r3, #3
 8003f58:	2b03      	cmp	r3, #3
 8003f5a:	d017      	beq.n	8003f8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	2203      	movs	r2, #3
 8003f68:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6c:	43db      	mvns	r3, r3
 8003f6e:	69ba      	ldr	r2, [r7, #24]
 8003f70:	4013      	ands	r3, r2
 8003f72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	005b      	lsls	r3, r3, #1
 8003f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f003 0303 	and.w	r3, r3, #3
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d123      	bne.n	8003fe0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	08da      	lsrs	r2, r3, #3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	3208      	adds	r2, #8
 8003fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	f003 0307 	and.w	r3, r3, #7
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	220f      	movs	r2, #15
 8003fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb4:	43db      	mvns	r3, r3
 8003fb6:	69ba      	ldr	r2, [r7, #24]
 8003fb8:	4013      	ands	r3, r2
 8003fba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	691a      	ldr	r2, [r3, #16]
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	f003 0307 	and.w	r3, r3, #7
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	08da      	lsrs	r2, r3, #3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	3208      	adds	r2, #8
 8003fda:	69b9      	ldr	r1, [r7, #24]
 8003fdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	005b      	lsls	r3, r3, #1
 8003fea:	2203      	movs	r2, #3
 8003fec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff0:	43db      	mvns	r3, r3
 8003ff2:	69ba      	ldr	r2, [r7, #24]
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f003 0203 	and.w	r2, r3, #3
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	005b      	lsls	r3, r3, #1
 8004004:	fa02 f303 	lsl.w	r3, r2, r3
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	4313      	orrs	r3, r2
 800400c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800401c:	2b00      	cmp	r3, #0
 800401e:	f000 80ae 	beq.w	800417e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004022:	2300      	movs	r3, #0
 8004024:	60fb      	str	r3, [r7, #12]
 8004026:	4b5d      	ldr	r3, [pc, #372]	@ (800419c <HAL_GPIO_Init+0x300>)
 8004028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800402a:	4a5c      	ldr	r2, [pc, #368]	@ (800419c <HAL_GPIO_Init+0x300>)
 800402c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004030:	6453      	str	r3, [r2, #68]	@ 0x44
 8004032:	4b5a      	ldr	r3, [pc, #360]	@ (800419c <HAL_GPIO_Init+0x300>)
 8004034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004036:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800403a:	60fb      	str	r3, [r7, #12]
 800403c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800403e:	4a58      	ldr	r2, [pc, #352]	@ (80041a0 <HAL_GPIO_Init+0x304>)
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	089b      	lsrs	r3, r3, #2
 8004044:	3302      	adds	r3, #2
 8004046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800404a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	f003 0303 	and.w	r3, r3, #3
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	220f      	movs	r2, #15
 8004056:	fa02 f303 	lsl.w	r3, r2, r3
 800405a:	43db      	mvns	r3, r3
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	4013      	ands	r3, r2
 8004060:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a4f      	ldr	r2, [pc, #316]	@ (80041a4 <HAL_GPIO_Init+0x308>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d025      	beq.n	80040b6 <HAL_GPIO_Init+0x21a>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a4e      	ldr	r2, [pc, #312]	@ (80041a8 <HAL_GPIO_Init+0x30c>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d01f      	beq.n	80040b2 <HAL_GPIO_Init+0x216>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a4d      	ldr	r2, [pc, #308]	@ (80041ac <HAL_GPIO_Init+0x310>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d019      	beq.n	80040ae <HAL_GPIO_Init+0x212>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a4c      	ldr	r2, [pc, #304]	@ (80041b0 <HAL_GPIO_Init+0x314>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d013      	beq.n	80040aa <HAL_GPIO_Init+0x20e>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a4b      	ldr	r2, [pc, #300]	@ (80041b4 <HAL_GPIO_Init+0x318>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d00d      	beq.n	80040a6 <HAL_GPIO_Init+0x20a>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a4a      	ldr	r2, [pc, #296]	@ (80041b8 <HAL_GPIO_Init+0x31c>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d007      	beq.n	80040a2 <HAL_GPIO_Init+0x206>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a49      	ldr	r2, [pc, #292]	@ (80041bc <HAL_GPIO_Init+0x320>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d101      	bne.n	800409e <HAL_GPIO_Init+0x202>
 800409a:	2306      	movs	r3, #6
 800409c:	e00c      	b.n	80040b8 <HAL_GPIO_Init+0x21c>
 800409e:	2307      	movs	r3, #7
 80040a0:	e00a      	b.n	80040b8 <HAL_GPIO_Init+0x21c>
 80040a2:	2305      	movs	r3, #5
 80040a4:	e008      	b.n	80040b8 <HAL_GPIO_Init+0x21c>
 80040a6:	2304      	movs	r3, #4
 80040a8:	e006      	b.n	80040b8 <HAL_GPIO_Init+0x21c>
 80040aa:	2303      	movs	r3, #3
 80040ac:	e004      	b.n	80040b8 <HAL_GPIO_Init+0x21c>
 80040ae:	2302      	movs	r3, #2
 80040b0:	e002      	b.n	80040b8 <HAL_GPIO_Init+0x21c>
 80040b2:	2301      	movs	r3, #1
 80040b4:	e000      	b.n	80040b8 <HAL_GPIO_Init+0x21c>
 80040b6:	2300      	movs	r3, #0
 80040b8:	69fa      	ldr	r2, [r7, #28]
 80040ba:	f002 0203 	and.w	r2, r2, #3
 80040be:	0092      	lsls	r2, r2, #2
 80040c0:	4093      	lsls	r3, r2
 80040c2:	69ba      	ldr	r2, [r7, #24]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040c8:	4935      	ldr	r1, [pc, #212]	@ (80041a0 <HAL_GPIO_Init+0x304>)
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	089b      	lsrs	r3, r3, #2
 80040ce:	3302      	adds	r3, #2
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040d6:	4b3a      	ldr	r3, [pc, #232]	@ (80041c0 <HAL_GPIO_Init+0x324>)
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	43db      	mvns	r3, r3
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	4013      	ands	r3, r2
 80040e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d003      	beq.n	80040fa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80040f2:	69ba      	ldr	r2, [r7, #24]
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040fa:	4a31      	ldr	r2, [pc, #196]	@ (80041c0 <HAL_GPIO_Init+0x324>)
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004100:	4b2f      	ldr	r3, [pc, #188]	@ (80041c0 <HAL_GPIO_Init+0x324>)
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	43db      	mvns	r3, r3
 800410a:	69ba      	ldr	r2, [r7, #24]
 800410c:	4013      	ands	r3, r2
 800410e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d003      	beq.n	8004124 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	4313      	orrs	r3, r2
 8004122:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004124:	4a26      	ldr	r2, [pc, #152]	@ (80041c0 <HAL_GPIO_Init+0x324>)
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800412a:	4b25      	ldr	r3, [pc, #148]	@ (80041c0 <HAL_GPIO_Init+0x324>)
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	43db      	mvns	r3, r3
 8004134:	69ba      	ldr	r2, [r7, #24]
 8004136:	4013      	ands	r3, r2
 8004138:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d003      	beq.n	800414e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004146:	69ba      	ldr	r2, [r7, #24]
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	4313      	orrs	r3, r2
 800414c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800414e:	4a1c      	ldr	r2, [pc, #112]	@ (80041c0 <HAL_GPIO_Init+0x324>)
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004154:	4b1a      	ldr	r3, [pc, #104]	@ (80041c0 <HAL_GPIO_Init+0x324>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	43db      	mvns	r3, r3
 800415e:	69ba      	ldr	r2, [r7, #24]
 8004160:	4013      	ands	r3, r2
 8004162:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d003      	beq.n	8004178 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	4313      	orrs	r3, r2
 8004176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004178:	4a11      	ldr	r2, [pc, #68]	@ (80041c0 <HAL_GPIO_Init+0x324>)
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	3301      	adds	r3, #1
 8004182:	61fb      	str	r3, [r7, #28]
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	2b0f      	cmp	r3, #15
 8004188:	f67f ae96 	bls.w	8003eb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800418c:	bf00      	nop
 800418e:	bf00      	nop
 8004190:	3724      	adds	r7, #36	@ 0x24
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	40023800 	.word	0x40023800
 80041a0:	40013800 	.word	0x40013800
 80041a4:	40020000 	.word	0x40020000
 80041a8:	40020400 	.word	0x40020400
 80041ac:	40020800 	.word	0x40020800
 80041b0:	40020c00 	.word	0x40020c00
 80041b4:	40021000 	.word	0x40021000
 80041b8:	40021400 	.word	0x40021400
 80041bc:	40021800 	.word	0x40021800
 80041c0:	40013c00 	.word	0x40013c00

080041c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	460b      	mov	r3, r1
 80041ce:	807b      	strh	r3, [r7, #2]
 80041d0:	4613      	mov	r3, r2
 80041d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041d4:	787b      	ldrb	r3, [r7, #1]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d003      	beq.n	80041e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041da:	887a      	ldrh	r2, [r7, #2]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80041e0:	e003      	b.n	80041ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80041e2:	887b      	ldrh	r3, [r7, #2]
 80041e4:	041a      	lsls	r2, r3, #16
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	619a      	str	r2, [r3, #24]
}
 80041ea:	bf00      	nop
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041f6:	b480      	push	{r7}
 80041f8:	b085      	sub	sp, #20
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
 80041fe:	460b      	mov	r3, r1
 8004200:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004208:	887a      	ldrh	r2, [r7, #2]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	4013      	ands	r3, r2
 800420e:	041a      	lsls	r2, r3, #16
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	43d9      	mvns	r1, r3
 8004214:	887b      	ldrh	r3, [r7, #2]
 8004216:	400b      	ands	r3, r1
 8004218:	431a      	orrs	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	619a      	str	r2, [r3, #24]
}
 800421e:	bf00      	nop
 8004220:	3714      	adds	r7, #20
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
	...

0800422c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d101      	bne.n	8004240 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e0cc      	b.n	80043da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004240:	4b68      	ldr	r3, [pc, #416]	@ (80043e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 030f 	and.w	r3, r3, #15
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	429a      	cmp	r2, r3
 800424c:	d90c      	bls.n	8004268 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800424e:	4b65      	ldr	r3, [pc, #404]	@ (80043e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	b2d2      	uxtb	r2, r2
 8004254:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004256:	4b63      	ldr	r3, [pc, #396]	@ (80043e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 030f 	and.w	r3, r3, #15
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	429a      	cmp	r2, r3
 8004262:	d001      	beq.n	8004268 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e0b8      	b.n	80043da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d020      	beq.n	80042b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0304 	and.w	r3, r3, #4
 800427c:	2b00      	cmp	r3, #0
 800427e:	d005      	beq.n	800428c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004280:	4b59      	ldr	r3, [pc, #356]	@ (80043e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	4a58      	ldr	r2, [pc, #352]	@ (80043e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004286:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800428a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0308 	and.w	r3, r3, #8
 8004294:	2b00      	cmp	r3, #0
 8004296:	d005      	beq.n	80042a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004298:	4b53      	ldr	r3, [pc, #332]	@ (80043e8 <HAL_RCC_ClockConfig+0x1bc>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	4a52      	ldr	r2, [pc, #328]	@ (80043e8 <HAL_RCC_ClockConfig+0x1bc>)
 800429e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80042a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042a4:	4b50      	ldr	r3, [pc, #320]	@ (80043e8 <HAL_RCC_ClockConfig+0x1bc>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	494d      	ldr	r1, [pc, #308]	@ (80043e8 <HAL_RCC_ClockConfig+0x1bc>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d044      	beq.n	800434c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d107      	bne.n	80042da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ca:	4b47      	ldr	r3, [pc, #284]	@ (80043e8 <HAL_RCC_ClockConfig+0x1bc>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d119      	bne.n	800430a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e07f      	b.n	80043da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d003      	beq.n	80042ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042e6:	2b03      	cmp	r3, #3
 80042e8:	d107      	bne.n	80042fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042ea:	4b3f      	ldr	r3, [pc, #252]	@ (80043e8 <HAL_RCC_ClockConfig+0x1bc>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d109      	bne.n	800430a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e06f      	b.n	80043da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042fa:	4b3b      	ldr	r3, [pc, #236]	@ (80043e8 <HAL_RCC_ClockConfig+0x1bc>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d101      	bne.n	800430a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e067      	b.n	80043da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800430a:	4b37      	ldr	r3, [pc, #220]	@ (80043e8 <HAL_RCC_ClockConfig+0x1bc>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f023 0203 	bic.w	r2, r3, #3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	4934      	ldr	r1, [pc, #208]	@ (80043e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004318:	4313      	orrs	r3, r2
 800431a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800431c:	f7fe fa8c 	bl	8002838 <HAL_GetTick>
 8004320:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004322:	e00a      	b.n	800433a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004324:	f7fe fa88 	bl	8002838 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004332:	4293      	cmp	r3, r2
 8004334:	d901      	bls.n	800433a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e04f      	b.n	80043da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800433a:	4b2b      	ldr	r3, [pc, #172]	@ (80043e8 <HAL_RCC_ClockConfig+0x1bc>)
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f003 020c 	and.w	r2, r3, #12
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	429a      	cmp	r2, r3
 800434a:	d1eb      	bne.n	8004324 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800434c:	4b25      	ldr	r3, [pc, #148]	@ (80043e4 <HAL_RCC_ClockConfig+0x1b8>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 030f 	and.w	r3, r3, #15
 8004354:	683a      	ldr	r2, [r7, #0]
 8004356:	429a      	cmp	r2, r3
 8004358:	d20c      	bcs.n	8004374 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800435a:	4b22      	ldr	r3, [pc, #136]	@ (80043e4 <HAL_RCC_ClockConfig+0x1b8>)
 800435c:	683a      	ldr	r2, [r7, #0]
 800435e:	b2d2      	uxtb	r2, r2
 8004360:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004362:	4b20      	ldr	r3, [pc, #128]	@ (80043e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 030f 	and.w	r3, r3, #15
 800436a:	683a      	ldr	r2, [r7, #0]
 800436c:	429a      	cmp	r2, r3
 800436e:	d001      	beq.n	8004374 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e032      	b.n	80043da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0304 	and.w	r3, r3, #4
 800437c:	2b00      	cmp	r3, #0
 800437e:	d008      	beq.n	8004392 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004380:	4b19      	ldr	r3, [pc, #100]	@ (80043e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	4916      	ldr	r1, [pc, #88]	@ (80043e8 <HAL_RCC_ClockConfig+0x1bc>)
 800438e:	4313      	orrs	r3, r2
 8004390:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0308 	and.w	r3, r3, #8
 800439a:	2b00      	cmp	r3, #0
 800439c:	d009      	beq.n	80043b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800439e:	4b12      	ldr	r3, [pc, #72]	@ (80043e8 <HAL_RCC_ClockConfig+0x1bc>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	00db      	lsls	r3, r3, #3
 80043ac:	490e      	ldr	r1, [pc, #56]	@ (80043e8 <HAL_RCC_ClockConfig+0x1bc>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043b2:	f000 f855 	bl	8004460 <HAL_RCC_GetSysClockFreq>
 80043b6:	4602      	mov	r2, r0
 80043b8:	4b0b      	ldr	r3, [pc, #44]	@ (80043e8 <HAL_RCC_ClockConfig+0x1bc>)
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	091b      	lsrs	r3, r3, #4
 80043be:	f003 030f 	and.w	r3, r3, #15
 80043c2:	490a      	ldr	r1, [pc, #40]	@ (80043ec <HAL_RCC_ClockConfig+0x1c0>)
 80043c4:	5ccb      	ldrb	r3, [r1, r3]
 80043c6:	fa22 f303 	lsr.w	r3, r2, r3
 80043ca:	4a09      	ldr	r2, [pc, #36]	@ (80043f0 <HAL_RCC_ClockConfig+0x1c4>)
 80043cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80043ce:	4b09      	ldr	r3, [pc, #36]	@ (80043f4 <HAL_RCC_ClockConfig+0x1c8>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7fe f9ec 	bl	80027b0 <HAL_InitTick>

  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3710      	adds	r7, #16
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	40023c00 	.word	0x40023c00
 80043e8:	40023800 	.word	0x40023800
 80043ec:	0800955c 	.word	0x0800955c
 80043f0:	20000008 	.word	0x20000008
 80043f4:	2000000c 	.word	0x2000000c

080043f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043f8:	b480      	push	{r7}
 80043fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043fc:	4b03      	ldr	r3, [pc, #12]	@ (800440c <HAL_RCC_GetHCLKFreq+0x14>)
 80043fe:	681b      	ldr	r3, [r3, #0]
}
 8004400:	4618      	mov	r0, r3
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	20000008 	.word	0x20000008

08004410 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004414:	f7ff fff0 	bl	80043f8 <HAL_RCC_GetHCLKFreq>
 8004418:	4602      	mov	r2, r0
 800441a:	4b05      	ldr	r3, [pc, #20]	@ (8004430 <HAL_RCC_GetPCLK1Freq+0x20>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	0a9b      	lsrs	r3, r3, #10
 8004420:	f003 0307 	and.w	r3, r3, #7
 8004424:	4903      	ldr	r1, [pc, #12]	@ (8004434 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004426:	5ccb      	ldrb	r3, [r1, r3]
 8004428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800442c:	4618      	mov	r0, r3
 800442e:	bd80      	pop	{r7, pc}
 8004430:	40023800 	.word	0x40023800
 8004434:	0800956c 	.word	0x0800956c

08004438 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800443c:	f7ff ffdc 	bl	80043f8 <HAL_RCC_GetHCLKFreq>
 8004440:	4602      	mov	r2, r0
 8004442:	4b05      	ldr	r3, [pc, #20]	@ (8004458 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	0b5b      	lsrs	r3, r3, #13
 8004448:	f003 0307 	and.w	r3, r3, #7
 800444c:	4903      	ldr	r1, [pc, #12]	@ (800445c <HAL_RCC_GetPCLK2Freq+0x24>)
 800444e:	5ccb      	ldrb	r3, [r1, r3]
 8004450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004454:	4618      	mov	r0, r3
 8004456:	bd80      	pop	{r7, pc}
 8004458:	40023800 	.word	0x40023800
 800445c:	0800956c 	.word	0x0800956c

08004460 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004460:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004464:	b0ae      	sub	sp, #184	@ 0xb8
 8004466:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004468:	2300      	movs	r3, #0
 800446a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800446e:	2300      	movs	r3, #0
 8004470:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004474:	2300      	movs	r3, #0
 8004476:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800447a:	2300      	movs	r3, #0
 800447c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004480:	2300      	movs	r3, #0
 8004482:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004486:	4bcb      	ldr	r3, [pc, #812]	@ (80047b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f003 030c 	and.w	r3, r3, #12
 800448e:	2b0c      	cmp	r3, #12
 8004490:	f200 8206 	bhi.w	80048a0 <HAL_RCC_GetSysClockFreq+0x440>
 8004494:	a201      	add	r2, pc, #4	@ (adr r2, 800449c <HAL_RCC_GetSysClockFreq+0x3c>)
 8004496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449a:	bf00      	nop
 800449c:	080044d1 	.word	0x080044d1
 80044a0:	080048a1 	.word	0x080048a1
 80044a4:	080048a1 	.word	0x080048a1
 80044a8:	080048a1 	.word	0x080048a1
 80044ac:	080044d9 	.word	0x080044d9
 80044b0:	080048a1 	.word	0x080048a1
 80044b4:	080048a1 	.word	0x080048a1
 80044b8:	080048a1 	.word	0x080048a1
 80044bc:	080044e1 	.word	0x080044e1
 80044c0:	080048a1 	.word	0x080048a1
 80044c4:	080048a1 	.word	0x080048a1
 80044c8:	080048a1 	.word	0x080048a1
 80044cc:	080046d1 	.word	0x080046d1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044d0:	4bb9      	ldr	r3, [pc, #740]	@ (80047b8 <HAL_RCC_GetSysClockFreq+0x358>)
 80044d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 80044d6:	e1e7      	b.n	80048a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044d8:	4bb8      	ldr	r3, [pc, #736]	@ (80047bc <HAL_RCC_GetSysClockFreq+0x35c>)
 80044da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80044de:	e1e3      	b.n	80048a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044e0:	4bb4      	ldr	r3, [pc, #720]	@ (80047b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044ec:	4bb1      	ldr	r3, [pc, #708]	@ (80047b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d071      	beq.n	80045dc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044f8:	4bae      	ldr	r3, [pc, #696]	@ (80047b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	099b      	lsrs	r3, r3, #6
 80044fe:	2200      	movs	r2, #0
 8004500:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004504:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004508:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800450c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004510:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004514:	2300      	movs	r3, #0
 8004516:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800451a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800451e:	4622      	mov	r2, r4
 8004520:	462b      	mov	r3, r5
 8004522:	f04f 0000 	mov.w	r0, #0
 8004526:	f04f 0100 	mov.w	r1, #0
 800452a:	0159      	lsls	r1, r3, #5
 800452c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004530:	0150      	lsls	r0, r2, #5
 8004532:	4602      	mov	r2, r0
 8004534:	460b      	mov	r3, r1
 8004536:	4621      	mov	r1, r4
 8004538:	1a51      	subs	r1, r2, r1
 800453a:	6439      	str	r1, [r7, #64]	@ 0x40
 800453c:	4629      	mov	r1, r5
 800453e:	eb63 0301 	sbc.w	r3, r3, r1
 8004542:	647b      	str	r3, [r7, #68]	@ 0x44
 8004544:	f04f 0200 	mov.w	r2, #0
 8004548:	f04f 0300 	mov.w	r3, #0
 800454c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004550:	4649      	mov	r1, r9
 8004552:	018b      	lsls	r3, r1, #6
 8004554:	4641      	mov	r1, r8
 8004556:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800455a:	4641      	mov	r1, r8
 800455c:	018a      	lsls	r2, r1, #6
 800455e:	4641      	mov	r1, r8
 8004560:	1a51      	subs	r1, r2, r1
 8004562:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004564:	4649      	mov	r1, r9
 8004566:	eb63 0301 	sbc.w	r3, r3, r1
 800456a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800456c:	f04f 0200 	mov.w	r2, #0
 8004570:	f04f 0300 	mov.w	r3, #0
 8004574:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004578:	4649      	mov	r1, r9
 800457a:	00cb      	lsls	r3, r1, #3
 800457c:	4641      	mov	r1, r8
 800457e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004582:	4641      	mov	r1, r8
 8004584:	00ca      	lsls	r2, r1, #3
 8004586:	4610      	mov	r0, r2
 8004588:	4619      	mov	r1, r3
 800458a:	4603      	mov	r3, r0
 800458c:	4622      	mov	r2, r4
 800458e:	189b      	adds	r3, r3, r2
 8004590:	633b      	str	r3, [r7, #48]	@ 0x30
 8004592:	462b      	mov	r3, r5
 8004594:	460a      	mov	r2, r1
 8004596:	eb42 0303 	adc.w	r3, r2, r3
 800459a:	637b      	str	r3, [r7, #52]	@ 0x34
 800459c:	f04f 0200 	mov.w	r2, #0
 80045a0:	f04f 0300 	mov.w	r3, #0
 80045a4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80045a8:	4629      	mov	r1, r5
 80045aa:	024b      	lsls	r3, r1, #9
 80045ac:	4621      	mov	r1, r4
 80045ae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80045b2:	4621      	mov	r1, r4
 80045b4:	024a      	lsls	r2, r1, #9
 80045b6:	4610      	mov	r0, r2
 80045b8:	4619      	mov	r1, r3
 80045ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80045be:	2200      	movs	r2, #0
 80045c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80045c4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80045c8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80045cc:	f7fc fb3c 	bl	8000c48 <__aeabi_uldivmod>
 80045d0:	4602      	mov	r2, r0
 80045d2:	460b      	mov	r3, r1
 80045d4:	4613      	mov	r3, r2
 80045d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80045da:	e067      	b.n	80046ac <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045dc:	4b75      	ldr	r3, [pc, #468]	@ (80047b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	099b      	lsrs	r3, r3, #6
 80045e2:	2200      	movs	r2, #0
 80045e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80045e8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80045ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80045f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80045f6:	2300      	movs	r3, #0
 80045f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80045fa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80045fe:	4622      	mov	r2, r4
 8004600:	462b      	mov	r3, r5
 8004602:	f04f 0000 	mov.w	r0, #0
 8004606:	f04f 0100 	mov.w	r1, #0
 800460a:	0159      	lsls	r1, r3, #5
 800460c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004610:	0150      	lsls	r0, r2, #5
 8004612:	4602      	mov	r2, r0
 8004614:	460b      	mov	r3, r1
 8004616:	4621      	mov	r1, r4
 8004618:	1a51      	subs	r1, r2, r1
 800461a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800461c:	4629      	mov	r1, r5
 800461e:	eb63 0301 	sbc.w	r3, r3, r1
 8004622:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004624:	f04f 0200 	mov.w	r2, #0
 8004628:	f04f 0300 	mov.w	r3, #0
 800462c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004630:	4649      	mov	r1, r9
 8004632:	018b      	lsls	r3, r1, #6
 8004634:	4641      	mov	r1, r8
 8004636:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800463a:	4641      	mov	r1, r8
 800463c:	018a      	lsls	r2, r1, #6
 800463e:	4641      	mov	r1, r8
 8004640:	ebb2 0a01 	subs.w	sl, r2, r1
 8004644:	4649      	mov	r1, r9
 8004646:	eb63 0b01 	sbc.w	fp, r3, r1
 800464a:	f04f 0200 	mov.w	r2, #0
 800464e:	f04f 0300 	mov.w	r3, #0
 8004652:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004656:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800465a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800465e:	4692      	mov	sl, r2
 8004660:	469b      	mov	fp, r3
 8004662:	4623      	mov	r3, r4
 8004664:	eb1a 0303 	adds.w	r3, sl, r3
 8004668:	623b      	str	r3, [r7, #32]
 800466a:	462b      	mov	r3, r5
 800466c:	eb4b 0303 	adc.w	r3, fp, r3
 8004670:	627b      	str	r3, [r7, #36]	@ 0x24
 8004672:	f04f 0200 	mov.w	r2, #0
 8004676:	f04f 0300 	mov.w	r3, #0
 800467a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800467e:	4629      	mov	r1, r5
 8004680:	028b      	lsls	r3, r1, #10
 8004682:	4621      	mov	r1, r4
 8004684:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004688:	4621      	mov	r1, r4
 800468a:	028a      	lsls	r2, r1, #10
 800468c:	4610      	mov	r0, r2
 800468e:	4619      	mov	r1, r3
 8004690:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004694:	2200      	movs	r2, #0
 8004696:	673b      	str	r3, [r7, #112]	@ 0x70
 8004698:	677a      	str	r2, [r7, #116]	@ 0x74
 800469a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800469e:	f7fc fad3 	bl	8000c48 <__aeabi_uldivmod>
 80046a2:	4602      	mov	r2, r0
 80046a4:	460b      	mov	r3, r1
 80046a6:	4613      	mov	r3, r2
 80046a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80046ac:	4b41      	ldr	r3, [pc, #260]	@ (80047b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	0c1b      	lsrs	r3, r3, #16
 80046b2:	f003 0303 	and.w	r3, r3, #3
 80046b6:	3301      	adds	r3, #1
 80046b8:	005b      	lsls	r3, r3, #1
 80046ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80046be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80046c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80046c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80046ce:	e0eb      	b.n	80048a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046d0:	4b38      	ldr	r3, [pc, #224]	@ (80047b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046dc:	4b35      	ldr	r3, [pc, #212]	@ (80047b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d06b      	beq.n	80047c0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046e8:	4b32      	ldr	r3, [pc, #200]	@ (80047b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	099b      	lsrs	r3, r3, #6
 80046ee:	2200      	movs	r2, #0
 80046f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80046f2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80046f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80046f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80046fc:	2300      	movs	r3, #0
 80046fe:	667b      	str	r3, [r7, #100]	@ 0x64
 8004700:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004704:	4622      	mov	r2, r4
 8004706:	462b      	mov	r3, r5
 8004708:	f04f 0000 	mov.w	r0, #0
 800470c:	f04f 0100 	mov.w	r1, #0
 8004710:	0159      	lsls	r1, r3, #5
 8004712:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004716:	0150      	lsls	r0, r2, #5
 8004718:	4602      	mov	r2, r0
 800471a:	460b      	mov	r3, r1
 800471c:	4621      	mov	r1, r4
 800471e:	1a51      	subs	r1, r2, r1
 8004720:	61b9      	str	r1, [r7, #24]
 8004722:	4629      	mov	r1, r5
 8004724:	eb63 0301 	sbc.w	r3, r3, r1
 8004728:	61fb      	str	r3, [r7, #28]
 800472a:	f04f 0200 	mov.w	r2, #0
 800472e:	f04f 0300 	mov.w	r3, #0
 8004732:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004736:	4659      	mov	r1, fp
 8004738:	018b      	lsls	r3, r1, #6
 800473a:	4651      	mov	r1, sl
 800473c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004740:	4651      	mov	r1, sl
 8004742:	018a      	lsls	r2, r1, #6
 8004744:	4651      	mov	r1, sl
 8004746:	ebb2 0801 	subs.w	r8, r2, r1
 800474a:	4659      	mov	r1, fp
 800474c:	eb63 0901 	sbc.w	r9, r3, r1
 8004750:	f04f 0200 	mov.w	r2, #0
 8004754:	f04f 0300 	mov.w	r3, #0
 8004758:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800475c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004760:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004764:	4690      	mov	r8, r2
 8004766:	4699      	mov	r9, r3
 8004768:	4623      	mov	r3, r4
 800476a:	eb18 0303 	adds.w	r3, r8, r3
 800476e:	613b      	str	r3, [r7, #16]
 8004770:	462b      	mov	r3, r5
 8004772:	eb49 0303 	adc.w	r3, r9, r3
 8004776:	617b      	str	r3, [r7, #20]
 8004778:	f04f 0200 	mov.w	r2, #0
 800477c:	f04f 0300 	mov.w	r3, #0
 8004780:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004784:	4629      	mov	r1, r5
 8004786:	024b      	lsls	r3, r1, #9
 8004788:	4621      	mov	r1, r4
 800478a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800478e:	4621      	mov	r1, r4
 8004790:	024a      	lsls	r2, r1, #9
 8004792:	4610      	mov	r0, r2
 8004794:	4619      	mov	r1, r3
 8004796:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800479a:	2200      	movs	r2, #0
 800479c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800479e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80047a0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80047a4:	f7fc fa50 	bl	8000c48 <__aeabi_uldivmod>
 80047a8:	4602      	mov	r2, r0
 80047aa:	460b      	mov	r3, r1
 80047ac:	4613      	mov	r3, r2
 80047ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80047b2:	e065      	b.n	8004880 <HAL_RCC_GetSysClockFreq+0x420>
 80047b4:	40023800 	.word	0x40023800
 80047b8:	00f42400 	.word	0x00f42400
 80047bc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047c0:	4b3d      	ldr	r3, [pc, #244]	@ (80048b8 <HAL_RCC_GetSysClockFreq+0x458>)
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	099b      	lsrs	r3, r3, #6
 80047c6:	2200      	movs	r2, #0
 80047c8:	4618      	mov	r0, r3
 80047ca:	4611      	mov	r1, r2
 80047cc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80047d0:	653b      	str	r3, [r7, #80]	@ 0x50
 80047d2:	2300      	movs	r3, #0
 80047d4:	657b      	str	r3, [r7, #84]	@ 0x54
 80047d6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80047da:	4642      	mov	r2, r8
 80047dc:	464b      	mov	r3, r9
 80047de:	f04f 0000 	mov.w	r0, #0
 80047e2:	f04f 0100 	mov.w	r1, #0
 80047e6:	0159      	lsls	r1, r3, #5
 80047e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047ec:	0150      	lsls	r0, r2, #5
 80047ee:	4602      	mov	r2, r0
 80047f0:	460b      	mov	r3, r1
 80047f2:	4641      	mov	r1, r8
 80047f4:	1a51      	subs	r1, r2, r1
 80047f6:	60b9      	str	r1, [r7, #8]
 80047f8:	4649      	mov	r1, r9
 80047fa:	eb63 0301 	sbc.w	r3, r3, r1
 80047fe:	60fb      	str	r3, [r7, #12]
 8004800:	f04f 0200 	mov.w	r2, #0
 8004804:	f04f 0300 	mov.w	r3, #0
 8004808:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800480c:	4659      	mov	r1, fp
 800480e:	018b      	lsls	r3, r1, #6
 8004810:	4651      	mov	r1, sl
 8004812:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004816:	4651      	mov	r1, sl
 8004818:	018a      	lsls	r2, r1, #6
 800481a:	4651      	mov	r1, sl
 800481c:	1a54      	subs	r4, r2, r1
 800481e:	4659      	mov	r1, fp
 8004820:	eb63 0501 	sbc.w	r5, r3, r1
 8004824:	f04f 0200 	mov.w	r2, #0
 8004828:	f04f 0300 	mov.w	r3, #0
 800482c:	00eb      	lsls	r3, r5, #3
 800482e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004832:	00e2      	lsls	r2, r4, #3
 8004834:	4614      	mov	r4, r2
 8004836:	461d      	mov	r5, r3
 8004838:	4643      	mov	r3, r8
 800483a:	18e3      	adds	r3, r4, r3
 800483c:	603b      	str	r3, [r7, #0]
 800483e:	464b      	mov	r3, r9
 8004840:	eb45 0303 	adc.w	r3, r5, r3
 8004844:	607b      	str	r3, [r7, #4]
 8004846:	f04f 0200 	mov.w	r2, #0
 800484a:	f04f 0300 	mov.w	r3, #0
 800484e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004852:	4629      	mov	r1, r5
 8004854:	028b      	lsls	r3, r1, #10
 8004856:	4621      	mov	r1, r4
 8004858:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800485c:	4621      	mov	r1, r4
 800485e:	028a      	lsls	r2, r1, #10
 8004860:	4610      	mov	r0, r2
 8004862:	4619      	mov	r1, r3
 8004864:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004868:	2200      	movs	r2, #0
 800486a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800486c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800486e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004872:	f7fc f9e9 	bl	8000c48 <__aeabi_uldivmod>
 8004876:	4602      	mov	r2, r0
 8004878:	460b      	mov	r3, r1
 800487a:	4613      	mov	r3, r2
 800487c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004880:	4b0d      	ldr	r3, [pc, #52]	@ (80048b8 <HAL_RCC_GetSysClockFreq+0x458>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	0f1b      	lsrs	r3, r3, #28
 8004886:	f003 0307 	and.w	r3, r3, #7
 800488a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800488e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004892:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004896:	fbb2 f3f3 	udiv	r3, r2, r3
 800489a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800489e:	e003      	b.n	80048a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048a0:	4b06      	ldr	r3, [pc, #24]	@ (80048bc <HAL_RCC_GetSysClockFreq+0x45c>)
 80048a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80048a6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	37b8      	adds	r7, #184	@ 0xb8
 80048b0:	46bd      	mov	sp, r7
 80048b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048b6:	bf00      	nop
 80048b8:	40023800 	.word	0x40023800
 80048bc:	00f42400 	.word	0x00f42400

080048c0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b086      	sub	sp, #24
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e28d      	b.n	8004dee <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f000 8083 	beq.w	80049e6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80048e0:	4b94      	ldr	r3, [pc, #592]	@ (8004b34 <HAL_RCC_OscConfig+0x274>)
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f003 030c 	and.w	r3, r3, #12
 80048e8:	2b04      	cmp	r3, #4
 80048ea:	d019      	beq.n	8004920 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80048ec:	4b91      	ldr	r3, [pc, #580]	@ (8004b34 <HAL_RCC_OscConfig+0x274>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80048f4:	2b08      	cmp	r3, #8
 80048f6:	d106      	bne.n	8004906 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80048f8:	4b8e      	ldr	r3, [pc, #568]	@ (8004b34 <HAL_RCC_OscConfig+0x274>)
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004900:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004904:	d00c      	beq.n	8004920 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004906:	4b8b      	ldr	r3, [pc, #556]	@ (8004b34 <HAL_RCC_OscConfig+0x274>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800490e:	2b0c      	cmp	r3, #12
 8004910:	d112      	bne.n	8004938 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004912:	4b88      	ldr	r3, [pc, #544]	@ (8004b34 <HAL_RCC_OscConfig+0x274>)
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800491a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800491e:	d10b      	bne.n	8004938 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004920:	4b84      	ldr	r3, [pc, #528]	@ (8004b34 <HAL_RCC_OscConfig+0x274>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d05b      	beq.n	80049e4 <HAL_RCC_OscConfig+0x124>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d157      	bne.n	80049e4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e25a      	b.n	8004dee <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004940:	d106      	bne.n	8004950 <HAL_RCC_OscConfig+0x90>
 8004942:	4b7c      	ldr	r3, [pc, #496]	@ (8004b34 <HAL_RCC_OscConfig+0x274>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a7b      	ldr	r2, [pc, #492]	@ (8004b34 <HAL_RCC_OscConfig+0x274>)
 8004948:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800494c:	6013      	str	r3, [r2, #0]
 800494e:	e01d      	b.n	800498c <HAL_RCC_OscConfig+0xcc>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004958:	d10c      	bne.n	8004974 <HAL_RCC_OscConfig+0xb4>
 800495a:	4b76      	ldr	r3, [pc, #472]	@ (8004b34 <HAL_RCC_OscConfig+0x274>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a75      	ldr	r2, [pc, #468]	@ (8004b34 <HAL_RCC_OscConfig+0x274>)
 8004960:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004964:	6013      	str	r3, [r2, #0]
 8004966:	4b73      	ldr	r3, [pc, #460]	@ (8004b34 <HAL_RCC_OscConfig+0x274>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a72      	ldr	r2, [pc, #456]	@ (8004b34 <HAL_RCC_OscConfig+0x274>)
 800496c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004970:	6013      	str	r3, [r2, #0]
 8004972:	e00b      	b.n	800498c <HAL_RCC_OscConfig+0xcc>
 8004974:	4b6f      	ldr	r3, [pc, #444]	@ (8004b34 <HAL_RCC_OscConfig+0x274>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a6e      	ldr	r2, [pc, #440]	@ (8004b34 <HAL_RCC_OscConfig+0x274>)
 800497a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800497e:	6013      	str	r3, [r2, #0]
 8004980:	4b6c      	ldr	r3, [pc, #432]	@ (8004b34 <HAL_RCC_OscConfig+0x274>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a6b      	ldr	r2, [pc, #428]	@ (8004b34 <HAL_RCC_OscConfig+0x274>)
 8004986:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800498a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d013      	beq.n	80049bc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004994:	f7fd ff50 	bl	8002838 <HAL_GetTick>
 8004998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800499a:	e008      	b.n	80049ae <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800499c:	f7fd ff4c 	bl	8002838 <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	2b64      	cmp	r3, #100	@ 0x64
 80049a8:	d901      	bls.n	80049ae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e21f      	b.n	8004dee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ae:	4b61      	ldr	r3, [pc, #388]	@ (8004b34 <HAL_RCC_OscConfig+0x274>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d0f0      	beq.n	800499c <HAL_RCC_OscConfig+0xdc>
 80049ba:	e014      	b.n	80049e6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049bc:	f7fd ff3c 	bl	8002838 <HAL_GetTick>
 80049c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049c2:	e008      	b.n	80049d6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049c4:	f7fd ff38 	bl	8002838 <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	2b64      	cmp	r3, #100	@ 0x64
 80049d0:	d901      	bls.n	80049d6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e20b      	b.n	8004dee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049d6:	4b57      	ldr	r3, [pc, #348]	@ (8004b34 <HAL_RCC_OscConfig+0x274>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d1f0      	bne.n	80049c4 <HAL_RCC_OscConfig+0x104>
 80049e2:	e000      	b.n	80049e6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d06f      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80049f2:	4b50      	ldr	r3, [pc, #320]	@ (8004b34 <HAL_RCC_OscConfig+0x274>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f003 030c 	and.w	r3, r3, #12
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d017      	beq.n	8004a2e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80049fe:	4b4d      	ldr	r3, [pc, #308]	@ (8004b34 <HAL_RCC_OscConfig+0x274>)
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004a06:	2b08      	cmp	r3, #8
 8004a08:	d105      	bne.n	8004a16 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004a0a:	4b4a      	ldr	r3, [pc, #296]	@ (8004b34 <HAL_RCC_OscConfig+0x274>)
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00b      	beq.n	8004a2e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a16:	4b47      	ldr	r3, [pc, #284]	@ (8004b34 <HAL_RCC_OscConfig+0x274>)
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004a1e:	2b0c      	cmp	r3, #12
 8004a20:	d11c      	bne.n	8004a5c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a22:	4b44      	ldr	r3, [pc, #272]	@ (8004b34 <HAL_RCC_OscConfig+0x274>)
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d116      	bne.n	8004a5c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a2e:	4b41      	ldr	r3, [pc, #260]	@ (8004b34 <HAL_RCC_OscConfig+0x274>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d005      	beq.n	8004a46 <HAL_RCC_OscConfig+0x186>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d001      	beq.n	8004a46 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e1d3      	b.n	8004dee <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a46:	4b3b      	ldr	r3, [pc, #236]	@ (8004b34 <HAL_RCC_OscConfig+0x274>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	00db      	lsls	r3, r3, #3
 8004a54:	4937      	ldr	r1, [pc, #220]	@ (8004b34 <HAL_RCC_OscConfig+0x274>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a5a:	e03a      	b.n	8004ad2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d020      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a64:	4b34      	ldr	r3, [pc, #208]	@ (8004b38 <HAL_RCC_OscConfig+0x278>)
 8004a66:	2201      	movs	r2, #1
 8004a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a6a:	f7fd fee5 	bl	8002838 <HAL_GetTick>
 8004a6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a70:	e008      	b.n	8004a84 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a72:	f7fd fee1 	bl	8002838 <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d901      	bls.n	8004a84 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e1b4      	b.n	8004dee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a84:	4b2b      	ldr	r3, [pc, #172]	@ (8004b34 <HAL_RCC_OscConfig+0x274>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0302 	and.w	r3, r3, #2
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d0f0      	beq.n	8004a72 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a90:	4b28      	ldr	r3, [pc, #160]	@ (8004b34 <HAL_RCC_OscConfig+0x274>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	00db      	lsls	r3, r3, #3
 8004a9e:	4925      	ldr	r1, [pc, #148]	@ (8004b34 <HAL_RCC_OscConfig+0x274>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	600b      	str	r3, [r1, #0]
 8004aa4:	e015      	b.n	8004ad2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004aa6:	4b24      	ldr	r3, [pc, #144]	@ (8004b38 <HAL_RCC_OscConfig+0x278>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aac:	f7fd fec4 	bl	8002838 <HAL_GetTick>
 8004ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ab2:	e008      	b.n	8004ac6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ab4:	f7fd fec0 	bl	8002838 <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e193      	b.n	8004dee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ac6:	4b1b      	ldr	r3, [pc, #108]	@ (8004b34 <HAL_RCC_OscConfig+0x274>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0302 	and.w	r3, r3, #2
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1f0      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0308 	and.w	r3, r3, #8
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d036      	beq.n	8004b4c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d016      	beq.n	8004b14 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ae6:	4b15      	ldr	r3, [pc, #84]	@ (8004b3c <HAL_RCC_OscConfig+0x27c>)
 8004ae8:	2201      	movs	r2, #1
 8004aea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aec:	f7fd fea4 	bl	8002838 <HAL_GetTick>
 8004af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004af2:	e008      	b.n	8004b06 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004af4:	f7fd fea0 	bl	8002838 <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d901      	bls.n	8004b06 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e173      	b.n	8004dee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b06:	4b0b      	ldr	r3, [pc, #44]	@ (8004b34 <HAL_RCC_OscConfig+0x274>)
 8004b08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b0a:	f003 0302 	and.w	r3, r3, #2
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d0f0      	beq.n	8004af4 <HAL_RCC_OscConfig+0x234>
 8004b12:	e01b      	b.n	8004b4c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b14:	4b09      	ldr	r3, [pc, #36]	@ (8004b3c <HAL_RCC_OscConfig+0x27c>)
 8004b16:	2200      	movs	r2, #0
 8004b18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b1a:	f7fd fe8d 	bl	8002838 <HAL_GetTick>
 8004b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b20:	e00e      	b.n	8004b40 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b22:	f7fd fe89 	bl	8002838 <HAL_GetTick>
 8004b26:	4602      	mov	r2, r0
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d907      	bls.n	8004b40 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e15c      	b.n	8004dee <HAL_RCC_OscConfig+0x52e>
 8004b34:	40023800 	.word	0x40023800
 8004b38:	42470000 	.word	0x42470000
 8004b3c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b40:	4b8a      	ldr	r3, [pc, #552]	@ (8004d6c <HAL_RCC_OscConfig+0x4ac>)
 8004b42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b44:	f003 0302 	and.w	r3, r3, #2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1ea      	bne.n	8004b22 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0304 	and.w	r3, r3, #4
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f000 8097 	beq.w	8004c88 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b5e:	4b83      	ldr	r3, [pc, #524]	@ (8004d6c <HAL_RCC_OscConfig+0x4ac>)
 8004b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10f      	bne.n	8004b8a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	60bb      	str	r3, [r7, #8]
 8004b6e:	4b7f      	ldr	r3, [pc, #508]	@ (8004d6c <HAL_RCC_OscConfig+0x4ac>)
 8004b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b72:	4a7e      	ldr	r2, [pc, #504]	@ (8004d6c <HAL_RCC_OscConfig+0x4ac>)
 8004b74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b78:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b7a:	4b7c      	ldr	r3, [pc, #496]	@ (8004d6c <HAL_RCC_OscConfig+0x4ac>)
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b82:	60bb      	str	r3, [r7, #8]
 8004b84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b86:	2301      	movs	r3, #1
 8004b88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b8a:	4b79      	ldr	r3, [pc, #484]	@ (8004d70 <HAL_RCC_OscConfig+0x4b0>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d118      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b96:	4b76      	ldr	r3, [pc, #472]	@ (8004d70 <HAL_RCC_OscConfig+0x4b0>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a75      	ldr	r2, [pc, #468]	@ (8004d70 <HAL_RCC_OscConfig+0x4b0>)
 8004b9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ba0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ba2:	f7fd fe49 	bl	8002838 <HAL_GetTick>
 8004ba6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ba8:	e008      	b.n	8004bbc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004baa:	f7fd fe45 	bl	8002838 <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d901      	bls.n	8004bbc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e118      	b.n	8004dee <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bbc:	4b6c      	ldr	r3, [pc, #432]	@ (8004d70 <HAL_RCC_OscConfig+0x4b0>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d0f0      	beq.n	8004baa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d106      	bne.n	8004bde <HAL_RCC_OscConfig+0x31e>
 8004bd0:	4b66      	ldr	r3, [pc, #408]	@ (8004d6c <HAL_RCC_OscConfig+0x4ac>)
 8004bd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bd4:	4a65      	ldr	r2, [pc, #404]	@ (8004d6c <HAL_RCC_OscConfig+0x4ac>)
 8004bd6:	f043 0301 	orr.w	r3, r3, #1
 8004bda:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bdc:	e01c      	b.n	8004c18 <HAL_RCC_OscConfig+0x358>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	2b05      	cmp	r3, #5
 8004be4:	d10c      	bne.n	8004c00 <HAL_RCC_OscConfig+0x340>
 8004be6:	4b61      	ldr	r3, [pc, #388]	@ (8004d6c <HAL_RCC_OscConfig+0x4ac>)
 8004be8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bea:	4a60      	ldr	r2, [pc, #384]	@ (8004d6c <HAL_RCC_OscConfig+0x4ac>)
 8004bec:	f043 0304 	orr.w	r3, r3, #4
 8004bf0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bf2:	4b5e      	ldr	r3, [pc, #376]	@ (8004d6c <HAL_RCC_OscConfig+0x4ac>)
 8004bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bf6:	4a5d      	ldr	r2, [pc, #372]	@ (8004d6c <HAL_RCC_OscConfig+0x4ac>)
 8004bf8:	f043 0301 	orr.w	r3, r3, #1
 8004bfc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bfe:	e00b      	b.n	8004c18 <HAL_RCC_OscConfig+0x358>
 8004c00:	4b5a      	ldr	r3, [pc, #360]	@ (8004d6c <HAL_RCC_OscConfig+0x4ac>)
 8004c02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c04:	4a59      	ldr	r2, [pc, #356]	@ (8004d6c <HAL_RCC_OscConfig+0x4ac>)
 8004c06:	f023 0301 	bic.w	r3, r3, #1
 8004c0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c0c:	4b57      	ldr	r3, [pc, #348]	@ (8004d6c <HAL_RCC_OscConfig+0x4ac>)
 8004c0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c10:	4a56      	ldr	r2, [pc, #344]	@ (8004d6c <HAL_RCC_OscConfig+0x4ac>)
 8004c12:	f023 0304 	bic.w	r3, r3, #4
 8004c16:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d015      	beq.n	8004c4c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c20:	f7fd fe0a 	bl	8002838 <HAL_GetTick>
 8004c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c26:	e00a      	b.n	8004c3e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c28:	f7fd fe06 	bl	8002838 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d901      	bls.n	8004c3e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e0d7      	b.n	8004dee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c3e:	4b4b      	ldr	r3, [pc, #300]	@ (8004d6c <HAL_RCC_OscConfig+0x4ac>)
 8004c40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d0ee      	beq.n	8004c28 <HAL_RCC_OscConfig+0x368>
 8004c4a:	e014      	b.n	8004c76 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c4c:	f7fd fdf4 	bl	8002838 <HAL_GetTick>
 8004c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c52:	e00a      	b.n	8004c6a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c54:	f7fd fdf0 	bl	8002838 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d901      	bls.n	8004c6a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e0c1      	b.n	8004dee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c6a:	4b40      	ldr	r3, [pc, #256]	@ (8004d6c <HAL_RCC_OscConfig+0x4ac>)
 8004c6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c6e:	f003 0302 	and.w	r3, r3, #2
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1ee      	bne.n	8004c54 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c76:	7dfb      	ldrb	r3, [r7, #23]
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d105      	bne.n	8004c88 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c7c:	4b3b      	ldr	r3, [pc, #236]	@ (8004d6c <HAL_RCC_OscConfig+0x4ac>)
 8004c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c80:	4a3a      	ldr	r2, [pc, #232]	@ (8004d6c <HAL_RCC_OscConfig+0x4ac>)
 8004c82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c86:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f000 80ad 	beq.w	8004dec <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c92:	4b36      	ldr	r3, [pc, #216]	@ (8004d6c <HAL_RCC_OscConfig+0x4ac>)
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f003 030c 	and.w	r3, r3, #12
 8004c9a:	2b08      	cmp	r3, #8
 8004c9c:	d060      	beq.n	8004d60 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d145      	bne.n	8004d32 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ca6:	4b33      	ldr	r3, [pc, #204]	@ (8004d74 <HAL_RCC_OscConfig+0x4b4>)
 8004ca8:	2200      	movs	r2, #0
 8004caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cac:	f7fd fdc4 	bl	8002838 <HAL_GetTick>
 8004cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cb2:	e008      	b.n	8004cc6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cb4:	f7fd fdc0 	bl	8002838 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d901      	bls.n	8004cc6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e093      	b.n	8004dee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cc6:	4b29      	ldr	r3, [pc, #164]	@ (8004d6c <HAL_RCC_OscConfig+0x4ac>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1f0      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	69da      	ldr	r2, [r3, #28]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	431a      	orrs	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce0:	019b      	lsls	r3, r3, #6
 8004ce2:	431a      	orrs	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ce8:	085b      	lsrs	r3, r3, #1
 8004cea:	3b01      	subs	r3, #1
 8004cec:	041b      	lsls	r3, r3, #16
 8004cee:	431a      	orrs	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf4:	061b      	lsls	r3, r3, #24
 8004cf6:	431a      	orrs	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cfc:	071b      	lsls	r3, r3, #28
 8004cfe:	491b      	ldr	r1, [pc, #108]	@ (8004d6c <HAL_RCC_OscConfig+0x4ac>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d04:	4b1b      	ldr	r3, [pc, #108]	@ (8004d74 <HAL_RCC_OscConfig+0x4b4>)
 8004d06:	2201      	movs	r2, #1
 8004d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d0a:	f7fd fd95 	bl	8002838 <HAL_GetTick>
 8004d0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d10:	e008      	b.n	8004d24 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d12:	f7fd fd91 	bl	8002838 <HAL_GetTick>
 8004d16:	4602      	mov	r2, r0
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d901      	bls.n	8004d24 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e064      	b.n	8004dee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d24:	4b11      	ldr	r3, [pc, #68]	@ (8004d6c <HAL_RCC_OscConfig+0x4ac>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d0f0      	beq.n	8004d12 <HAL_RCC_OscConfig+0x452>
 8004d30:	e05c      	b.n	8004dec <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d32:	4b10      	ldr	r3, [pc, #64]	@ (8004d74 <HAL_RCC_OscConfig+0x4b4>)
 8004d34:	2200      	movs	r2, #0
 8004d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d38:	f7fd fd7e 	bl	8002838 <HAL_GetTick>
 8004d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d3e:	e008      	b.n	8004d52 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d40:	f7fd fd7a 	bl	8002838 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d901      	bls.n	8004d52 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e04d      	b.n	8004dee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d52:	4b06      	ldr	r3, [pc, #24]	@ (8004d6c <HAL_RCC_OscConfig+0x4ac>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1f0      	bne.n	8004d40 <HAL_RCC_OscConfig+0x480>
 8004d5e:	e045      	b.n	8004dec <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d107      	bne.n	8004d78 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e040      	b.n	8004dee <HAL_RCC_OscConfig+0x52e>
 8004d6c:	40023800 	.word	0x40023800
 8004d70:	40007000 	.word	0x40007000
 8004d74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d78:	4b1f      	ldr	r3, [pc, #124]	@ (8004df8 <HAL_RCC_OscConfig+0x538>)
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d030      	beq.n	8004de8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d129      	bne.n	8004de8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d122      	bne.n	8004de8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004da8:	4013      	ands	r3, r2
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004dae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d119      	bne.n	8004de8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dbe:	085b      	lsrs	r3, r3, #1
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d10f      	bne.n	8004de8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dd2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d107      	bne.n	8004de8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004de2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d001      	beq.n	8004dec <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e000      	b.n	8004dee <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3718      	adds	r7, #24
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	40023800 	.word	0x40023800

08004dfc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d101      	bne.n	8004e0e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e041      	b.n	8004e92 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d106      	bne.n	8004e28 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f7fd fa24 	bl	8002270 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	3304      	adds	r3, #4
 8004e38:	4619      	mov	r1, r3
 8004e3a:	4610      	mov	r0, r2
 8004e3c:	f000 fb0a 	bl	8005454 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
	...

08004e9c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d104      	bne.n	8004eba <HAL_TIM_IC_Start_IT+0x1e>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	e013      	b.n	8004ee2 <HAL_TIM_IC_Start_IT+0x46>
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	2b04      	cmp	r3, #4
 8004ebe:	d104      	bne.n	8004eca <HAL_TIM_IC_Start_IT+0x2e>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	e00b      	b.n	8004ee2 <HAL_TIM_IC_Start_IT+0x46>
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	2b08      	cmp	r3, #8
 8004ece:	d104      	bne.n	8004eda <HAL_TIM_IC_Start_IT+0x3e>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	e003      	b.n	8004ee2 <HAL_TIM_IC_Start_IT+0x46>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d104      	bne.n	8004ef4 <HAL_TIM_IC_Start_IT+0x58>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	e013      	b.n	8004f1c <HAL_TIM_IC_Start_IT+0x80>
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	2b04      	cmp	r3, #4
 8004ef8:	d104      	bne.n	8004f04 <HAL_TIM_IC_Start_IT+0x68>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	e00b      	b.n	8004f1c <HAL_TIM_IC_Start_IT+0x80>
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	2b08      	cmp	r3, #8
 8004f08:	d104      	bne.n	8004f14 <HAL_TIM_IC_Start_IT+0x78>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	e003      	b.n	8004f1c <HAL_TIM_IC_Start_IT+0x80>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f1e:	7bbb      	ldrb	r3, [r7, #14]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d102      	bne.n	8004f2a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f24:	7b7b      	ldrb	r3, [r7, #13]
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d001      	beq.n	8004f2e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e0cc      	b.n	80050c8 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d104      	bne.n	8004f3e <HAL_TIM_IC_Start_IT+0xa2>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2202      	movs	r2, #2
 8004f38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f3c:	e013      	b.n	8004f66 <HAL_TIM_IC_Start_IT+0xca>
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	2b04      	cmp	r3, #4
 8004f42:	d104      	bne.n	8004f4e <HAL_TIM_IC_Start_IT+0xb2>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2202      	movs	r2, #2
 8004f48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f4c:	e00b      	b.n	8004f66 <HAL_TIM_IC_Start_IT+0xca>
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	2b08      	cmp	r3, #8
 8004f52:	d104      	bne.n	8004f5e <HAL_TIM_IC_Start_IT+0xc2>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2202      	movs	r2, #2
 8004f58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f5c:	e003      	b.n	8004f66 <HAL_TIM_IC_Start_IT+0xca>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2202      	movs	r2, #2
 8004f62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d104      	bne.n	8004f76 <HAL_TIM_IC_Start_IT+0xda>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2202      	movs	r2, #2
 8004f70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f74:	e013      	b.n	8004f9e <HAL_TIM_IC_Start_IT+0x102>
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	2b04      	cmp	r3, #4
 8004f7a:	d104      	bne.n	8004f86 <HAL_TIM_IC_Start_IT+0xea>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2202      	movs	r2, #2
 8004f80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f84:	e00b      	b.n	8004f9e <HAL_TIM_IC_Start_IT+0x102>
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	2b08      	cmp	r3, #8
 8004f8a:	d104      	bne.n	8004f96 <HAL_TIM_IC_Start_IT+0xfa>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2202      	movs	r2, #2
 8004f90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f94:	e003      	b.n	8004f9e <HAL_TIM_IC_Start_IT+0x102>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2202      	movs	r2, #2
 8004f9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	2b0c      	cmp	r3, #12
 8004fa2:	d841      	bhi.n	8005028 <HAL_TIM_IC_Start_IT+0x18c>
 8004fa4:	a201      	add	r2, pc, #4	@ (adr r2, 8004fac <HAL_TIM_IC_Start_IT+0x110>)
 8004fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004faa:	bf00      	nop
 8004fac:	08004fe1 	.word	0x08004fe1
 8004fb0:	08005029 	.word	0x08005029
 8004fb4:	08005029 	.word	0x08005029
 8004fb8:	08005029 	.word	0x08005029
 8004fbc:	08004ff3 	.word	0x08004ff3
 8004fc0:	08005029 	.word	0x08005029
 8004fc4:	08005029 	.word	0x08005029
 8004fc8:	08005029 	.word	0x08005029
 8004fcc:	08005005 	.word	0x08005005
 8004fd0:	08005029 	.word	0x08005029
 8004fd4:	08005029 	.word	0x08005029
 8004fd8:	08005029 	.word	0x08005029
 8004fdc:	08005017 	.word	0x08005017
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68da      	ldr	r2, [r3, #12]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f042 0202 	orr.w	r2, r2, #2
 8004fee:	60da      	str	r2, [r3, #12]
      break;
 8004ff0:	e01d      	b.n	800502e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68da      	ldr	r2, [r3, #12]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f042 0204 	orr.w	r2, r2, #4
 8005000:	60da      	str	r2, [r3, #12]
      break;
 8005002:	e014      	b.n	800502e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68da      	ldr	r2, [r3, #12]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f042 0208 	orr.w	r2, r2, #8
 8005012:	60da      	str	r2, [r3, #12]
      break;
 8005014:	e00b      	b.n	800502e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68da      	ldr	r2, [r3, #12]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f042 0210 	orr.w	r2, r2, #16
 8005024:	60da      	str	r2, [r3, #12]
      break;
 8005026:	e002      	b.n	800502e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	73fb      	strb	r3, [r7, #15]
      break;
 800502c:	bf00      	nop
  }

  if (status == HAL_OK)
 800502e:	7bfb      	ldrb	r3, [r7, #15]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d148      	bne.n	80050c6 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2201      	movs	r2, #1
 800503a:	6839      	ldr	r1, [r7, #0]
 800503c:	4618      	mov	r0, r3
 800503e:	f000 fbdf 	bl	8005800 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a22      	ldr	r2, [pc, #136]	@ (80050d0 <HAL_TIM_IC_Start_IT+0x234>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d022      	beq.n	8005092 <HAL_TIM_IC_Start_IT+0x1f6>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005054:	d01d      	beq.n	8005092 <HAL_TIM_IC_Start_IT+0x1f6>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a1e      	ldr	r2, [pc, #120]	@ (80050d4 <HAL_TIM_IC_Start_IT+0x238>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d018      	beq.n	8005092 <HAL_TIM_IC_Start_IT+0x1f6>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a1c      	ldr	r2, [pc, #112]	@ (80050d8 <HAL_TIM_IC_Start_IT+0x23c>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d013      	beq.n	8005092 <HAL_TIM_IC_Start_IT+0x1f6>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a1b      	ldr	r2, [pc, #108]	@ (80050dc <HAL_TIM_IC_Start_IT+0x240>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d00e      	beq.n	8005092 <HAL_TIM_IC_Start_IT+0x1f6>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a19      	ldr	r2, [pc, #100]	@ (80050e0 <HAL_TIM_IC_Start_IT+0x244>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d009      	beq.n	8005092 <HAL_TIM_IC_Start_IT+0x1f6>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a18      	ldr	r2, [pc, #96]	@ (80050e4 <HAL_TIM_IC_Start_IT+0x248>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d004      	beq.n	8005092 <HAL_TIM_IC_Start_IT+0x1f6>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a16      	ldr	r2, [pc, #88]	@ (80050e8 <HAL_TIM_IC_Start_IT+0x24c>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d111      	bne.n	80050b6 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f003 0307 	and.w	r3, r3, #7
 800509c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	2b06      	cmp	r3, #6
 80050a2:	d010      	beq.n	80050c6 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f042 0201 	orr.w	r2, r2, #1
 80050b2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050b4:	e007      	b.n	80050c6 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f042 0201 	orr.w	r2, r2, #1
 80050c4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80050c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3710      	adds	r7, #16
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	40010000 	.word	0x40010000
 80050d4:	40000400 	.word	0x40000400
 80050d8:	40000800 	.word	0x40000800
 80050dc:	40000c00 	.word	0x40000c00
 80050e0:	40010400 	.word	0x40010400
 80050e4:	40014000 	.word	0x40014000
 80050e8:	40001800 	.word	0x40001800

080050ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d020      	beq.n	8005150 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f003 0302 	and.w	r3, r3, #2
 8005114:	2b00      	cmp	r3, #0
 8005116:	d01b      	beq.n	8005150 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f06f 0202 	mvn.w	r2, #2
 8005120:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2201      	movs	r2, #1
 8005126:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	f003 0303 	and.w	r3, r3, #3
 8005132:	2b00      	cmp	r3, #0
 8005134:	d003      	beq.n	800513e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f7fc feda 	bl	8001ef0 <HAL_TIM_IC_CaptureCallback>
 800513c:	e005      	b.n	800514a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f96a 	bl	8005418 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 f971 	bl	800542c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	f003 0304 	and.w	r3, r3, #4
 8005156:	2b00      	cmp	r3, #0
 8005158:	d020      	beq.n	800519c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f003 0304 	and.w	r3, r3, #4
 8005160:	2b00      	cmp	r3, #0
 8005162:	d01b      	beq.n	800519c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f06f 0204 	mvn.w	r2, #4
 800516c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2202      	movs	r2, #2
 8005172:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800517e:	2b00      	cmp	r3, #0
 8005180:	d003      	beq.n	800518a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f7fc feb4 	bl	8001ef0 <HAL_TIM_IC_CaptureCallback>
 8005188:	e005      	b.n	8005196 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 f944 	bl	8005418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 f94b 	bl	800542c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	f003 0308 	and.w	r3, r3, #8
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d020      	beq.n	80051e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f003 0308 	and.w	r3, r3, #8
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d01b      	beq.n	80051e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f06f 0208 	mvn.w	r2, #8
 80051b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2204      	movs	r2, #4
 80051be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	69db      	ldr	r3, [r3, #28]
 80051c6:	f003 0303 	and.w	r3, r3, #3
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d003      	beq.n	80051d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f7fc fe8e 	bl	8001ef0 <HAL_TIM_IC_CaptureCallback>
 80051d4:	e005      	b.n	80051e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f91e 	bl	8005418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 f925 	bl	800542c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	f003 0310 	and.w	r3, r3, #16
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d020      	beq.n	8005234 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f003 0310 	and.w	r3, r3, #16
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d01b      	beq.n	8005234 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f06f 0210 	mvn.w	r2, #16
 8005204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2208      	movs	r2, #8
 800520a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	69db      	ldr	r3, [r3, #28]
 8005212:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005216:	2b00      	cmp	r3, #0
 8005218:	d003      	beq.n	8005222 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f7fc fe68 	bl	8001ef0 <HAL_TIM_IC_CaptureCallback>
 8005220:	e005      	b.n	800522e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f8f8 	bl	8005418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 f8ff 	bl	800542c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00c      	beq.n	8005258 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f003 0301 	and.w	r3, r3, #1
 8005244:	2b00      	cmp	r3, #0
 8005246:	d007      	beq.n	8005258 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f06f 0201 	mvn.w	r2, #1
 8005250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 f8d6 	bl	8005404 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00c      	beq.n	800527c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005268:	2b00      	cmp	r3, #0
 800526a:	d007      	beq.n	800527c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 fb6e 	bl	8005958 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00c      	beq.n	80052a0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800528c:	2b00      	cmp	r3, #0
 800528e:	d007      	beq.n	80052a0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 f8d0 	bl	8005440 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	f003 0320 	and.w	r3, r3, #32
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00c      	beq.n	80052c4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f003 0320 	and.w	r3, r3, #32
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d007      	beq.n	80052c4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f06f 0220 	mvn.w	r2, #32
 80052bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 fb40 	bl	8005944 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052c4:	bf00      	nop
 80052c6:	3710      	adds	r7, #16
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052d8:	2300      	movs	r3, #0
 80052da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d101      	bne.n	80052ea <HAL_TIM_IC_ConfigChannel+0x1e>
 80052e6:	2302      	movs	r3, #2
 80052e8:	e088      	b.n	80053fc <HAL_TIM_IC_ConfigChannel+0x130>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d11b      	bne.n	8005330 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005308:	f000 f950 	bl	80055ac <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	699a      	ldr	r2, [r3, #24]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f022 020c 	bic.w	r2, r2, #12
 800531a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6999      	ldr	r1, [r3, #24]
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	689a      	ldr	r2, [r3, #8]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	430a      	orrs	r2, r1
 800532c:	619a      	str	r2, [r3, #24]
 800532e:	e060      	b.n	80053f2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2b04      	cmp	r3, #4
 8005334:	d11c      	bne.n	8005370 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005346:	f000 f9a5 	bl	8005694 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	699a      	ldr	r2, [r3, #24]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005358:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	6999      	ldr	r1, [r3, #24]
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	021a      	lsls	r2, r3, #8
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	430a      	orrs	r2, r1
 800536c:	619a      	str	r2, [r3, #24]
 800536e:	e040      	b.n	80053f2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2b08      	cmp	r3, #8
 8005374:	d11b      	bne.n	80053ae <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005386:	f000 f9c2 	bl	800570e <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	69da      	ldr	r2, [r3, #28]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f022 020c 	bic.w	r2, r2, #12
 8005398:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	69d9      	ldr	r1, [r3, #28]
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	689a      	ldr	r2, [r3, #8]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	430a      	orrs	r2, r1
 80053aa:	61da      	str	r2, [r3, #28]
 80053ac:	e021      	b.n	80053f2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2b0c      	cmp	r3, #12
 80053b2:	d11c      	bne.n	80053ee <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80053c4:	f000 f9df 	bl	8005786 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	69da      	ldr	r2, [r3, #28]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80053d6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	69d9      	ldr	r1, [r3, #28]
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	021a      	lsls	r2, r3, #8
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	430a      	orrs	r2, r1
 80053ea:	61da      	str	r2, [r3, #28]
 80053ec:	e001      	b.n	80053f2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80053fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3718      	adds	r7, #24
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800540c:	bf00      	nop
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005420:	bf00      	nop
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005434:	bf00      	nop
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005448:	bf00      	nop
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a46      	ldr	r2, [pc, #280]	@ (8005580 <TIM_Base_SetConfig+0x12c>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d013      	beq.n	8005494 <TIM_Base_SetConfig+0x40>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005472:	d00f      	beq.n	8005494 <TIM_Base_SetConfig+0x40>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a43      	ldr	r2, [pc, #268]	@ (8005584 <TIM_Base_SetConfig+0x130>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d00b      	beq.n	8005494 <TIM_Base_SetConfig+0x40>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a42      	ldr	r2, [pc, #264]	@ (8005588 <TIM_Base_SetConfig+0x134>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d007      	beq.n	8005494 <TIM_Base_SetConfig+0x40>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a41      	ldr	r2, [pc, #260]	@ (800558c <TIM_Base_SetConfig+0x138>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d003      	beq.n	8005494 <TIM_Base_SetConfig+0x40>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a40      	ldr	r2, [pc, #256]	@ (8005590 <TIM_Base_SetConfig+0x13c>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d108      	bne.n	80054a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800549a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a35      	ldr	r2, [pc, #212]	@ (8005580 <TIM_Base_SetConfig+0x12c>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d02b      	beq.n	8005506 <TIM_Base_SetConfig+0xb2>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054b4:	d027      	beq.n	8005506 <TIM_Base_SetConfig+0xb2>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a32      	ldr	r2, [pc, #200]	@ (8005584 <TIM_Base_SetConfig+0x130>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d023      	beq.n	8005506 <TIM_Base_SetConfig+0xb2>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a31      	ldr	r2, [pc, #196]	@ (8005588 <TIM_Base_SetConfig+0x134>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d01f      	beq.n	8005506 <TIM_Base_SetConfig+0xb2>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a30      	ldr	r2, [pc, #192]	@ (800558c <TIM_Base_SetConfig+0x138>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d01b      	beq.n	8005506 <TIM_Base_SetConfig+0xb2>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a2f      	ldr	r2, [pc, #188]	@ (8005590 <TIM_Base_SetConfig+0x13c>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d017      	beq.n	8005506 <TIM_Base_SetConfig+0xb2>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a2e      	ldr	r2, [pc, #184]	@ (8005594 <TIM_Base_SetConfig+0x140>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d013      	beq.n	8005506 <TIM_Base_SetConfig+0xb2>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a2d      	ldr	r2, [pc, #180]	@ (8005598 <TIM_Base_SetConfig+0x144>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d00f      	beq.n	8005506 <TIM_Base_SetConfig+0xb2>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a2c      	ldr	r2, [pc, #176]	@ (800559c <TIM_Base_SetConfig+0x148>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d00b      	beq.n	8005506 <TIM_Base_SetConfig+0xb2>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a2b      	ldr	r2, [pc, #172]	@ (80055a0 <TIM_Base_SetConfig+0x14c>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d007      	beq.n	8005506 <TIM_Base_SetConfig+0xb2>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a2a      	ldr	r2, [pc, #168]	@ (80055a4 <TIM_Base_SetConfig+0x150>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d003      	beq.n	8005506 <TIM_Base_SetConfig+0xb2>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a29      	ldr	r2, [pc, #164]	@ (80055a8 <TIM_Base_SetConfig+0x154>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d108      	bne.n	8005518 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800550c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	4313      	orrs	r3, r2
 8005516:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	4313      	orrs	r3, r2
 8005524:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	689a      	ldr	r2, [r3, #8]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a10      	ldr	r2, [pc, #64]	@ (8005580 <TIM_Base_SetConfig+0x12c>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d003      	beq.n	800554c <TIM_Base_SetConfig+0xf8>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a12      	ldr	r2, [pc, #72]	@ (8005590 <TIM_Base_SetConfig+0x13c>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d103      	bne.n	8005554 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	691a      	ldr	r2, [r3, #16]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	2b01      	cmp	r3, #1
 8005564:	d105      	bne.n	8005572 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	f023 0201 	bic.w	r2, r3, #1
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	611a      	str	r2, [r3, #16]
  }
}
 8005572:	bf00      	nop
 8005574:	3714      	adds	r7, #20
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	40010000 	.word	0x40010000
 8005584:	40000400 	.word	0x40000400
 8005588:	40000800 	.word	0x40000800
 800558c:	40000c00 	.word	0x40000c00
 8005590:	40010400 	.word	0x40010400
 8005594:	40014000 	.word	0x40014000
 8005598:	40014400 	.word	0x40014400
 800559c:	40014800 	.word	0x40014800
 80055a0:	40001800 	.word	0x40001800
 80055a4:	40001c00 	.word	0x40001c00
 80055a8:	40002000 	.word	0x40002000

080055ac <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b087      	sub	sp, #28
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
 80055b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6a1b      	ldr	r3, [r3, #32]
 80055c4:	f023 0201 	bic.w	r2, r3, #1
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	4a28      	ldr	r2, [pc, #160]	@ (8005678 <TIM_TI1_SetConfig+0xcc>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d01b      	beq.n	8005612 <TIM_TI1_SetConfig+0x66>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055e0:	d017      	beq.n	8005612 <TIM_TI1_SetConfig+0x66>
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	4a25      	ldr	r2, [pc, #148]	@ (800567c <TIM_TI1_SetConfig+0xd0>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d013      	beq.n	8005612 <TIM_TI1_SetConfig+0x66>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	4a24      	ldr	r2, [pc, #144]	@ (8005680 <TIM_TI1_SetConfig+0xd4>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d00f      	beq.n	8005612 <TIM_TI1_SetConfig+0x66>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	4a23      	ldr	r2, [pc, #140]	@ (8005684 <TIM_TI1_SetConfig+0xd8>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d00b      	beq.n	8005612 <TIM_TI1_SetConfig+0x66>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	4a22      	ldr	r2, [pc, #136]	@ (8005688 <TIM_TI1_SetConfig+0xdc>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d007      	beq.n	8005612 <TIM_TI1_SetConfig+0x66>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	4a21      	ldr	r2, [pc, #132]	@ (800568c <TIM_TI1_SetConfig+0xe0>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d003      	beq.n	8005612 <TIM_TI1_SetConfig+0x66>
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	4a20      	ldr	r2, [pc, #128]	@ (8005690 <TIM_TI1_SetConfig+0xe4>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d101      	bne.n	8005616 <TIM_TI1_SetConfig+0x6a>
 8005612:	2301      	movs	r3, #1
 8005614:	e000      	b.n	8005618 <TIM_TI1_SetConfig+0x6c>
 8005616:	2300      	movs	r3, #0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d008      	beq.n	800562e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	f023 0303 	bic.w	r3, r3, #3
 8005622:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4313      	orrs	r3, r2
 800562a:	617b      	str	r3, [r7, #20]
 800562c:	e003      	b.n	8005636 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	f043 0301 	orr.w	r3, r3, #1
 8005634:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800563c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	011b      	lsls	r3, r3, #4
 8005642:	b2db      	uxtb	r3, r3
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	4313      	orrs	r3, r2
 8005648:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	f023 030a 	bic.w	r3, r3, #10
 8005650:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	f003 030a 	and.w	r3, r3, #10
 8005658:	693a      	ldr	r2, [r7, #16]
 800565a:	4313      	orrs	r3, r2
 800565c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	697a      	ldr	r2, [r7, #20]
 8005662:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	693a      	ldr	r2, [r7, #16]
 8005668:	621a      	str	r2, [r3, #32]
}
 800566a:	bf00      	nop
 800566c:	371c      	adds	r7, #28
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	40010000 	.word	0x40010000
 800567c:	40000400 	.word	0x40000400
 8005680:	40000800 	.word	0x40000800
 8005684:	40000c00 	.word	0x40000c00
 8005688:	40010400 	.word	0x40010400
 800568c:	40014000 	.word	0x40014000
 8005690:	40001800 	.word	0x40001800

08005694 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005694:	b480      	push	{r7}
 8005696:	b087      	sub	sp, #28
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	607a      	str	r2, [r7, #4]
 80056a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6a1b      	ldr	r3, [r3, #32]
 80056a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6a1b      	ldr	r3, [r3, #32]
 80056ac:	f023 0210 	bic.w	r2, r3, #16
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	699b      	ldr	r3, [r3, #24]
 80056b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	021b      	lsls	r3, r3, #8
 80056c6:	693a      	ldr	r2, [r7, #16]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80056d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	031b      	lsls	r3, r3, #12
 80056d8:	b29b      	uxth	r3, r3
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	4313      	orrs	r3, r2
 80056de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80056e6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	011b      	lsls	r3, r3, #4
 80056ec:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	693a      	ldr	r2, [r7, #16]
 80056fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	621a      	str	r2, [r3, #32]
}
 8005702:	bf00      	nop
 8005704:	371c      	adds	r7, #28
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr

0800570e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800570e:	b480      	push	{r7}
 8005710:	b087      	sub	sp, #28
 8005712:	af00      	add	r7, sp, #0
 8005714:	60f8      	str	r0, [r7, #12]
 8005716:	60b9      	str	r1, [r7, #8]
 8005718:	607a      	str	r2, [r7, #4]
 800571a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6a1b      	ldr	r3, [r3, #32]
 8005720:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6a1b      	ldr	r3, [r3, #32]
 8005726:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	69db      	ldr	r3, [r3, #28]
 8005732:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	f023 0303 	bic.w	r3, r3, #3
 800573a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800573c:	693a      	ldr	r2, [r7, #16]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4313      	orrs	r3, r2
 8005742:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800574a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	011b      	lsls	r3, r3, #4
 8005750:	b2db      	uxtb	r3, r3
 8005752:	693a      	ldr	r2, [r7, #16]
 8005754:	4313      	orrs	r3, r2
 8005756:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800575e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	021b      	lsls	r3, r3, #8
 8005764:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8005768:	697a      	ldr	r2, [r7, #20]
 800576a:	4313      	orrs	r3, r2
 800576c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	693a      	ldr	r2, [r7, #16]
 8005772:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	697a      	ldr	r2, [r7, #20]
 8005778:	621a      	str	r2, [r3, #32]
}
 800577a:	bf00      	nop
 800577c:	371c      	adds	r7, #28
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr

08005786 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005786:	b480      	push	{r7}
 8005788:	b087      	sub	sp, #28
 800578a:	af00      	add	r7, sp, #0
 800578c:	60f8      	str	r0, [r7, #12]
 800578e:	60b9      	str	r1, [r7, #8]
 8005790:	607a      	str	r2, [r7, #4]
 8005792:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6a1b      	ldr	r3, [r3, #32]
 8005798:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6a1b      	ldr	r3, [r3, #32]
 800579e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	69db      	ldr	r3, [r3, #28]
 80057aa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057b2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	021b      	lsls	r3, r3, #8
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80057c4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	031b      	lsls	r3, r3, #12
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	693a      	ldr	r2, [r7, #16]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80057d8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	031b      	lsls	r3, r3, #12
 80057de:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80057e2:	697a      	ldr	r2, [r7, #20]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	693a      	ldr	r2, [r7, #16]
 80057ec:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	621a      	str	r2, [r3, #32]
}
 80057f4:	bf00      	nop
 80057f6:	371c      	adds	r7, #28
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005800:	b480      	push	{r7}
 8005802:	b087      	sub	sp, #28
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	f003 031f 	and.w	r3, r3, #31
 8005812:	2201      	movs	r2, #1
 8005814:	fa02 f303 	lsl.w	r3, r2, r3
 8005818:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6a1a      	ldr	r2, [r3, #32]
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	43db      	mvns	r3, r3
 8005822:	401a      	ands	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6a1a      	ldr	r2, [r3, #32]
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	f003 031f 	and.w	r3, r3, #31
 8005832:	6879      	ldr	r1, [r7, #4]
 8005834:	fa01 f303 	lsl.w	r3, r1, r3
 8005838:	431a      	orrs	r2, r3
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	621a      	str	r2, [r3, #32]
}
 800583e:	bf00      	nop
 8005840:	371c      	adds	r7, #28
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
	...

0800584c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800585c:	2b01      	cmp	r3, #1
 800585e:	d101      	bne.n	8005864 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005860:	2302      	movs	r3, #2
 8005862:	e05a      	b.n	800591a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2202      	movs	r2, #2
 8005870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800588a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	4313      	orrs	r3, r2
 8005894:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a21      	ldr	r2, [pc, #132]	@ (8005928 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d022      	beq.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058b0:	d01d      	beq.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a1d      	ldr	r2, [pc, #116]	@ (800592c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d018      	beq.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a1b      	ldr	r2, [pc, #108]	@ (8005930 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d013      	beq.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a1a      	ldr	r2, [pc, #104]	@ (8005934 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d00e      	beq.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a18      	ldr	r2, [pc, #96]	@ (8005938 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d009      	beq.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a17      	ldr	r2, [pc, #92]	@ (800593c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d004      	beq.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a15      	ldr	r2, [pc, #84]	@ (8005940 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d10c      	bne.n	8005908 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	68ba      	ldr	r2, [r7, #8]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68ba      	ldr	r2, [r7, #8]
 8005906:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3714      	adds	r7, #20
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	40010000 	.word	0x40010000
 800592c:	40000400 	.word	0x40000400
 8005930:	40000800 	.word	0x40000800
 8005934:	40000c00 	.word	0x40000c00
 8005938:	40010400 	.word	0x40010400
 800593c:	40014000 	.word	0x40014000
 8005940:	40001800 	.word	0x40001800

08005944 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d101      	bne.n	800597e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e042      	b.n	8005a04 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005984:	b2db      	uxtb	r3, r3
 8005986:	2b00      	cmp	r3, #0
 8005988:	d106      	bne.n	8005998 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f7fc fcba 	bl	800230c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2224      	movs	r2, #36	@ 0x24
 800599c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68da      	ldr	r2, [r3, #12]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80059ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 fcdd 	bl	8006370 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	691a      	ldr	r2, [r3, #16]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80059c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	695a      	ldr	r2, [r3, #20]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80059d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68da      	ldr	r2, [r3, #12]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80059e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2220      	movs	r2, #32
 80059f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2220      	movs	r2, #32
 80059f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3708      	adds	r7, #8
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d101      	bne.n	8005a1e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e04a      	b.n	8005ab4 <HAL_HalfDuplex_Init+0xa8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d106      	bne.n	8005a38 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f7fc fc6a 	bl	800230c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2224      	movs	r2, #36	@ 0x24
 8005a3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68da      	ldr	r2, [r3, #12]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 fc8d 	bl	8006370 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	691a      	ldr	r2, [r3, #16]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	695a      	ldr	r2, [r3, #20]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8005a74:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	695a      	ldr	r2, [r3, #20]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f042 0208 	orr.w	r2, r2, #8
 8005a84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68da      	ldr	r2, [r3, #12]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005a94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2220      	movs	r2, #32
 8005aa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2220      	movs	r2, #32
 8005aa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3708      	adds	r7, #8
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b0ba      	sub	sp, #232	@ 0xe8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005af2:	f003 030f 	and.w	r3, r3, #15
 8005af6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005afa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d10f      	bne.n	8005b22 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b06:	f003 0320 	and.w	r3, r3, #32
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d009      	beq.n	8005b22 <HAL_UART_IRQHandler+0x66>
 8005b0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b12:	f003 0320 	and.w	r3, r3, #32
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d003      	beq.n	8005b22 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 fb69 	bl	80061f2 <UART_Receive_IT>
      return;
 8005b20:	e25b      	b.n	8005fda <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005b22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f000 80de 	beq.w	8005ce8 <HAL_UART_IRQHandler+0x22c>
 8005b2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b30:	f003 0301 	and.w	r3, r3, #1
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d106      	bne.n	8005b46 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b3c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f000 80d1 	beq.w	8005ce8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b4a:	f003 0301 	and.w	r3, r3, #1
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00b      	beq.n	8005b6a <HAL_UART_IRQHandler+0xae>
 8005b52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d005      	beq.n	8005b6a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b62:	f043 0201 	orr.w	r2, r3, #1
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b6e:	f003 0304 	and.w	r3, r3, #4
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00b      	beq.n	8005b8e <HAL_UART_IRQHandler+0xd2>
 8005b76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d005      	beq.n	8005b8e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b86:	f043 0202 	orr.w	r2, r3, #2
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b92:	f003 0302 	and.w	r3, r3, #2
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00b      	beq.n	8005bb2 <HAL_UART_IRQHandler+0xf6>
 8005b9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b9e:	f003 0301 	and.w	r3, r3, #1
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d005      	beq.n	8005bb2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005baa:	f043 0204 	orr.w	r2, r3, #4
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bb6:	f003 0308 	and.w	r3, r3, #8
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d011      	beq.n	8005be2 <HAL_UART_IRQHandler+0x126>
 8005bbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bc2:	f003 0320 	and.w	r3, r3, #32
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d105      	bne.n	8005bd6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005bca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d005      	beq.n	8005be2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bda:	f043 0208 	orr.w	r2, r3, #8
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	f000 81f2 	beq.w	8005fd0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005bec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bf0:	f003 0320 	and.w	r3, r3, #32
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d008      	beq.n	8005c0a <HAL_UART_IRQHandler+0x14e>
 8005bf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bfc:	f003 0320 	and.w	r3, r3, #32
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d002      	beq.n	8005c0a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 faf4 	bl	80061f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	695b      	ldr	r3, [r3, #20]
 8005c10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c14:	2b40      	cmp	r3, #64	@ 0x40
 8005c16:	bf0c      	ite	eq
 8005c18:	2301      	moveq	r3, #1
 8005c1a:	2300      	movne	r3, #0
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c26:	f003 0308 	and.w	r3, r3, #8
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d103      	bne.n	8005c36 <HAL_UART_IRQHandler+0x17a>
 8005c2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d04f      	beq.n	8005cd6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 f9fc 	bl	8006034 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c46:	2b40      	cmp	r3, #64	@ 0x40
 8005c48:	d141      	bne.n	8005cce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	3314      	adds	r3, #20
 8005c50:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c54:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005c58:	e853 3f00 	ldrex	r3, [r3]
 8005c5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005c60:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005c64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	3314      	adds	r3, #20
 8005c72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005c76:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005c7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005c82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005c86:	e841 2300 	strex	r3, r2, [r1]
 8005c8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005c8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1d9      	bne.n	8005c4a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d013      	beq.n	8005cc6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ca2:	4a7e      	ldr	r2, [pc, #504]	@ (8005e9c <HAL_UART_IRQHandler+0x3e0>)
 8005ca4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7fd fe98 	bl	80039e0 <HAL_DMA_Abort_IT>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d016      	beq.n	8005ce4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005cc0:	4610      	mov	r0, r2
 8005cc2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cc4:	e00e      	b.n	8005ce4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 f99e 	bl	8006008 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ccc:	e00a      	b.n	8005ce4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 f99a 	bl	8006008 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cd4:	e006      	b.n	8005ce4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 f996 	bl	8006008 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005ce2:	e175      	b.n	8005fd0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ce4:	bf00      	nop
    return;
 8005ce6:	e173      	b.n	8005fd0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	f040 814f 	bne.w	8005f90 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cf6:	f003 0310 	and.w	r3, r3, #16
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	f000 8148 	beq.w	8005f90 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d04:	f003 0310 	and.w	r3, r3, #16
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f000 8141 	beq.w	8005f90 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d0e:	2300      	movs	r3, #0
 8005d10:	60bb      	str	r3, [r7, #8]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	60bb      	str	r3, [r7, #8]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	60bb      	str	r3, [r7, #8]
 8005d22:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	695b      	ldr	r3, [r3, #20]
 8005d2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d2e:	2b40      	cmp	r3, #64	@ 0x40
 8005d30:	f040 80b6 	bne.w	8005ea0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	f000 8145 	beq.w	8005fd4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d52:	429a      	cmp	r2, r3
 8005d54:	f080 813e 	bcs.w	8005fd4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d5e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d64:	69db      	ldr	r3, [r3, #28]
 8005d66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d6a:	f000 8088 	beq.w	8005e7e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	330c      	adds	r3, #12
 8005d74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d78:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005d7c:	e853 3f00 	ldrex	r3, [r3]
 8005d80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005d84:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	330c      	adds	r3, #12
 8005d96:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005d9a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005d9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005da6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005daa:	e841 2300 	strex	r3, r2, [r1]
 8005dae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005db2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1d9      	bne.n	8005d6e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	3314      	adds	r3, #20
 8005dc0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005dc4:	e853 3f00 	ldrex	r3, [r3]
 8005dc8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005dca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005dcc:	f023 0301 	bic.w	r3, r3, #1
 8005dd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	3314      	adds	r3, #20
 8005dda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005dde:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005de2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005de6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005dea:	e841 2300 	strex	r3, r2, [r1]
 8005dee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005df0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1e1      	bne.n	8005dba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	3314      	adds	r3, #20
 8005dfc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005e00:	e853 3f00 	ldrex	r3, [r3]
 8005e04:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005e06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	3314      	adds	r3, #20
 8005e16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005e1a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005e1c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005e20:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005e22:	e841 2300 	strex	r3, r2, [r1]
 8005e26:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005e28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1e3      	bne.n	8005df6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2220      	movs	r2, #32
 8005e32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	330c      	adds	r3, #12
 8005e42:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e46:	e853 3f00 	ldrex	r3, [r3]
 8005e4a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005e4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e4e:	f023 0310 	bic.w	r3, r3, #16
 8005e52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	330c      	adds	r3, #12
 8005e5c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005e60:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005e62:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e64:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005e66:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005e68:	e841 2300 	strex	r3, r2, [r1]
 8005e6c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005e6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d1e3      	bne.n	8005e3c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f7fd fd41 	bl	8003900 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2202      	movs	r2, #2
 8005e82:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	4619      	mov	r1, r3
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 f8c1 	bl	800601c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e9a:	e09b      	b.n	8005fd4 <HAL_UART_IRQHandler+0x518>
 8005e9c:	080060fb 	.word	0x080060fb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	1ad3      	subs	r3, r2, r3
 8005eac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	f000 808e 	beq.w	8005fd8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005ebc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	f000 8089 	beq.w	8005fd8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	330c      	adds	r3, #12
 8005ecc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ed0:	e853 3f00 	ldrex	r3, [r3]
 8005ed4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ed8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005edc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	330c      	adds	r3, #12
 8005ee6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005eea:	647a      	str	r2, [r7, #68]	@ 0x44
 8005eec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ef0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ef2:	e841 2300 	strex	r3, r2, [r1]
 8005ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ef8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1e3      	bne.n	8005ec6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	3314      	adds	r3, #20
 8005f04:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f08:	e853 3f00 	ldrex	r3, [r3]
 8005f0c:	623b      	str	r3, [r7, #32]
   return(result);
 8005f0e:	6a3b      	ldr	r3, [r7, #32]
 8005f10:	f023 0301 	bic.w	r3, r3, #1
 8005f14:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	3314      	adds	r3, #20
 8005f1e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005f22:	633a      	str	r2, [r7, #48]	@ 0x30
 8005f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f2a:	e841 2300 	strex	r3, r2, [r1]
 8005f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d1e3      	bne.n	8005efe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2220      	movs	r2, #32
 8005f3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	330c      	adds	r3, #12
 8005f4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	e853 3f00 	ldrex	r3, [r3]
 8005f52:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f023 0310 	bic.w	r3, r3, #16
 8005f5a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	330c      	adds	r3, #12
 8005f64:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005f68:	61fa      	str	r2, [r7, #28]
 8005f6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f6c:	69b9      	ldr	r1, [r7, #24]
 8005f6e:	69fa      	ldr	r2, [r7, #28]
 8005f70:	e841 2300 	strex	r3, r2, [r1]
 8005f74:	617b      	str	r3, [r7, #20]
   return(result);
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d1e3      	bne.n	8005f44 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2202      	movs	r2, #2
 8005f80:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f82:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005f86:	4619      	mov	r1, r3
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f000 f847 	bl	800601c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f8e:	e023      	b.n	8005fd8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d009      	beq.n	8005fb0 <HAL_UART_IRQHandler+0x4f4>
 8005f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d003      	beq.n	8005fb0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 f8ba 	bl	8006122 <UART_Transmit_IT>
    return;
 8005fae:	e014      	b.n	8005fda <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d00e      	beq.n	8005fda <HAL_UART_IRQHandler+0x51e>
 8005fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d008      	beq.n	8005fda <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f000 f8fa 	bl	80061c2 <UART_EndTransmit_IT>
    return;
 8005fce:	e004      	b.n	8005fda <HAL_UART_IRQHandler+0x51e>
    return;
 8005fd0:	bf00      	nop
 8005fd2:	e002      	b.n	8005fda <HAL_UART_IRQHandler+0x51e>
      return;
 8005fd4:	bf00      	nop
 8005fd6:	e000      	b.n	8005fda <HAL_UART_IRQHandler+0x51e>
      return;
 8005fd8:	bf00      	nop
  }
}
 8005fda:	37e8      	adds	r7, #232	@ 0xe8
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005fe8:	bf00      	nop
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005ffc:	bf00      	nop
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	460b      	mov	r3, r1
 8006026:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006028:	bf00      	nop
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006034:	b480      	push	{r7}
 8006036:	b095      	sub	sp, #84	@ 0x54
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	330c      	adds	r3, #12
 8006042:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006046:	e853 3f00 	ldrex	r3, [r3]
 800604a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800604c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800604e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006052:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	330c      	adds	r3, #12
 800605a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800605c:	643a      	str	r2, [r7, #64]	@ 0x40
 800605e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006060:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006062:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006064:	e841 2300 	strex	r3, r2, [r1]
 8006068:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800606a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800606c:	2b00      	cmp	r3, #0
 800606e:	d1e5      	bne.n	800603c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	3314      	adds	r3, #20
 8006076:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006078:	6a3b      	ldr	r3, [r7, #32]
 800607a:	e853 3f00 	ldrex	r3, [r3]
 800607e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	f023 0301 	bic.w	r3, r3, #1
 8006086:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	3314      	adds	r3, #20
 800608e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006090:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006092:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006094:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006096:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006098:	e841 2300 	strex	r3, r2, [r1]
 800609c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800609e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d1e5      	bne.n	8006070 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d119      	bne.n	80060e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	330c      	adds	r3, #12
 80060b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	e853 3f00 	ldrex	r3, [r3]
 80060ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	f023 0310 	bic.w	r3, r3, #16
 80060c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	330c      	adds	r3, #12
 80060ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060cc:	61ba      	str	r2, [r7, #24]
 80060ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d0:	6979      	ldr	r1, [r7, #20]
 80060d2:	69ba      	ldr	r2, [r7, #24]
 80060d4:	e841 2300 	strex	r3, r2, [r1]
 80060d8:	613b      	str	r3, [r7, #16]
   return(result);
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d1e5      	bne.n	80060ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2220      	movs	r2, #32
 80060e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80060ee:	bf00      	nop
 80060f0:	3754      	adds	r7, #84	@ 0x54
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr

080060fa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b084      	sub	sp, #16
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006106:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2200      	movs	r2, #0
 800610c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006114:	68f8      	ldr	r0, [r7, #12]
 8006116:	f7ff ff77 	bl	8006008 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800611a:	bf00      	nop
 800611c:	3710      	adds	r7, #16
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006122:	b480      	push	{r7}
 8006124:	b085      	sub	sp, #20
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006130:	b2db      	uxtb	r3, r3
 8006132:	2b21      	cmp	r3, #33	@ 0x21
 8006134:	d13e      	bne.n	80061b4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800613e:	d114      	bne.n	800616a <UART_Transmit_IT+0x48>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d110      	bne.n	800616a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6a1b      	ldr	r3, [r3, #32]
 800614c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	881b      	ldrh	r3, [r3, #0]
 8006152:	461a      	mov	r2, r3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800615c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a1b      	ldr	r3, [r3, #32]
 8006162:	1c9a      	adds	r2, r3, #2
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	621a      	str	r2, [r3, #32]
 8006168:	e008      	b.n	800617c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a1b      	ldr	r3, [r3, #32]
 800616e:	1c59      	adds	r1, r3, #1
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	6211      	str	r1, [r2, #32]
 8006174:	781a      	ldrb	r2, [r3, #0]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006180:	b29b      	uxth	r3, r3
 8006182:	3b01      	subs	r3, #1
 8006184:	b29b      	uxth	r3, r3
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	4619      	mov	r1, r3
 800618a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800618c:	2b00      	cmp	r3, #0
 800618e:	d10f      	bne.n	80061b0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68da      	ldr	r2, [r3, #12]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800619e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68da      	ldr	r2, [r3, #12]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80061ae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80061b0:	2300      	movs	r3, #0
 80061b2:	e000      	b.n	80061b6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80061b4:	2302      	movs	r3, #2
  }
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3714      	adds	r7, #20
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr

080061c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b082      	sub	sp, #8
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68da      	ldr	r2, [r3, #12]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2220      	movs	r2, #32
 80061de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f7ff fefc 	bl	8005fe0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3708      	adds	r7, #8
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b08c      	sub	sp, #48	@ 0x30
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b22      	cmp	r3, #34	@ 0x22
 8006204:	f040 80ae 	bne.w	8006364 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006210:	d117      	bne.n	8006242 <UART_Receive_IT+0x50>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d113      	bne.n	8006242 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800621a:	2300      	movs	r3, #0
 800621c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006222:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	b29b      	uxth	r3, r3
 800622c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006230:	b29a      	uxth	r2, r3
 8006232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006234:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800623a:	1c9a      	adds	r2, r3, #2
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006240:	e026      	b.n	8006290 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006246:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006248:	2300      	movs	r3, #0
 800624a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006254:	d007      	beq.n	8006266 <UART_Receive_IT+0x74>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d10a      	bne.n	8006274 <UART_Receive_IT+0x82>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d106      	bne.n	8006274 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	b2da      	uxtb	r2, r3
 800626e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006270:	701a      	strb	r2, [r3, #0]
 8006272:	e008      	b.n	8006286 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	b2db      	uxtb	r3, r3
 800627c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006280:	b2da      	uxtb	r2, r3
 8006282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006284:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800628a:	1c5a      	adds	r2, r3, #1
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006294:	b29b      	uxth	r3, r3
 8006296:	3b01      	subs	r3, #1
 8006298:	b29b      	uxth	r3, r3
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	4619      	mov	r1, r3
 800629e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d15d      	bne.n	8006360 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	68da      	ldr	r2, [r3, #12]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f022 0220 	bic.w	r2, r2, #32
 80062b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68da      	ldr	r2, [r3, #12]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80062c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	695a      	ldr	r2, [r3, #20]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f022 0201 	bic.w	r2, r2, #1
 80062d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2220      	movs	r2, #32
 80062d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d135      	bne.n	8006356 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	330c      	adds	r3, #12
 80062f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	e853 3f00 	ldrex	r3, [r3]
 80062fe:	613b      	str	r3, [r7, #16]
   return(result);
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	f023 0310 	bic.w	r3, r3, #16
 8006306:	627b      	str	r3, [r7, #36]	@ 0x24
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	330c      	adds	r3, #12
 800630e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006310:	623a      	str	r2, [r7, #32]
 8006312:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006314:	69f9      	ldr	r1, [r7, #28]
 8006316:	6a3a      	ldr	r2, [r7, #32]
 8006318:	e841 2300 	strex	r3, r2, [r1]
 800631c:	61bb      	str	r3, [r7, #24]
   return(result);
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d1e5      	bne.n	80062f0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0310 	and.w	r3, r3, #16
 800632e:	2b10      	cmp	r3, #16
 8006330:	d10a      	bne.n	8006348 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006332:	2300      	movs	r3, #0
 8006334:	60fb      	str	r3, [r7, #12]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	60fb      	str	r3, [r7, #12]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	60fb      	str	r3, [r7, #12]
 8006346:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800634c:	4619      	mov	r1, r3
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f7ff fe64 	bl	800601c <HAL_UARTEx_RxEventCallback>
 8006354:	e002      	b.n	800635c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f7ff fe4c 	bl	8005ff4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800635c:	2300      	movs	r3, #0
 800635e:	e002      	b.n	8006366 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006360:	2300      	movs	r3, #0
 8006362:	e000      	b.n	8006366 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006364:	2302      	movs	r3, #2
  }
}
 8006366:	4618      	mov	r0, r3
 8006368:	3730      	adds	r7, #48	@ 0x30
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
	...

08006370 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006374:	b0c0      	sub	sp, #256	@ 0x100
 8006376:	af00      	add	r7, sp, #0
 8006378:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800637c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800638c:	68d9      	ldr	r1, [r3, #12]
 800638e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	ea40 0301 	orr.w	r3, r0, r1
 8006398:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800639a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800639e:	689a      	ldr	r2, [r3, #8]
 80063a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	431a      	orrs	r2, r3
 80063a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	431a      	orrs	r2, r3
 80063b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063b4:	69db      	ldr	r3, [r3, #28]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80063bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80063c8:	f021 010c 	bic.w	r1, r1, #12
 80063cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80063d6:	430b      	orrs	r3, r1
 80063d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80063da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	695b      	ldr	r3, [r3, #20]
 80063e2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80063e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063ea:	6999      	ldr	r1, [r3, #24]
 80063ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	ea40 0301 	orr.w	r3, r0, r1
 80063f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80063f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	4b8f      	ldr	r3, [pc, #572]	@ (800663c <UART_SetConfig+0x2cc>)
 8006400:	429a      	cmp	r2, r3
 8006402:	d005      	beq.n	8006410 <UART_SetConfig+0xa0>
 8006404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	4b8d      	ldr	r3, [pc, #564]	@ (8006640 <UART_SetConfig+0x2d0>)
 800640c:	429a      	cmp	r2, r3
 800640e:	d104      	bne.n	800641a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006410:	f7fe f812 	bl	8004438 <HAL_RCC_GetPCLK2Freq>
 8006414:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006418:	e003      	b.n	8006422 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800641a:	f7fd fff9 	bl	8004410 <HAL_RCC_GetPCLK1Freq>
 800641e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006426:	69db      	ldr	r3, [r3, #28]
 8006428:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800642c:	f040 810c 	bne.w	8006648 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006430:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006434:	2200      	movs	r2, #0
 8006436:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800643a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800643e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006442:	4622      	mov	r2, r4
 8006444:	462b      	mov	r3, r5
 8006446:	1891      	adds	r1, r2, r2
 8006448:	65b9      	str	r1, [r7, #88]	@ 0x58
 800644a:	415b      	adcs	r3, r3
 800644c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800644e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006452:	4621      	mov	r1, r4
 8006454:	eb12 0801 	adds.w	r8, r2, r1
 8006458:	4629      	mov	r1, r5
 800645a:	eb43 0901 	adc.w	r9, r3, r1
 800645e:	f04f 0200 	mov.w	r2, #0
 8006462:	f04f 0300 	mov.w	r3, #0
 8006466:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800646a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800646e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006472:	4690      	mov	r8, r2
 8006474:	4699      	mov	r9, r3
 8006476:	4623      	mov	r3, r4
 8006478:	eb18 0303 	adds.w	r3, r8, r3
 800647c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006480:	462b      	mov	r3, r5
 8006482:	eb49 0303 	adc.w	r3, r9, r3
 8006486:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800648a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006496:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800649a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800649e:	460b      	mov	r3, r1
 80064a0:	18db      	adds	r3, r3, r3
 80064a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80064a4:	4613      	mov	r3, r2
 80064a6:	eb42 0303 	adc.w	r3, r2, r3
 80064aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80064ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80064b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80064b4:	f7fa fbc8 	bl	8000c48 <__aeabi_uldivmod>
 80064b8:	4602      	mov	r2, r0
 80064ba:	460b      	mov	r3, r1
 80064bc:	4b61      	ldr	r3, [pc, #388]	@ (8006644 <UART_SetConfig+0x2d4>)
 80064be:	fba3 2302 	umull	r2, r3, r3, r2
 80064c2:	095b      	lsrs	r3, r3, #5
 80064c4:	011c      	lsls	r4, r3, #4
 80064c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064ca:	2200      	movs	r2, #0
 80064cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80064d0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80064d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80064d8:	4642      	mov	r2, r8
 80064da:	464b      	mov	r3, r9
 80064dc:	1891      	adds	r1, r2, r2
 80064de:	64b9      	str	r1, [r7, #72]	@ 0x48
 80064e0:	415b      	adcs	r3, r3
 80064e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80064e8:	4641      	mov	r1, r8
 80064ea:	eb12 0a01 	adds.w	sl, r2, r1
 80064ee:	4649      	mov	r1, r9
 80064f0:	eb43 0b01 	adc.w	fp, r3, r1
 80064f4:	f04f 0200 	mov.w	r2, #0
 80064f8:	f04f 0300 	mov.w	r3, #0
 80064fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006500:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006504:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006508:	4692      	mov	sl, r2
 800650a:	469b      	mov	fp, r3
 800650c:	4643      	mov	r3, r8
 800650e:	eb1a 0303 	adds.w	r3, sl, r3
 8006512:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006516:	464b      	mov	r3, r9
 8006518:	eb4b 0303 	adc.w	r3, fp, r3
 800651c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800652c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006530:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006534:	460b      	mov	r3, r1
 8006536:	18db      	adds	r3, r3, r3
 8006538:	643b      	str	r3, [r7, #64]	@ 0x40
 800653a:	4613      	mov	r3, r2
 800653c:	eb42 0303 	adc.w	r3, r2, r3
 8006540:	647b      	str	r3, [r7, #68]	@ 0x44
 8006542:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006546:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800654a:	f7fa fb7d 	bl	8000c48 <__aeabi_uldivmod>
 800654e:	4602      	mov	r2, r0
 8006550:	460b      	mov	r3, r1
 8006552:	4611      	mov	r1, r2
 8006554:	4b3b      	ldr	r3, [pc, #236]	@ (8006644 <UART_SetConfig+0x2d4>)
 8006556:	fba3 2301 	umull	r2, r3, r3, r1
 800655a:	095b      	lsrs	r3, r3, #5
 800655c:	2264      	movs	r2, #100	@ 0x64
 800655e:	fb02 f303 	mul.w	r3, r2, r3
 8006562:	1acb      	subs	r3, r1, r3
 8006564:	00db      	lsls	r3, r3, #3
 8006566:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800656a:	4b36      	ldr	r3, [pc, #216]	@ (8006644 <UART_SetConfig+0x2d4>)
 800656c:	fba3 2302 	umull	r2, r3, r3, r2
 8006570:	095b      	lsrs	r3, r3, #5
 8006572:	005b      	lsls	r3, r3, #1
 8006574:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006578:	441c      	add	r4, r3
 800657a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800657e:	2200      	movs	r2, #0
 8006580:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006584:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006588:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800658c:	4642      	mov	r2, r8
 800658e:	464b      	mov	r3, r9
 8006590:	1891      	adds	r1, r2, r2
 8006592:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006594:	415b      	adcs	r3, r3
 8006596:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006598:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800659c:	4641      	mov	r1, r8
 800659e:	1851      	adds	r1, r2, r1
 80065a0:	6339      	str	r1, [r7, #48]	@ 0x30
 80065a2:	4649      	mov	r1, r9
 80065a4:	414b      	adcs	r3, r1
 80065a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80065a8:	f04f 0200 	mov.w	r2, #0
 80065ac:	f04f 0300 	mov.w	r3, #0
 80065b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80065b4:	4659      	mov	r1, fp
 80065b6:	00cb      	lsls	r3, r1, #3
 80065b8:	4651      	mov	r1, sl
 80065ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065be:	4651      	mov	r1, sl
 80065c0:	00ca      	lsls	r2, r1, #3
 80065c2:	4610      	mov	r0, r2
 80065c4:	4619      	mov	r1, r3
 80065c6:	4603      	mov	r3, r0
 80065c8:	4642      	mov	r2, r8
 80065ca:	189b      	adds	r3, r3, r2
 80065cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80065d0:	464b      	mov	r3, r9
 80065d2:	460a      	mov	r2, r1
 80065d4:	eb42 0303 	adc.w	r3, r2, r3
 80065d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80065dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80065e8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80065ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80065f0:	460b      	mov	r3, r1
 80065f2:	18db      	adds	r3, r3, r3
 80065f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065f6:	4613      	mov	r3, r2
 80065f8:	eb42 0303 	adc.w	r3, r2, r3
 80065fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006602:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006606:	f7fa fb1f 	bl	8000c48 <__aeabi_uldivmod>
 800660a:	4602      	mov	r2, r0
 800660c:	460b      	mov	r3, r1
 800660e:	4b0d      	ldr	r3, [pc, #52]	@ (8006644 <UART_SetConfig+0x2d4>)
 8006610:	fba3 1302 	umull	r1, r3, r3, r2
 8006614:	095b      	lsrs	r3, r3, #5
 8006616:	2164      	movs	r1, #100	@ 0x64
 8006618:	fb01 f303 	mul.w	r3, r1, r3
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	00db      	lsls	r3, r3, #3
 8006620:	3332      	adds	r3, #50	@ 0x32
 8006622:	4a08      	ldr	r2, [pc, #32]	@ (8006644 <UART_SetConfig+0x2d4>)
 8006624:	fba2 2303 	umull	r2, r3, r2, r3
 8006628:	095b      	lsrs	r3, r3, #5
 800662a:	f003 0207 	and.w	r2, r3, #7
 800662e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4422      	add	r2, r4
 8006636:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006638:	e106      	b.n	8006848 <UART_SetConfig+0x4d8>
 800663a:	bf00      	nop
 800663c:	40011000 	.word	0x40011000
 8006640:	40011400 	.word	0x40011400
 8006644:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006648:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800664c:	2200      	movs	r2, #0
 800664e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006652:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006656:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800665a:	4642      	mov	r2, r8
 800665c:	464b      	mov	r3, r9
 800665e:	1891      	adds	r1, r2, r2
 8006660:	6239      	str	r1, [r7, #32]
 8006662:	415b      	adcs	r3, r3
 8006664:	627b      	str	r3, [r7, #36]	@ 0x24
 8006666:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800666a:	4641      	mov	r1, r8
 800666c:	1854      	adds	r4, r2, r1
 800666e:	4649      	mov	r1, r9
 8006670:	eb43 0501 	adc.w	r5, r3, r1
 8006674:	f04f 0200 	mov.w	r2, #0
 8006678:	f04f 0300 	mov.w	r3, #0
 800667c:	00eb      	lsls	r3, r5, #3
 800667e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006682:	00e2      	lsls	r2, r4, #3
 8006684:	4614      	mov	r4, r2
 8006686:	461d      	mov	r5, r3
 8006688:	4643      	mov	r3, r8
 800668a:	18e3      	adds	r3, r4, r3
 800668c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006690:	464b      	mov	r3, r9
 8006692:	eb45 0303 	adc.w	r3, r5, r3
 8006696:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800669a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80066a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80066aa:	f04f 0200 	mov.w	r2, #0
 80066ae:	f04f 0300 	mov.w	r3, #0
 80066b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80066b6:	4629      	mov	r1, r5
 80066b8:	008b      	lsls	r3, r1, #2
 80066ba:	4621      	mov	r1, r4
 80066bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066c0:	4621      	mov	r1, r4
 80066c2:	008a      	lsls	r2, r1, #2
 80066c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80066c8:	f7fa fabe 	bl	8000c48 <__aeabi_uldivmod>
 80066cc:	4602      	mov	r2, r0
 80066ce:	460b      	mov	r3, r1
 80066d0:	4b60      	ldr	r3, [pc, #384]	@ (8006854 <UART_SetConfig+0x4e4>)
 80066d2:	fba3 2302 	umull	r2, r3, r3, r2
 80066d6:	095b      	lsrs	r3, r3, #5
 80066d8:	011c      	lsls	r4, r3, #4
 80066da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066de:	2200      	movs	r2, #0
 80066e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80066e4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80066e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80066ec:	4642      	mov	r2, r8
 80066ee:	464b      	mov	r3, r9
 80066f0:	1891      	adds	r1, r2, r2
 80066f2:	61b9      	str	r1, [r7, #24]
 80066f4:	415b      	adcs	r3, r3
 80066f6:	61fb      	str	r3, [r7, #28]
 80066f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80066fc:	4641      	mov	r1, r8
 80066fe:	1851      	adds	r1, r2, r1
 8006700:	6139      	str	r1, [r7, #16]
 8006702:	4649      	mov	r1, r9
 8006704:	414b      	adcs	r3, r1
 8006706:	617b      	str	r3, [r7, #20]
 8006708:	f04f 0200 	mov.w	r2, #0
 800670c:	f04f 0300 	mov.w	r3, #0
 8006710:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006714:	4659      	mov	r1, fp
 8006716:	00cb      	lsls	r3, r1, #3
 8006718:	4651      	mov	r1, sl
 800671a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800671e:	4651      	mov	r1, sl
 8006720:	00ca      	lsls	r2, r1, #3
 8006722:	4610      	mov	r0, r2
 8006724:	4619      	mov	r1, r3
 8006726:	4603      	mov	r3, r0
 8006728:	4642      	mov	r2, r8
 800672a:	189b      	adds	r3, r3, r2
 800672c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006730:	464b      	mov	r3, r9
 8006732:	460a      	mov	r2, r1
 8006734:	eb42 0303 	adc.w	r3, r2, r3
 8006738:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800673c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006746:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006748:	f04f 0200 	mov.w	r2, #0
 800674c:	f04f 0300 	mov.w	r3, #0
 8006750:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006754:	4649      	mov	r1, r9
 8006756:	008b      	lsls	r3, r1, #2
 8006758:	4641      	mov	r1, r8
 800675a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800675e:	4641      	mov	r1, r8
 8006760:	008a      	lsls	r2, r1, #2
 8006762:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006766:	f7fa fa6f 	bl	8000c48 <__aeabi_uldivmod>
 800676a:	4602      	mov	r2, r0
 800676c:	460b      	mov	r3, r1
 800676e:	4611      	mov	r1, r2
 8006770:	4b38      	ldr	r3, [pc, #224]	@ (8006854 <UART_SetConfig+0x4e4>)
 8006772:	fba3 2301 	umull	r2, r3, r3, r1
 8006776:	095b      	lsrs	r3, r3, #5
 8006778:	2264      	movs	r2, #100	@ 0x64
 800677a:	fb02 f303 	mul.w	r3, r2, r3
 800677e:	1acb      	subs	r3, r1, r3
 8006780:	011b      	lsls	r3, r3, #4
 8006782:	3332      	adds	r3, #50	@ 0x32
 8006784:	4a33      	ldr	r2, [pc, #204]	@ (8006854 <UART_SetConfig+0x4e4>)
 8006786:	fba2 2303 	umull	r2, r3, r2, r3
 800678a:	095b      	lsrs	r3, r3, #5
 800678c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006790:	441c      	add	r4, r3
 8006792:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006796:	2200      	movs	r2, #0
 8006798:	673b      	str	r3, [r7, #112]	@ 0x70
 800679a:	677a      	str	r2, [r7, #116]	@ 0x74
 800679c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80067a0:	4642      	mov	r2, r8
 80067a2:	464b      	mov	r3, r9
 80067a4:	1891      	adds	r1, r2, r2
 80067a6:	60b9      	str	r1, [r7, #8]
 80067a8:	415b      	adcs	r3, r3
 80067aa:	60fb      	str	r3, [r7, #12]
 80067ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80067b0:	4641      	mov	r1, r8
 80067b2:	1851      	adds	r1, r2, r1
 80067b4:	6039      	str	r1, [r7, #0]
 80067b6:	4649      	mov	r1, r9
 80067b8:	414b      	adcs	r3, r1
 80067ba:	607b      	str	r3, [r7, #4]
 80067bc:	f04f 0200 	mov.w	r2, #0
 80067c0:	f04f 0300 	mov.w	r3, #0
 80067c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80067c8:	4659      	mov	r1, fp
 80067ca:	00cb      	lsls	r3, r1, #3
 80067cc:	4651      	mov	r1, sl
 80067ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067d2:	4651      	mov	r1, sl
 80067d4:	00ca      	lsls	r2, r1, #3
 80067d6:	4610      	mov	r0, r2
 80067d8:	4619      	mov	r1, r3
 80067da:	4603      	mov	r3, r0
 80067dc:	4642      	mov	r2, r8
 80067de:	189b      	adds	r3, r3, r2
 80067e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80067e2:	464b      	mov	r3, r9
 80067e4:	460a      	mov	r2, r1
 80067e6:	eb42 0303 	adc.w	r3, r2, r3
 80067ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80067ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80067f6:	667a      	str	r2, [r7, #100]	@ 0x64
 80067f8:	f04f 0200 	mov.w	r2, #0
 80067fc:	f04f 0300 	mov.w	r3, #0
 8006800:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006804:	4649      	mov	r1, r9
 8006806:	008b      	lsls	r3, r1, #2
 8006808:	4641      	mov	r1, r8
 800680a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800680e:	4641      	mov	r1, r8
 8006810:	008a      	lsls	r2, r1, #2
 8006812:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006816:	f7fa fa17 	bl	8000c48 <__aeabi_uldivmod>
 800681a:	4602      	mov	r2, r0
 800681c:	460b      	mov	r3, r1
 800681e:	4b0d      	ldr	r3, [pc, #52]	@ (8006854 <UART_SetConfig+0x4e4>)
 8006820:	fba3 1302 	umull	r1, r3, r3, r2
 8006824:	095b      	lsrs	r3, r3, #5
 8006826:	2164      	movs	r1, #100	@ 0x64
 8006828:	fb01 f303 	mul.w	r3, r1, r3
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	011b      	lsls	r3, r3, #4
 8006830:	3332      	adds	r3, #50	@ 0x32
 8006832:	4a08      	ldr	r2, [pc, #32]	@ (8006854 <UART_SetConfig+0x4e4>)
 8006834:	fba2 2303 	umull	r2, r3, r2, r3
 8006838:	095b      	lsrs	r3, r3, #5
 800683a:	f003 020f 	and.w	r2, r3, #15
 800683e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4422      	add	r2, r4
 8006846:	609a      	str	r2, [r3, #8]
}
 8006848:	bf00      	nop
 800684a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800684e:	46bd      	mov	sp, r7
 8006850:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006854:	51eb851f 	.word	0x51eb851f

08006858 <__cvt>:
 8006858:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800685c:	ec57 6b10 	vmov	r6, r7, d0
 8006860:	2f00      	cmp	r7, #0
 8006862:	460c      	mov	r4, r1
 8006864:	4619      	mov	r1, r3
 8006866:	463b      	mov	r3, r7
 8006868:	bfbb      	ittet	lt
 800686a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800686e:	461f      	movlt	r7, r3
 8006870:	2300      	movge	r3, #0
 8006872:	232d      	movlt	r3, #45	@ 0x2d
 8006874:	700b      	strb	r3, [r1, #0]
 8006876:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006878:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800687c:	4691      	mov	r9, r2
 800687e:	f023 0820 	bic.w	r8, r3, #32
 8006882:	bfbc      	itt	lt
 8006884:	4632      	movlt	r2, r6
 8006886:	4616      	movlt	r6, r2
 8006888:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800688c:	d005      	beq.n	800689a <__cvt+0x42>
 800688e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006892:	d100      	bne.n	8006896 <__cvt+0x3e>
 8006894:	3401      	adds	r4, #1
 8006896:	2102      	movs	r1, #2
 8006898:	e000      	b.n	800689c <__cvt+0x44>
 800689a:	2103      	movs	r1, #3
 800689c:	ab03      	add	r3, sp, #12
 800689e:	9301      	str	r3, [sp, #4]
 80068a0:	ab02      	add	r3, sp, #8
 80068a2:	9300      	str	r3, [sp, #0]
 80068a4:	ec47 6b10 	vmov	d0, r6, r7
 80068a8:	4653      	mov	r3, sl
 80068aa:	4622      	mov	r2, r4
 80068ac:	f000 fe5c 	bl	8007568 <_dtoa_r>
 80068b0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80068b4:	4605      	mov	r5, r0
 80068b6:	d119      	bne.n	80068ec <__cvt+0x94>
 80068b8:	f019 0f01 	tst.w	r9, #1
 80068bc:	d00e      	beq.n	80068dc <__cvt+0x84>
 80068be:	eb00 0904 	add.w	r9, r0, r4
 80068c2:	2200      	movs	r2, #0
 80068c4:	2300      	movs	r3, #0
 80068c6:	4630      	mov	r0, r6
 80068c8:	4639      	mov	r1, r7
 80068ca:	f7fa f92d 	bl	8000b28 <__aeabi_dcmpeq>
 80068ce:	b108      	cbz	r0, 80068d4 <__cvt+0x7c>
 80068d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80068d4:	2230      	movs	r2, #48	@ 0x30
 80068d6:	9b03      	ldr	r3, [sp, #12]
 80068d8:	454b      	cmp	r3, r9
 80068da:	d31e      	bcc.n	800691a <__cvt+0xc2>
 80068dc:	9b03      	ldr	r3, [sp, #12]
 80068de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80068e0:	1b5b      	subs	r3, r3, r5
 80068e2:	4628      	mov	r0, r5
 80068e4:	6013      	str	r3, [r2, #0]
 80068e6:	b004      	add	sp, #16
 80068e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068ec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80068f0:	eb00 0904 	add.w	r9, r0, r4
 80068f4:	d1e5      	bne.n	80068c2 <__cvt+0x6a>
 80068f6:	7803      	ldrb	r3, [r0, #0]
 80068f8:	2b30      	cmp	r3, #48	@ 0x30
 80068fa:	d10a      	bne.n	8006912 <__cvt+0xba>
 80068fc:	2200      	movs	r2, #0
 80068fe:	2300      	movs	r3, #0
 8006900:	4630      	mov	r0, r6
 8006902:	4639      	mov	r1, r7
 8006904:	f7fa f910 	bl	8000b28 <__aeabi_dcmpeq>
 8006908:	b918      	cbnz	r0, 8006912 <__cvt+0xba>
 800690a:	f1c4 0401 	rsb	r4, r4, #1
 800690e:	f8ca 4000 	str.w	r4, [sl]
 8006912:	f8da 3000 	ldr.w	r3, [sl]
 8006916:	4499      	add	r9, r3
 8006918:	e7d3      	b.n	80068c2 <__cvt+0x6a>
 800691a:	1c59      	adds	r1, r3, #1
 800691c:	9103      	str	r1, [sp, #12]
 800691e:	701a      	strb	r2, [r3, #0]
 8006920:	e7d9      	b.n	80068d6 <__cvt+0x7e>

08006922 <__exponent>:
 8006922:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006924:	2900      	cmp	r1, #0
 8006926:	bfba      	itte	lt
 8006928:	4249      	neglt	r1, r1
 800692a:	232d      	movlt	r3, #45	@ 0x2d
 800692c:	232b      	movge	r3, #43	@ 0x2b
 800692e:	2909      	cmp	r1, #9
 8006930:	7002      	strb	r2, [r0, #0]
 8006932:	7043      	strb	r3, [r0, #1]
 8006934:	dd29      	ble.n	800698a <__exponent+0x68>
 8006936:	f10d 0307 	add.w	r3, sp, #7
 800693a:	461d      	mov	r5, r3
 800693c:	270a      	movs	r7, #10
 800693e:	461a      	mov	r2, r3
 8006940:	fbb1 f6f7 	udiv	r6, r1, r7
 8006944:	fb07 1416 	mls	r4, r7, r6, r1
 8006948:	3430      	adds	r4, #48	@ 0x30
 800694a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800694e:	460c      	mov	r4, r1
 8006950:	2c63      	cmp	r4, #99	@ 0x63
 8006952:	f103 33ff 	add.w	r3, r3, #4294967295
 8006956:	4631      	mov	r1, r6
 8006958:	dcf1      	bgt.n	800693e <__exponent+0x1c>
 800695a:	3130      	adds	r1, #48	@ 0x30
 800695c:	1e94      	subs	r4, r2, #2
 800695e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006962:	1c41      	adds	r1, r0, #1
 8006964:	4623      	mov	r3, r4
 8006966:	42ab      	cmp	r3, r5
 8006968:	d30a      	bcc.n	8006980 <__exponent+0x5e>
 800696a:	f10d 0309 	add.w	r3, sp, #9
 800696e:	1a9b      	subs	r3, r3, r2
 8006970:	42ac      	cmp	r4, r5
 8006972:	bf88      	it	hi
 8006974:	2300      	movhi	r3, #0
 8006976:	3302      	adds	r3, #2
 8006978:	4403      	add	r3, r0
 800697a:	1a18      	subs	r0, r3, r0
 800697c:	b003      	add	sp, #12
 800697e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006980:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006984:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006988:	e7ed      	b.n	8006966 <__exponent+0x44>
 800698a:	2330      	movs	r3, #48	@ 0x30
 800698c:	3130      	adds	r1, #48	@ 0x30
 800698e:	7083      	strb	r3, [r0, #2]
 8006990:	70c1      	strb	r1, [r0, #3]
 8006992:	1d03      	adds	r3, r0, #4
 8006994:	e7f1      	b.n	800697a <__exponent+0x58>
	...

08006998 <_printf_float>:
 8006998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800699c:	b08d      	sub	sp, #52	@ 0x34
 800699e:	460c      	mov	r4, r1
 80069a0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80069a4:	4616      	mov	r6, r2
 80069a6:	461f      	mov	r7, r3
 80069a8:	4605      	mov	r5, r0
 80069aa:	f000 fcdb 	bl	8007364 <_localeconv_r>
 80069ae:	6803      	ldr	r3, [r0, #0]
 80069b0:	9304      	str	r3, [sp, #16]
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7f9 fc8c 	bl	80002d0 <strlen>
 80069b8:	2300      	movs	r3, #0
 80069ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80069bc:	f8d8 3000 	ldr.w	r3, [r8]
 80069c0:	9005      	str	r0, [sp, #20]
 80069c2:	3307      	adds	r3, #7
 80069c4:	f023 0307 	bic.w	r3, r3, #7
 80069c8:	f103 0208 	add.w	r2, r3, #8
 80069cc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80069d0:	f8d4 b000 	ldr.w	fp, [r4]
 80069d4:	f8c8 2000 	str.w	r2, [r8]
 80069d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80069dc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80069e0:	9307      	str	r3, [sp, #28]
 80069e2:	f8cd 8018 	str.w	r8, [sp, #24]
 80069e6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80069ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069ee:	4b9c      	ldr	r3, [pc, #624]	@ (8006c60 <_printf_float+0x2c8>)
 80069f0:	f04f 32ff 	mov.w	r2, #4294967295
 80069f4:	f7fa f8ca 	bl	8000b8c <__aeabi_dcmpun>
 80069f8:	bb70      	cbnz	r0, 8006a58 <_printf_float+0xc0>
 80069fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069fe:	4b98      	ldr	r3, [pc, #608]	@ (8006c60 <_printf_float+0x2c8>)
 8006a00:	f04f 32ff 	mov.w	r2, #4294967295
 8006a04:	f7fa f8a4 	bl	8000b50 <__aeabi_dcmple>
 8006a08:	bb30      	cbnz	r0, 8006a58 <_printf_float+0xc0>
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	4640      	mov	r0, r8
 8006a10:	4649      	mov	r1, r9
 8006a12:	f7fa f893 	bl	8000b3c <__aeabi_dcmplt>
 8006a16:	b110      	cbz	r0, 8006a1e <_printf_float+0x86>
 8006a18:	232d      	movs	r3, #45	@ 0x2d
 8006a1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a1e:	4a91      	ldr	r2, [pc, #580]	@ (8006c64 <_printf_float+0x2cc>)
 8006a20:	4b91      	ldr	r3, [pc, #580]	@ (8006c68 <_printf_float+0x2d0>)
 8006a22:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006a26:	bf94      	ite	ls
 8006a28:	4690      	movls	r8, r2
 8006a2a:	4698      	movhi	r8, r3
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	6123      	str	r3, [r4, #16]
 8006a30:	f02b 0304 	bic.w	r3, fp, #4
 8006a34:	6023      	str	r3, [r4, #0]
 8006a36:	f04f 0900 	mov.w	r9, #0
 8006a3a:	9700      	str	r7, [sp, #0]
 8006a3c:	4633      	mov	r3, r6
 8006a3e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006a40:	4621      	mov	r1, r4
 8006a42:	4628      	mov	r0, r5
 8006a44:	f000 f9d2 	bl	8006dec <_printf_common>
 8006a48:	3001      	adds	r0, #1
 8006a4a:	f040 808d 	bne.w	8006b68 <_printf_float+0x1d0>
 8006a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a52:	b00d      	add	sp, #52	@ 0x34
 8006a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a58:	4642      	mov	r2, r8
 8006a5a:	464b      	mov	r3, r9
 8006a5c:	4640      	mov	r0, r8
 8006a5e:	4649      	mov	r1, r9
 8006a60:	f7fa f894 	bl	8000b8c <__aeabi_dcmpun>
 8006a64:	b140      	cbz	r0, 8006a78 <_printf_float+0xe0>
 8006a66:	464b      	mov	r3, r9
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	bfbc      	itt	lt
 8006a6c:	232d      	movlt	r3, #45	@ 0x2d
 8006a6e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006a72:	4a7e      	ldr	r2, [pc, #504]	@ (8006c6c <_printf_float+0x2d4>)
 8006a74:	4b7e      	ldr	r3, [pc, #504]	@ (8006c70 <_printf_float+0x2d8>)
 8006a76:	e7d4      	b.n	8006a22 <_printf_float+0x8a>
 8006a78:	6863      	ldr	r3, [r4, #4]
 8006a7a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006a7e:	9206      	str	r2, [sp, #24]
 8006a80:	1c5a      	adds	r2, r3, #1
 8006a82:	d13b      	bne.n	8006afc <_printf_float+0x164>
 8006a84:	2306      	movs	r3, #6
 8006a86:	6063      	str	r3, [r4, #4]
 8006a88:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	6022      	str	r2, [r4, #0]
 8006a90:	9303      	str	r3, [sp, #12]
 8006a92:	ab0a      	add	r3, sp, #40	@ 0x28
 8006a94:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006a98:	ab09      	add	r3, sp, #36	@ 0x24
 8006a9a:	9300      	str	r3, [sp, #0]
 8006a9c:	6861      	ldr	r1, [r4, #4]
 8006a9e:	ec49 8b10 	vmov	d0, r8, r9
 8006aa2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006aa6:	4628      	mov	r0, r5
 8006aa8:	f7ff fed6 	bl	8006858 <__cvt>
 8006aac:	9b06      	ldr	r3, [sp, #24]
 8006aae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006ab0:	2b47      	cmp	r3, #71	@ 0x47
 8006ab2:	4680      	mov	r8, r0
 8006ab4:	d129      	bne.n	8006b0a <_printf_float+0x172>
 8006ab6:	1cc8      	adds	r0, r1, #3
 8006ab8:	db02      	blt.n	8006ac0 <_printf_float+0x128>
 8006aba:	6863      	ldr	r3, [r4, #4]
 8006abc:	4299      	cmp	r1, r3
 8006abe:	dd41      	ble.n	8006b44 <_printf_float+0x1ac>
 8006ac0:	f1aa 0a02 	sub.w	sl, sl, #2
 8006ac4:	fa5f fa8a 	uxtb.w	sl, sl
 8006ac8:	3901      	subs	r1, #1
 8006aca:	4652      	mov	r2, sl
 8006acc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006ad0:	9109      	str	r1, [sp, #36]	@ 0x24
 8006ad2:	f7ff ff26 	bl	8006922 <__exponent>
 8006ad6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006ad8:	1813      	adds	r3, r2, r0
 8006ada:	2a01      	cmp	r2, #1
 8006adc:	4681      	mov	r9, r0
 8006ade:	6123      	str	r3, [r4, #16]
 8006ae0:	dc02      	bgt.n	8006ae8 <_printf_float+0x150>
 8006ae2:	6822      	ldr	r2, [r4, #0]
 8006ae4:	07d2      	lsls	r2, r2, #31
 8006ae6:	d501      	bpl.n	8006aec <_printf_float+0x154>
 8006ae8:	3301      	adds	r3, #1
 8006aea:	6123      	str	r3, [r4, #16]
 8006aec:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d0a2      	beq.n	8006a3a <_printf_float+0xa2>
 8006af4:	232d      	movs	r3, #45	@ 0x2d
 8006af6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006afa:	e79e      	b.n	8006a3a <_printf_float+0xa2>
 8006afc:	9a06      	ldr	r2, [sp, #24]
 8006afe:	2a47      	cmp	r2, #71	@ 0x47
 8006b00:	d1c2      	bne.n	8006a88 <_printf_float+0xf0>
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d1c0      	bne.n	8006a88 <_printf_float+0xf0>
 8006b06:	2301      	movs	r3, #1
 8006b08:	e7bd      	b.n	8006a86 <_printf_float+0xee>
 8006b0a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006b0e:	d9db      	bls.n	8006ac8 <_printf_float+0x130>
 8006b10:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006b14:	d118      	bne.n	8006b48 <_printf_float+0x1b0>
 8006b16:	2900      	cmp	r1, #0
 8006b18:	6863      	ldr	r3, [r4, #4]
 8006b1a:	dd0b      	ble.n	8006b34 <_printf_float+0x19c>
 8006b1c:	6121      	str	r1, [r4, #16]
 8006b1e:	b913      	cbnz	r3, 8006b26 <_printf_float+0x18e>
 8006b20:	6822      	ldr	r2, [r4, #0]
 8006b22:	07d0      	lsls	r0, r2, #31
 8006b24:	d502      	bpl.n	8006b2c <_printf_float+0x194>
 8006b26:	3301      	adds	r3, #1
 8006b28:	440b      	add	r3, r1
 8006b2a:	6123      	str	r3, [r4, #16]
 8006b2c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006b2e:	f04f 0900 	mov.w	r9, #0
 8006b32:	e7db      	b.n	8006aec <_printf_float+0x154>
 8006b34:	b913      	cbnz	r3, 8006b3c <_printf_float+0x1a4>
 8006b36:	6822      	ldr	r2, [r4, #0]
 8006b38:	07d2      	lsls	r2, r2, #31
 8006b3a:	d501      	bpl.n	8006b40 <_printf_float+0x1a8>
 8006b3c:	3302      	adds	r3, #2
 8006b3e:	e7f4      	b.n	8006b2a <_printf_float+0x192>
 8006b40:	2301      	movs	r3, #1
 8006b42:	e7f2      	b.n	8006b2a <_printf_float+0x192>
 8006b44:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006b48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b4a:	4299      	cmp	r1, r3
 8006b4c:	db05      	blt.n	8006b5a <_printf_float+0x1c2>
 8006b4e:	6823      	ldr	r3, [r4, #0]
 8006b50:	6121      	str	r1, [r4, #16]
 8006b52:	07d8      	lsls	r0, r3, #31
 8006b54:	d5ea      	bpl.n	8006b2c <_printf_float+0x194>
 8006b56:	1c4b      	adds	r3, r1, #1
 8006b58:	e7e7      	b.n	8006b2a <_printf_float+0x192>
 8006b5a:	2900      	cmp	r1, #0
 8006b5c:	bfd4      	ite	le
 8006b5e:	f1c1 0202 	rsble	r2, r1, #2
 8006b62:	2201      	movgt	r2, #1
 8006b64:	4413      	add	r3, r2
 8006b66:	e7e0      	b.n	8006b2a <_printf_float+0x192>
 8006b68:	6823      	ldr	r3, [r4, #0]
 8006b6a:	055a      	lsls	r2, r3, #21
 8006b6c:	d407      	bmi.n	8006b7e <_printf_float+0x1e6>
 8006b6e:	6923      	ldr	r3, [r4, #16]
 8006b70:	4642      	mov	r2, r8
 8006b72:	4631      	mov	r1, r6
 8006b74:	4628      	mov	r0, r5
 8006b76:	47b8      	blx	r7
 8006b78:	3001      	adds	r0, #1
 8006b7a:	d12b      	bne.n	8006bd4 <_printf_float+0x23c>
 8006b7c:	e767      	b.n	8006a4e <_printf_float+0xb6>
 8006b7e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006b82:	f240 80dd 	bls.w	8006d40 <_printf_float+0x3a8>
 8006b86:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	f7f9 ffcb 	bl	8000b28 <__aeabi_dcmpeq>
 8006b92:	2800      	cmp	r0, #0
 8006b94:	d033      	beq.n	8006bfe <_printf_float+0x266>
 8006b96:	4a37      	ldr	r2, [pc, #220]	@ (8006c74 <_printf_float+0x2dc>)
 8006b98:	2301      	movs	r3, #1
 8006b9a:	4631      	mov	r1, r6
 8006b9c:	4628      	mov	r0, r5
 8006b9e:	47b8      	blx	r7
 8006ba0:	3001      	adds	r0, #1
 8006ba2:	f43f af54 	beq.w	8006a4e <_printf_float+0xb6>
 8006ba6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006baa:	4543      	cmp	r3, r8
 8006bac:	db02      	blt.n	8006bb4 <_printf_float+0x21c>
 8006bae:	6823      	ldr	r3, [r4, #0]
 8006bb0:	07d8      	lsls	r0, r3, #31
 8006bb2:	d50f      	bpl.n	8006bd4 <_printf_float+0x23c>
 8006bb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006bb8:	4631      	mov	r1, r6
 8006bba:	4628      	mov	r0, r5
 8006bbc:	47b8      	blx	r7
 8006bbe:	3001      	adds	r0, #1
 8006bc0:	f43f af45 	beq.w	8006a4e <_printf_float+0xb6>
 8006bc4:	f04f 0900 	mov.w	r9, #0
 8006bc8:	f108 38ff 	add.w	r8, r8, #4294967295
 8006bcc:	f104 0a1a 	add.w	sl, r4, #26
 8006bd0:	45c8      	cmp	r8, r9
 8006bd2:	dc09      	bgt.n	8006be8 <_printf_float+0x250>
 8006bd4:	6823      	ldr	r3, [r4, #0]
 8006bd6:	079b      	lsls	r3, r3, #30
 8006bd8:	f100 8103 	bmi.w	8006de2 <_printf_float+0x44a>
 8006bdc:	68e0      	ldr	r0, [r4, #12]
 8006bde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006be0:	4298      	cmp	r0, r3
 8006be2:	bfb8      	it	lt
 8006be4:	4618      	movlt	r0, r3
 8006be6:	e734      	b.n	8006a52 <_printf_float+0xba>
 8006be8:	2301      	movs	r3, #1
 8006bea:	4652      	mov	r2, sl
 8006bec:	4631      	mov	r1, r6
 8006bee:	4628      	mov	r0, r5
 8006bf0:	47b8      	blx	r7
 8006bf2:	3001      	adds	r0, #1
 8006bf4:	f43f af2b 	beq.w	8006a4e <_printf_float+0xb6>
 8006bf8:	f109 0901 	add.w	r9, r9, #1
 8006bfc:	e7e8      	b.n	8006bd0 <_printf_float+0x238>
 8006bfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	dc39      	bgt.n	8006c78 <_printf_float+0x2e0>
 8006c04:	4a1b      	ldr	r2, [pc, #108]	@ (8006c74 <_printf_float+0x2dc>)
 8006c06:	2301      	movs	r3, #1
 8006c08:	4631      	mov	r1, r6
 8006c0a:	4628      	mov	r0, r5
 8006c0c:	47b8      	blx	r7
 8006c0e:	3001      	adds	r0, #1
 8006c10:	f43f af1d 	beq.w	8006a4e <_printf_float+0xb6>
 8006c14:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006c18:	ea59 0303 	orrs.w	r3, r9, r3
 8006c1c:	d102      	bne.n	8006c24 <_printf_float+0x28c>
 8006c1e:	6823      	ldr	r3, [r4, #0]
 8006c20:	07d9      	lsls	r1, r3, #31
 8006c22:	d5d7      	bpl.n	8006bd4 <_printf_float+0x23c>
 8006c24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c28:	4631      	mov	r1, r6
 8006c2a:	4628      	mov	r0, r5
 8006c2c:	47b8      	blx	r7
 8006c2e:	3001      	adds	r0, #1
 8006c30:	f43f af0d 	beq.w	8006a4e <_printf_float+0xb6>
 8006c34:	f04f 0a00 	mov.w	sl, #0
 8006c38:	f104 0b1a 	add.w	fp, r4, #26
 8006c3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c3e:	425b      	negs	r3, r3
 8006c40:	4553      	cmp	r3, sl
 8006c42:	dc01      	bgt.n	8006c48 <_printf_float+0x2b0>
 8006c44:	464b      	mov	r3, r9
 8006c46:	e793      	b.n	8006b70 <_printf_float+0x1d8>
 8006c48:	2301      	movs	r3, #1
 8006c4a:	465a      	mov	r2, fp
 8006c4c:	4631      	mov	r1, r6
 8006c4e:	4628      	mov	r0, r5
 8006c50:	47b8      	blx	r7
 8006c52:	3001      	adds	r0, #1
 8006c54:	f43f aefb 	beq.w	8006a4e <_printf_float+0xb6>
 8006c58:	f10a 0a01 	add.w	sl, sl, #1
 8006c5c:	e7ee      	b.n	8006c3c <_printf_float+0x2a4>
 8006c5e:	bf00      	nop
 8006c60:	7fefffff 	.word	0x7fefffff
 8006c64:	0800957c 	.word	0x0800957c
 8006c68:	08009580 	.word	0x08009580
 8006c6c:	08009584 	.word	0x08009584
 8006c70:	08009588 	.word	0x08009588
 8006c74:	0800958c 	.word	0x0800958c
 8006c78:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006c7a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006c7e:	4553      	cmp	r3, sl
 8006c80:	bfa8      	it	ge
 8006c82:	4653      	movge	r3, sl
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	4699      	mov	r9, r3
 8006c88:	dc36      	bgt.n	8006cf8 <_printf_float+0x360>
 8006c8a:	f04f 0b00 	mov.w	fp, #0
 8006c8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c92:	f104 021a 	add.w	r2, r4, #26
 8006c96:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006c98:	9306      	str	r3, [sp, #24]
 8006c9a:	eba3 0309 	sub.w	r3, r3, r9
 8006c9e:	455b      	cmp	r3, fp
 8006ca0:	dc31      	bgt.n	8006d06 <_printf_float+0x36e>
 8006ca2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ca4:	459a      	cmp	sl, r3
 8006ca6:	dc3a      	bgt.n	8006d1e <_printf_float+0x386>
 8006ca8:	6823      	ldr	r3, [r4, #0]
 8006caa:	07da      	lsls	r2, r3, #31
 8006cac:	d437      	bmi.n	8006d1e <_printf_float+0x386>
 8006cae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cb0:	ebaa 0903 	sub.w	r9, sl, r3
 8006cb4:	9b06      	ldr	r3, [sp, #24]
 8006cb6:	ebaa 0303 	sub.w	r3, sl, r3
 8006cba:	4599      	cmp	r9, r3
 8006cbc:	bfa8      	it	ge
 8006cbe:	4699      	movge	r9, r3
 8006cc0:	f1b9 0f00 	cmp.w	r9, #0
 8006cc4:	dc33      	bgt.n	8006d2e <_printf_float+0x396>
 8006cc6:	f04f 0800 	mov.w	r8, #0
 8006cca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006cce:	f104 0b1a 	add.w	fp, r4, #26
 8006cd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cd4:	ebaa 0303 	sub.w	r3, sl, r3
 8006cd8:	eba3 0309 	sub.w	r3, r3, r9
 8006cdc:	4543      	cmp	r3, r8
 8006cde:	f77f af79 	ble.w	8006bd4 <_printf_float+0x23c>
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	465a      	mov	r2, fp
 8006ce6:	4631      	mov	r1, r6
 8006ce8:	4628      	mov	r0, r5
 8006cea:	47b8      	blx	r7
 8006cec:	3001      	adds	r0, #1
 8006cee:	f43f aeae 	beq.w	8006a4e <_printf_float+0xb6>
 8006cf2:	f108 0801 	add.w	r8, r8, #1
 8006cf6:	e7ec      	b.n	8006cd2 <_printf_float+0x33a>
 8006cf8:	4642      	mov	r2, r8
 8006cfa:	4631      	mov	r1, r6
 8006cfc:	4628      	mov	r0, r5
 8006cfe:	47b8      	blx	r7
 8006d00:	3001      	adds	r0, #1
 8006d02:	d1c2      	bne.n	8006c8a <_printf_float+0x2f2>
 8006d04:	e6a3      	b.n	8006a4e <_printf_float+0xb6>
 8006d06:	2301      	movs	r3, #1
 8006d08:	4631      	mov	r1, r6
 8006d0a:	4628      	mov	r0, r5
 8006d0c:	9206      	str	r2, [sp, #24]
 8006d0e:	47b8      	blx	r7
 8006d10:	3001      	adds	r0, #1
 8006d12:	f43f ae9c 	beq.w	8006a4e <_printf_float+0xb6>
 8006d16:	9a06      	ldr	r2, [sp, #24]
 8006d18:	f10b 0b01 	add.w	fp, fp, #1
 8006d1c:	e7bb      	b.n	8006c96 <_printf_float+0x2fe>
 8006d1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d22:	4631      	mov	r1, r6
 8006d24:	4628      	mov	r0, r5
 8006d26:	47b8      	blx	r7
 8006d28:	3001      	adds	r0, #1
 8006d2a:	d1c0      	bne.n	8006cae <_printf_float+0x316>
 8006d2c:	e68f      	b.n	8006a4e <_printf_float+0xb6>
 8006d2e:	9a06      	ldr	r2, [sp, #24]
 8006d30:	464b      	mov	r3, r9
 8006d32:	4442      	add	r2, r8
 8006d34:	4631      	mov	r1, r6
 8006d36:	4628      	mov	r0, r5
 8006d38:	47b8      	blx	r7
 8006d3a:	3001      	adds	r0, #1
 8006d3c:	d1c3      	bne.n	8006cc6 <_printf_float+0x32e>
 8006d3e:	e686      	b.n	8006a4e <_printf_float+0xb6>
 8006d40:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006d44:	f1ba 0f01 	cmp.w	sl, #1
 8006d48:	dc01      	bgt.n	8006d4e <_printf_float+0x3b6>
 8006d4a:	07db      	lsls	r3, r3, #31
 8006d4c:	d536      	bpl.n	8006dbc <_printf_float+0x424>
 8006d4e:	2301      	movs	r3, #1
 8006d50:	4642      	mov	r2, r8
 8006d52:	4631      	mov	r1, r6
 8006d54:	4628      	mov	r0, r5
 8006d56:	47b8      	blx	r7
 8006d58:	3001      	adds	r0, #1
 8006d5a:	f43f ae78 	beq.w	8006a4e <_printf_float+0xb6>
 8006d5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d62:	4631      	mov	r1, r6
 8006d64:	4628      	mov	r0, r5
 8006d66:	47b8      	blx	r7
 8006d68:	3001      	adds	r0, #1
 8006d6a:	f43f ae70 	beq.w	8006a4e <_printf_float+0xb6>
 8006d6e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006d72:	2200      	movs	r2, #0
 8006d74:	2300      	movs	r3, #0
 8006d76:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d7a:	f7f9 fed5 	bl	8000b28 <__aeabi_dcmpeq>
 8006d7e:	b9c0      	cbnz	r0, 8006db2 <_printf_float+0x41a>
 8006d80:	4653      	mov	r3, sl
 8006d82:	f108 0201 	add.w	r2, r8, #1
 8006d86:	4631      	mov	r1, r6
 8006d88:	4628      	mov	r0, r5
 8006d8a:	47b8      	blx	r7
 8006d8c:	3001      	adds	r0, #1
 8006d8e:	d10c      	bne.n	8006daa <_printf_float+0x412>
 8006d90:	e65d      	b.n	8006a4e <_printf_float+0xb6>
 8006d92:	2301      	movs	r3, #1
 8006d94:	465a      	mov	r2, fp
 8006d96:	4631      	mov	r1, r6
 8006d98:	4628      	mov	r0, r5
 8006d9a:	47b8      	blx	r7
 8006d9c:	3001      	adds	r0, #1
 8006d9e:	f43f ae56 	beq.w	8006a4e <_printf_float+0xb6>
 8006da2:	f108 0801 	add.w	r8, r8, #1
 8006da6:	45d0      	cmp	r8, sl
 8006da8:	dbf3      	blt.n	8006d92 <_printf_float+0x3fa>
 8006daa:	464b      	mov	r3, r9
 8006dac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006db0:	e6df      	b.n	8006b72 <_printf_float+0x1da>
 8006db2:	f04f 0800 	mov.w	r8, #0
 8006db6:	f104 0b1a 	add.w	fp, r4, #26
 8006dba:	e7f4      	b.n	8006da6 <_printf_float+0x40e>
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	4642      	mov	r2, r8
 8006dc0:	e7e1      	b.n	8006d86 <_printf_float+0x3ee>
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	464a      	mov	r2, r9
 8006dc6:	4631      	mov	r1, r6
 8006dc8:	4628      	mov	r0, r5
 8006dca:	47b8      	blx	r7
 8006dcc:	3001      	adds	r0, #1
 8006dce:	f43f ae3e 	beq.w	8006a4e <_printf_float+0xb6>
 8006dd2:	f108 0801 	add.w	r8, r8, #1
 8006dd6:	68e3      	ldr	r3, [r4, #12]
 8006dd8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006dda:	1a5b      	subs	r3, r3, r1
 8006ddc:	4543      	cmp	r3, r8
 8006dde:	dcf0      	bgt.n	8006dc2 <_printf_float+0x42a>
 8006de0:	e6fc      	b.n	8006bdc <_printf_float+0x244>
 8006de2:	f04f 0800 	mov.w	r8, #0
 8006de6:	f104 0919 	add.w	r9, r4, #25
 8006dea:	e7f4      	b.n	8006dd6 <_printf_float+0x43e>

08006dec <_printf_common>:
 8006dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006df0:	4616      	mov	r6, r2
 8006df2:	4698      	mov	r8, r3
 8006df4:	688a      	ldr	r2, [r1, #8]
 8006df6:	690b      	ldr	r3, [r1, #16]
 8006df8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	bfb8      	it	lt
 8006e00:	4613      	movlt	r3, r2
 8006e02:	6033      	str	r3, [r6, #0]
 8006e04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006e08:	4607      	mov	r7, r0
 8006e0a:	460c      	mov	r4, r1
 8006e0c:	b10a      	cbz	r2, 8006e12 <_printf_common+0x26>
 8006e0e:	3301      	adds	r3, #1
 8006e10:	6033      	str	r3, [r6, #0]
 8006e12:	6823      	ldr	r3, [r4, #0]
 8006e14:	0699      	lsls	r1, r3, #26
 8006e16:	bf42      	ittt	mi
 8006e18:	6833      	ldrmi	r3, [r6, #0]
 8006e1a:	3302      	addmi	r3, #2
 8006e1c:	6033      	strmi	r3, [r6, #0]
 8006e1e:	6825      	ldr	r5, [r4, #0]
 8006e20:	f015 0506 	ands.w	r5, r5, #6
 8006e24:	d106      	bne.n	8006e34 <_printf_common+0x48>
 8006e26:	f104 0a19 	add.w	sl, r4, #25
 8006e2a:	68e3      	ldr	r3, [r4, #12]
 8006e2c:	6832      	ldr	r2, [r6, #0]
 8006e2e:	1a9b      	subs	r3, r3, r2
 8006e30:	42ab      	cmp	r3, r5
 8006e32:	dc26      	bgt.n	8006e82 <_printf_common+0x96>
 8006e34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006e38:	6822      	ldr	r2, [r4, #0]
 8006e3a:	3b00      	subs	r3, #0
 8006e3c:	bf18      	it	ne
 8006e3e:	2301      	movne	r3, #1
 8006e40:	0692      	lsls	r2, r2, #26
 8006e42:	d42b      	bmi.n	8006e9c <_printf_common+0xb0>
 8006e44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006e48:	4641      	mov	r1, r8
 8006e4a:	4638      	mov	r0, r7
 8006e4c:	47c8      	blx	r9
 8006e4e:	3001      	adds	r0, #1
 8006e50:	d01e      	beq.n	8006e90 <_printf_common+0xa4>
 8006e52:	6823      	ldr	r3, [r4, #0]
 8006e54:	6922      	ldr	r2, [r4, #16]
 8006e56:	f003 0306 	and.w	r3, r3, #6
 8006e5a:	2b04      	cmp	r3, #4
 8006e5c:	bf02      	ittt	eq
 8006e5e:	68e5      	ldreq	r5, [r4, #12]
 8006e60:	6833      	ldreq	r3, [r6, #0]
 8006e62:	1aed      	subeq	r5, r5, r3
 8006e64:	68a3      	ldr	r3, [r4, #8]
 8006e66:	bf0c      	ite	eq
 8006e68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e6c:	2500      	movne	r5, #0
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	bfc4      	itt	gt
 8006e72:	1a9b      	subgt	r3, r3, r2
 8006e74:	18ed      	addgt	r5, r5, r3
 8006e76:	2600      	movs	r6, #0
 8006e78:	341a      	adds	r4, #26
 8006e7a:	42b5      	cmp	r5, r6
 8006e7c:	d11a      	bne.n	8006eb4 <_printf_common+0xc8>
 8006e7e:	2000      	movs	r0, #0
 8006e80:	e008      	b.n	8006e94 <_printf_common+0xa8>
 8006e82:	2301      	movs	r3, #1
 8006e84:	4652      	mov	r2, sl
 8006e86:	4641      	mov	r1, r8
 8006e88:	4638      	mov	r0, r7
 8006e8a:	47c8      	blx	r9
 8006e8c:	3001      	adds	r0, #1
 8006e8e:	d103      	bne.n	8006e98 <_printf_common+0xac>
 8006e90:	f04f 30ff 	mov.w	r0, #4294967295
 8006e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e98:	3501      	adds	r5, #1
 8006e9a:	e7c6      	b.n	8006e2a <_printf_common+0x3e>
 8006e9c:	18e1      	adds	r1, r4, r3
 8006e9e:	1c5a      	adds	r2, r3, #1
 8006ea0:	2030      	movs	r0, #48	@ 0x30
 8006ea2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006ea6:	4422      	add	r2, r4
 8006ea8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006eac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006eb0:	3302      	adds	r3, #2
 8006eb2:	e7c7      	b.n	8006e44 <_printf_common+0x58>
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	4622      	mov	r2, r4
 8006eb8:	4641      	mov	r1, r8
 8006eba:	4638      	mov	r0, r7
 8006ebc:	47c8      	blx	r9
 8006ebe:	3001      	adds	r0, #1
 8006ec0:	d0e6      	beq.n	8006e90 <_printf_common+0xa4>
 8006ec2:	3601      	adds	r6, #1
 8006ec4:	e7d9      	b.n	8006e7a <_printf_common+0x8e>
	...

08006ec8 <_printf_i>:
 8006ec8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ecc:	7e0f      	ldrb	r7, [r1, #24]
 8006ece:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006ed0:	2f78      	cmp	r7, #120	@ 0x78
 8006ed2:	4691      	mov	r9, r2
 8006ed4:	4680      	mov	r8, r0
 8006ed6:	460c      	mov	r4, r1
 8006ed8:	469a      	mov	sl, r3
 8006eda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006ede:	d807      	bhi.n	8006ef0 <_printf_i+0x28>
 8006ee0:	2f62      	cmp	r7, #98	@ 0x62
 8006ee2:	d80a      	bhi.n	8006efa <_printf_i+0x32>
 8006ee4:	2f00      	cmp	r7, #0
 8006ee6:	f000 80d2 	beq.w	800708e <_printf_i+0x1c6>
 8006eea:	2f58      	cmp	r7, #88	@ 0x58
 8006eec:	f000 80b9 	beq.w	8007062 <_printf_i+0x19a>
 8006ef0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ef4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006ef8:	e03a      	b.n	8006f70 <_printf_i+0xa8>
 8006efa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006efe:	2b15      	cmp	r3, #21
 8006f00:	d8f6      	bhi.n	8006ef0 <_printf_i+0x28>
 8006f02:	a101      	add	r1, pc, #4	@ (adr r1, 8006f08 <_printf_i+0x40>)
 8006f04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f08:	08006f61 	.word	0x08006f61
 8006f0c:	08006f75 	.word	0x08006f75
 8006f10:	08006ef1 	.word	0x08006ef1
 8006f14:	08006ef1 	.word	0x08006ef1
 8006f18:	08006ef1 	.word	0x08006ef1
 8006f1c:	08006ef1 	.word	0x08006ef1
 8006f20:	08006f75 	.word	0x08006f75
 8006f24:	08006ef1 	.word	0x08006ef1
 8006f28:	08006ef1 	.word	0x08006ef1
 8006f2c:	08006ef1 	.word	0x08006ef1
 8006f30:	08006ef1 	.word	0x08006ef1
 8006f34:	08007075 	.word	0x08007075
 8006f38:	08006f9f 	.word	0x08006f9f
 8006f3c:	0800702f 	.word	0x0800702f
 8006f40:	08006ef1 	.word	0x08006ef1
 8006f44:	08006ef1 	.word	0x08006ef1
 8006f48:	08007097 	.word	0x08007097
 8006f4c:	08006ef1 	.word	0x08006ef1
 8006f50:	08006f9f 	.word	0x08006f9f
 8006f54:	08006ef1 	.word	0x08006ef1
 8006f58:	08006ef1 	.word	0x08006ef1
 8006f5c:	08007037 	.word	0x08007037
 8006f60:	6833      	ldr	r3, [r6, #0]
 8006f62:	1d1a      	adds	r2, r3, #4
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	6032      	str	r2, [r6, #0]
 8006f68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006f70:	2301      	movs	r3, #1
 8006f72:	e09d      	b.n	80070b0 <_printf_i+0x1e8>
 8006f74:	6833      	ldr	r3, [r6, #0]
 8006f76:	6820      	ldr	r0, [r4, #0]
 8006f78:	1d19      	adds	r1, r3, #4
 8006f7a:	6031      	str	r1, [r6, #0]
 8006f7c:	0606      	lsls	r6, r0, #24
 8006f7e:	d501      	bpl.n	8006f84 <_printf_i+0xbc>
 8006f80:	681d      	ldr	r5, [r3, #0]
 8006f82:	e003      	b.n	8006f8c <_printf_i+0xc4>
 8006f84:	0645      	lsls	r5, r0, #25
 8006f86:	d5fb      	bpl.n	8006f80 <_printf_i+0xb8>
 8006f88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006f8c:	2d00      	cmp	r5, #0
 8006f8e:	da03      	bge.n	8006f98 <_printf_i+0xd0>
 8006f90:	232d      	movs	r3, #45	@ 0x2d
 8006f92:	426d      	negs	r5, r5
 8006f94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f98:	4859      	ldr	r0, [pc, #356]	@ (8007100 <_printf_i+0x238>)
 8006f9a:	230a      	movs	r3, #10
 8006f9c:	e011      	b.n	8006fc2 <_printf_i+0xfa>
 8006f9e:	6821      	ldr	r1, [r4, #0]
 8006fa0:	6833      	ldr	r3, [r6, #0]
 8006fa2:	0608      	lsls	r0, r1, #24
 8006fa4:	f853 5b04 	ldr.w	r5, [r3], #4
 8006fa8:	d402      	bmi.n	8006fb0 <_printf_i+0xe8>
 8006faa:	0649      	lsls	r1, r1, #25
 8006fac:	bf48      	it	mi
 8006fae:	b2ad      	uxthmi	r5, r5
 8006fb0:	2f6f      	cmp	r7, #111	@ 0x6f
 8006fb2:	4853      	ldr	r0, [pc, #332]	@ (8007100 <_printf_i+0x238>)
 8006fb4:	6033      	str	r3, [r6, #0]
 8006fb6:	bf14      	ite	ne
 8006fb8:	230a      	movne	r3, #10
 8006fba:	2308      	moveq	r3, #8
 8006fbc:	2100      	movs	r1, #0
 8006fbe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006fc2:	6866      	ldr	r6, [r4, #4]
 8006fc4:	60a6      	str	r6, [r4, #8]
 8006fc6:	2e00      	cmp	r6, #0
 8006fc8:	bfa2      	ittt	ge
 8006fca:	6821      	ldrge	r1, [r4, #0]
 8006fcc:	f021 0104 	bicge.w	r1, r1, #4
 8006fd0:	6021      	strge	r1, [r4, #0]
 8006fd2:	b90d      	cbnz	r5, 8006fd8 <_printf_i+0x110>
 8006fd4:	2e00      	cmp	r6, #0
 8006fd6:	d04b      	beq.n	8007070 <_printf_i+0x1a8>
 8006fd8:	4616      	mov	r6, r2
 8006fda:	fbb5 f1f3 	udiv	r1, r5, r3
 8006fde:	fb03 5711 	mls	r7, r3, r1, r5
 8006fe2:	5dc7      	ldrb	r7, [r0, r7]
 8006fe4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006fe8:	462f      	mov	r7, r5
 8006fea:	42bb      	cmp	r3, r7
 8006fec:	460d      	mov	r5, r1
 8006fee:	d9f4      	bls.n	8006fda <_printf_i+0x112>
 8006ff0:	2b08      	cmp	r3, #8
 8006ff2:	d10b      	bne.n	800700c <_printf_i+0x144>
 8006ff4:	6823      	ldr	r3, [r4, #0]
 8006ff6:	07df      	lsls	r7, r3, #31
 8006ff8:	d508      	bpl.n	800700c <_printf_i+0x144>
 8006ffa:	6923      	ldr	r3, [r4, #16]
 8006ffc:	6861      	ldr	r1, [r4, #4]
 8006ffe:	4299      	cmp	r1, r3
 8007000:	bfde      	ittt	le
 8007002:	2330      	movle	r3, #48	@ 0x30
 8007004:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007008:	f106 36ff 	addle.w	r6, r6, #4294967295
 800700c:	1b92      	subs	r2, r2, r6
 800700e:	6122      	str	r2, [r4, #16]
 8007010:	f8cd a000 	str.w	sl, [sp]
 8007014:	464b      	mov	r3, r9
 8007016:	aa03      	add	r2, sp, #12
 8007018:	4621      	mov	r1, r4
 800701a:	4640      	mov	r0, r8
 800701c:	f7ff fee6 	bl	8006dec <_printf_common>
 8007020:	3001      	adds	r0, #1
 8007022:	d14a      	bne.n	80070ba <_printf_i+0x1f2>
 8007024:	f04f 30ff 	mov.w	r0, #4294967295
 8007028:	b004      	add	sp, #16
 800702a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800702e:	6823      	ldr	r3, [r4, #0]
 8007030:	f043 0320 	orr.w	r3, r3, #32
 8007034:	6023      	str	r3, [r4, #0]
 8007036:	4833      	ldr	r0, [pc, #204]	@ (8007104 <_printf_i+0x23c>)
 8007038:	2778      	movs	r7, #120	@ 0x78
 800703a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800703e:	6823      	ldr	r3, [r4, #0]
 8007040:	6831      	ldr	r1, [r6, #0]
 8007042:	061f      	lsls	r7, r3, #24
 8007044:	f851 5b04 	ldr.w	r5, [r1], #4
 8007048:	d402      	bmi.n	8007050 <_printf_i+0x188>
 800704a:	065f      	lsls	r7, r3, #25
 800704c:	bf48      	it	mi
 800704e:	b2ad      	uxthmi	r5, r5
 8007050:	6031      	str	r1, [r6, #0]
 8007052:	07d9      	lsls	r1, r3, #31
 8007054:	bf44      	itt	mi
 8007056:	f043 0320 	orrmi.w	r3, r3, #32
 800705a:	6023      	strmi	r3, [r4, #0]
 800705c:	b11d      	cbz	r5, 8007066 <_printf_i+0x19e>
 800705e:	2310      	movs	r3, #16
 8007060:	e7ac      	b.n	8006fbc <_printf_i+0xf4>
 8007062:	4827      	ldr	r0, [pc, #156]	@ (8007100 <_printf_i+0x238>)
 8007064:	e7e9      	b.n	800703a <_printf_i+0x172>
 8007066:	6823      	ldr	r3, [r4, #0]
 8007068:	f023 0320 	bic.w	r3, r3, #32
 800706c:	6023      	str	r3, [r4, #0]
 800706e:	e7f6      	b.n	800705e <_printf_i+0x196>
 8007070:	4616      	mov	r6, r2
 8007072:	e7bd      	b.n	8006ff0 <_printf_i+0x128>
 8007074:	6833      	ldr	r3, [r6, #0]
 8007076:	6825      	ldr	r5, [r4, #0]
 8007078:	6961      	ldr	r1, [r4, #20]
 800707a:	1d18      	adds	r0, r3, #4
 800707c:	6030      	str	r0, [r6, #0]
 800707e:	062e      	lsls	r6, r5, #24
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	d501      	bpl.n	8007088 <_printf_i+0x1c0>
 8007084:	6019      	str	r1, [r3, #0]
 8007086:	e002      	b.n	800708e <_printf_i+0x1c6>
 8007088:	0668      	lsls	r0, r5, #25
 800708a:	d5fb      	bpl.n	8007084 <_printf_i+0x1bc>
 800708c:	8019      	strh	r1, [r3, #0]
 800708e:	2300      	movs	r3, #0
 8007090:	6123      	str	r3, [r4, #16]
 8007092:	4616      	mov	r6, r2
 8007094:	e7bc      	b.n	8007010 <_printf_i+0x148>
 8007096:	6833      	ldr	r3, [r6, #0]
 8007098:	1d1a      	adds	r2, r3, #4
 800709a:	6032      	str	r2, [r6, #0]
 800709c:	681e      	ldr	r6, [r3, #0]
 800709e:	6862      	ldr	r2, [r4, #4]
 80070a0:	2100      	movs	r1, #0
 80070a2:	4630      	mov	r0, r6
 80070a4:	f7f9 f8c4 	bl	8000230 <memchr>
 80070a8:	b108      	cbz	r0, 80070ae <_printf_i+0x1e6>
 80070aa:	1b80      	subs	r0, r0, r6
 80070ac:	6060      	str	r0, [r4, #4]
 80070ae:	6863      	ldr	r3, [r4, #4]
 80070b0:	6123      	str	r3, [r4, #16]
 80070b2:	2300      	movs	r3, #0
 80070b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070b8:	e7aa      	b.n	8007010 <_printf_i+0x148>
 80070ba:	6923      	ldr	r3, [r4, #16]
 80070bc:	4632      	mov	r2, r6
 80070be:	4649      	mov	r1, r9
 80070c0:	4640      	mov	r0, r8
 80070c2:	47d0      	blx	sl
 80070c4:	3001      	adds	r0, #1
 80070c6:	d0ad      	beq.n	8007024 <_printf_i+0x15c>
 80070c8:	6823      	ldr	r3, [r4, #0]
 80070ca:	079b      	lsls	r3, r3, #30
 80070cc:	d413      	bmi.n	80070f6 <_printf_i+0x22e>
 80070ce:	68e0      	ldr	r0, [r4, #12]
 80070d0:	9b03      	ldr	r3, [sp, #12]
 80070d2:	4298      	cmp	r0, r3
 80070d4:	bfb8      	it	lt
 80070d6:	4618      	movlt	r0, r3
 80070d8:	e7a6      	b.n	8007028 <_printf_i+0x160>
 80070da:	2301      	movs	r3, #1
 80070dc:	4632      	mov	r2, r6
 80070de:	4649      	mov	r1, r9
 80070e0:	4640      	mov	r0, r8
 80070e2:	47d0      	blx	sl
 80070e4:	3001      	adds	r0, #1
 80070e6:	d09d      	beq.n	8007024 <_printf_i+0x15c>
 80070e8:	3501      	adds	r5, #1
 80070ea:	68e3      	ldr	r3, [r4, #12]
 80070ec:	9903      	ldr	r1, [sp, #12]
 80070ee:	1a5b      	subs	r3, r3, r1
 80070f0:	42ab      	cmp	r3, r5
 80070f2:	dcf2      	bgt.n	80070da <_printf_i+0x212>
 80070f4:	e7eb      	b.n	80070ce <_printf_i+0x206>
 80070f6:	2500      	movs	r5, #0
 80070f8:	f104 0619 	add.w	r6, r4, #25
 80070fc:	e7f5      	b.n	80070ea <_printf_i+0x222>
 80070fe:	bf00      	nop
 8007100:	0800958e 	.word	0x0800958e
 8007104:	0800959f 	.word	0x0800959f

08007108 <std>:
 8007108:	2300      	movs	r3, #0
 800710a:	b510      	push	{r4, lr}
 800710c:	4604      	mov	r4, r0
 800710e:	e9c0 3300 	strd	r3, r3, [r0]
 8007112:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007116:	6083      	str	r3, [r0, #8]
 8007118:	8181      	strh	r1, [r0, #12]
 800711a:	6643      	str	r3, [r0, #100]	@ 0x64
 800711c:	81c2      	strh	r2, [r0, #14]
 800711e:	6183      	str	r3, [r0, #24]
 8007120:	4619      	mov	r1, r3
 8007122:	2208      	movs	r2, #8
 8007124:	305c      	adds	r0, #92	@ 0x5c
 8007126:	f000 f914 	bl	8007352 <memset>
 800712a:	4b0d      	ldr	r3, [pc, #52]	@ (8007160 <std+0x58>)
 800712c:	6263      	str	r3, [r4, #36]	@ 0x24
 800712e:	4b0d      	ldr	r3, [pc, #52]	@ (8007164 <std+0x5c>)
 8007130:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007132:	4b0d      	ldr	r3, [pc, #52]	@ (8007168 <std+0x60>)
 8007134:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007136:	4b0d      	ldr	r3, [pc, #52]	@ (800716c <std+0x64>)
 8007138:	6323      	str	r3, [r4, #48]	@ 0x30
 800713a:	4b0d      	ldr	r3, [pc, #52]	@ (8007170 <std+0x68>)
 800713c:	6224      	str	r4, [r4, #32]
 800713e:	429c      	cmp	r4, r3
 8007140:	d006      	beq.n	8007150 <std+0x48>
 8007142:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007146:	4294      	cmp	r4, r2
 8007148:	d002      	beq.n	8007150 <std+0x48>
 800714a:	33d0      	adds	r3, #208	@ 0xd0
 800714c:	429c      	cmp	r4, r3
 800714e:	d105      	bne.n	800715c <std+0x54>
 8007150:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007158:	f000 b978 	b.w	800744c <__retarget_lock_init_recursive>
 800715c:	bd10      	pop	{r4, pc}
 800715e:	bf00      	nop
 8007160:	080072cd 	.word	0x080072cd
 8007164:	080072ef 	.word	0x080072ef
 8007168:	08007327 	.word	0x08007327
 800716c:	0800734b 	.word	0x0800734b
 8007170:	2000043c 	.word	0x2000043c

08007174 <stdio_exit_handler>:
 8007174:	4a02      	ldr	r2, [pc, #8]	@ (8007180 <stdio_exit_handler+0xc>)
 8007176:	4903      	ldr	r1, [pc, #12]	@ (8007184 <stdio_exit_handler+0x10>)
 8007178:	4803      	ldr	r0, [pc, #12]	@ (8007188 <stdio_exit_handler+0x14>)
 800717a:	f000 b869 	b.w	8007250 <_fwalk_sglue>
 800717e:	bf00      	nop
 8007180:	20000014 	.word	0x20000014
 8007184:	08008dad 	.word	0x08008dad
 8007188:	20000024 	.word	0x20000024

0800718c <cleanup_stdio>:
 800718c:	6841      	ldr	r1, [r0, #4]
 800718e:	4b0c      	ldr	r3, [pc, #48]	@ (80071c0 <cleanup_stdio+0x34>)
 8007190:	4299      	cmp	r1, r3
 8007192:	b510      	push	{r4, lr}
 8007194:	4604      	mov	r4, r0
 8007196:	d001      	beq.n	800719c <cleanup_stdio+0x10>
 8007198:	f001 fe08 	bl	8008dac <_fflush_r>
 800719c:	68a1      	ldr	r1, [r4, #8]
 800719e:	4b09      	ldr	r3, [pc, #36]	@ (80071c4 <cleanup_stdio+0x38>)
 80071a0:	4299      	cmp	r1, r3
 80071a2:	d002      	beq.n	80071aa <cleanup_stdio+0x1e>
 80071a4:	4620      	mov	r0, r4
 80071a6:	f001 fe01 	bl	8008dac <_fflush_r>
 80071aa:	68e1      	ldr	r1, [r4, #12]
 80071ac:	4b06      	ldr	r3, [pc, #24]	@ (80071c8 <cleanup_stdio+0x3c>)
 80071ae:	4299      	cmp	r1, r3
 80071b0:	d004      	beq.n	80071bc <cleanup_stdio+0x30>
 80071b2:	4620      	mov	r0, r4
 80071b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071b8:	f001 bdf8 	b.w	8008dac <_fflush_r>
 80071bc:	bd10      	pop	{r4, pc}
 80071be:	bf00      	nop
 80071c0:	2000043c 	.word	0x2000043c
 80071c4:	200004a4 	.word	0x200004a4
 80071c8:	2000050c 	.word	0x2000050c

080071cc <global_stdio_init.part.0>:
 80071cc:	b510      	push	{r4, lr}
 80071ce:	4b0b      	ldr	r3, [pc, #44]	@ (80071fc <global_stdio_init.part.0+0x30>)
 80071d0:	4c0b      	ldr	r4, [pc, #44]	@ (8007200 <global_stdio_init.part.0+0x34>)
 80071d2:	4a0c      	ldr	r2, [pc, #48]	@ (8007204 <global_stdio_init.part.0+0x38>)
 80071d4:	601a      	str	r2, [r3, #0]
 80071d6:	4620      	mov	r0, r4
 80071d8:	2200      	movs	r2, #0
 80071da:	2104      	movs	r1, #4
 80071dc:	f7ff ff94 	bl	8007108 <std>
 80071e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80071e4:	2201      	movs	r2, #1
 80071e6:	2109      	movs	r1, #9
 80071e8:	f7ff ff8e 	bl	8007108 <std>
 80071ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80071f0:	2202      	movs	r2, #2
 80071f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071f6:	2112      	movs	r1, #18
 80071f8:	f7ff bf86 	b.w	8007108 <std>
 80071fc:	20000574 	.word	0x20000574
 8007200:	2000043c 	.word	0x2000043c
 8007204:	08007175 	.word	0x08007175

08007208 <__sfp_lock_acquire>:
 8007208:	4801      	ldr	r0, [pc, #4]	@ (8007210 <__sfp_lock_acquire+0x8>)
 800720a:	f000 b920 	b.w	800744e <__retarget_lock_acquire_recursive>
 800720e:	bf00      	nop
 8007210:	2000057d 	.word	0x2000057d

08007214 <__sfp_lock_release>:
 8007214:	4801      	ldr	r0, [pc, #4]	@ (800721c <__sfp_lock_release+0x8>)
 8007216:	f000 b91b 	b.w	8007450 <__retarget_lock_release_recursive>
 800721a:	bf00      	nop
 800721c:	2000057d 	.word	0x2000057d

08007220 <__sinit>:
 8007220:	b510      	push	{r4, lr}
 8007222:	4604      	mov	r4, r0
 8007224:	f7ff fff0 	bl	8007208 <__sfp_lock_acquire>
 8007228:	6a23      	ldr	r3, [r4, #32]
 800722a:	b11b      	cbz	r3, 8007234 <__sinit+0x14>
 800722c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007230:	f7ff bff0 	b.w	8007214 <__sfp_lock_release>
 8007234:	4b04      	ldr	r3, [pc, #16]	@ (8007248 <__sinit+0x28>)
 8007236:	6223      	str	r3, [r4, #32]
 8007238:	4b04      	ldr	r3, [pc, #16]	@ (800724c <__sinit+0x2c>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d1f5      	bne.n	800722c <__sinit+0xc>
 8007240:	f7ff ffc4 	bl	80071cc <global_stdio_init.part.0>
 8007244:	e7f2      	b.n	800722c <__sinit+0xc>
 8007246:	bf00      	nop
 8007248:	0800718d 	.word	0x0800718d
 800724c:	20000574 	.word	0x20000574

08007250 <_fwalk_sglue>:
 8007250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007254:	4607      	mov	r7, r0
 8007256:	4688      	mov	r8, r1
 8007258:	4614      	mov	r4, r2
 800725a:	2600      	movs	r6, #0
 800725c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007260:	f1b9 0901 	subs.w	r9, r9, #1
 8007264:	d505      	bpl.n	8007272 <_fwalk_sglue+0x22>
 8007266:	6824      	ldr	r4, [r4, #0]
 8007268:	2c00      	cmp	r4, #0
 800726a:	d1f7      	bne.n	800725c <_fwalk_sglue+0xc>
 800726c:	4630      	mov	r0, r6
 800726e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007272:	89ab      	ldrh	r3, [r5, #12]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d907      	bls.n	8007288 <_fwalk_sglue+0x38>
 8007278:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800727c:	3301      	adds	r3, #1
 800727e:	d003      	beq.n	8007288 <_fwalk_sglue+0x38>
 8007280:	4629      	mov	r1, r5
 8007282:	4638      	mov	r0, r7
 8007284:	47c0      	blx	r8
 8007286:	4306      	orrs	r6, r0
 8007288:	3568      	adds	r5, #104	@ 0x68
 800728a:	e7e9      	b.n	8007260 <_fwalk_sglue+0x10>

0800728c <siprintf>:
 800728c:	b40e      	push	{r1, r2, r3}
 800728e:	b500      	push	{lr}
 8007290:	b09c      	sub	sp, #112	@ 0x70
 8007292:	ab1d      	add	r3, sp, #116	@ 0x74
 8007294:	9002      	str	r0, [sp, #8]
 8007296:	9006      	str	r0, [sp, #24]
 8007298:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800729c:	4809      	ldr	r0, [pc, #36]	@ (80072c4 <siprintf+0x38>)
 800729e:	9107      	str	r1, [sp, #28]
 80072a0:	9104      	str	r1, [sp, #16]
 80072a2:	4909      	ldr	r1, [pc, #36]	@ (80072c8 <siprintf+0x3c>)
 80072a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80072a8:	9105      	str	r1, [sp, #20]
 80072aa:	6800      	ldr	r0, [r0, #0]
 80072ac:	9301      	str	r3, [sp, #4]
 80072ae:	a902      	add	r1, sp, #8
 80072b0:	f001 fbfc 	bl	8008aac <_svfiprintf_r>
 80072b4:	9b02      	ldr	r3, [sp, #8]
 80072b6:	2200      	movs	r2, #0
 80072b8:	701a      	strb	r2, [r3, #0]
 80072ba:	b01c      	add	sp, #112	@ 0x70
 80072bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80072c0:	b003      	add	sp, #12
 80072c2:	4770      	bx	lr
 80072c4:	20000020 	.word	0x20000020
 80072c8:	ffff0208 	.word	0xffff0208

080072cc <__sread>:
 80072cc:	b510      	push	{r4, lr}
 80072ce:	460c      	mov	r4, r1
 80072d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072d4:	f000 f86c 	bl	80073b0 <_read_r>
 80072d8:	2800      	cmp	r0, #0
 80072da:	bfab      	itete	ge
 80072dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80072de:	89a3      	ldrhlt	r3, [r4, #12]
 80072e0:	181b      	addge	r3, r3, r0
 80072e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80072e6:	bfac      	ite	ge
 80072e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80072ea:	81a3      	strhlt	r3, [r4, #12]
 80072ec:	bd10      	pop	{r4, pc}

080072ee <__swrite>:
 80072ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072f2:	461f      	mov	r7, r3
 80072f4:	898b      	ldrh	r3, [r1, #12]
 80072f6:	05db      	lsls	r3, r3, #23
 80072f8:	4605      	mov	r5, r0
 80072fa:	460c      	mov	r4, r1
 80072fc:	4616      	mov	r6, r2
 80072fe:	d505      	bpl.n	800730c <__swrite+0x1e>
 8007300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007304:	2302      	movs	r3, #2
 8007306:	2200      	movs	r2, #0
 8007308:	f000 f840 	bl	800738c <_lseek_r>
 800730c:	89a3      	ldrh	r3, [r4, #12]
 800730e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007312:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007316:	81a3      	strh	r3, [r4, #12]
 8007318:	4632      	mov	r2, r6
 800731a:	463b      	mov	r3, r7
 800731c:	4628      	mov	r0, r5
 800731e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007322:	f000 b857 	b.w	80073d4 <_write_r>

08007326 <__sseek>:
 8007326:	b510      	push	{r4, lr}
 8007328:	460c      	mov	r4, r1
 800732a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800732e:	f000 f82d 	bl	800738c <_lseek_r>
 8007332:	1c43      	adds	r3, r0, #1
 8007334:	89a3      	ldrh	r3, [r4, #12]
 8007336:	bf15      	itete	ne
 8007338:	6560      	strne	r0, [r4, #84]	@ 0x54
 800733a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800733e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007342:	81a3      	strheq	r3, [r4, #12]
 8007344:	bf18      	it	ne
 8007346:	81a3      	strhne	r3, [r4, #12]
 8007348:	bd10      	pop	{r4, pc}

0800734a <__sclose>:
 800734a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800734e:	f000 b80d 	b.w	800736c <_close_r>

08007352 <memset>:
 8007352:	4402      	add	r2, r0
 8007354:	4603      	mov	r3, r0
 8007356:	4293      	cmp	r3, r2
 8007358:	d100      	bne.n	800735c <memset+0xa>
 800735a:	4770      	bx	lr
 800735c:	f803 1b01 	strb.w	r1, [r3], #1
 8007360:	e7f9      	b.n	8007356 <memset+0x4>
	...

08007364 <_localeconv_r>:
 8007364:	4800      	ldr	r0, [pc, #0]	@ (8007368 <_localeconv_r+0x4>)
 8007366:	4770      	bx	lr
 8007368:	20000160 	.word	0x20000160

0800736c <_close_r>:
 800736c:	b538      	push	{r3, r4, r5, lr}
 800736e:	4d06      	ldr	r5, [pc, #24]	@ (8007388 <_close_r+0x1c>)
 8007370:	2300      	movs	r3, #0
 8007372:	4604      	mov	r4, r0
 8007374:	4608      	mov	r0, r1
 8007376:	602b      	str	r3, [r5, #0]
 8007378:	f7fb f952 	bl	8002620 <_close>
 800737c:	1c43      	adds	r3, r0, #1
 800737e:	d102      	bne.n	8007386 <_close_r+0x1a>
 8007380:	682b      	ldr	r3, [r5, #0]
 8007382:	b103      	cbz	r3, 8007386 <_close_r+0x1a>
 8007384:	6023      	str	r3, [r4, #0]
 8007386:	bd38      	pop	{r3, r4, r5, pc}
 8007388:	20000578 	.word	0x20000578

0800738c <_lseek_r>:
 800738c:	b538      	push	{r3, r4, r5, lr}
 800738e:	4d07      	ldr	r5, [pc, #28]	@ (80073ac <_lseek_r+0x20>)
 8007390:	4604      	mov	r4, r0
 8007392:	4608      	mov	r0, r1
 8007394:	4611      	mov	r1, r2
 8007396:	2200      	movs	r2, #0
 8007398:	602a      	str	r2, [r5, #0]
 800739a:	461a      	mov	r2, r3
 800739c:	f7fb f967 	bl	800266e <_lseek>
 80073a0:	1c43      	adds	r3, r0, #1
 80073a2:	d102      	bne.n	80073aa <_lseek_r+0x1e>
 80073a4:	682b      	ldr	r3, [r5, #0]
 80073a6:	b103      	cbz	r3, 80073aa <_lseek_r+0x1e>
 80073a8:	6023      	str	r3, [r4, #0]
 80073aa:	bd38      	pop	{r3, r4, r5, pc}
 80073ac:	20000578 	.word	0x20000578

080073b0 <_read_r>:
 80073b0:	b538      	push	{r3, r4, r5, lr}
 80073b2:	4d07      	ldr	r5, [pc, #28]	@ (80073d0 <_read_r+0x20>)
 80073b4:	4604      	mov	r4, r0
 80073b6:	4608      	mov	r0, r1
 80073b8:	4611      	mov	r1, r2
 80073ba:	2200      	movs	r2, #0
 80073bc:	602a      	str	r2, [r5, #0]
 80073be:	461a      	mov	r2, r3
 80073c0:	f7fb f8f5 	bl	80025ae <_read>
 80073c4:	1c43      	adds	r3, r0, #1
 80073c6:	d102      	bne.n	80073ce <_read_r+0x1e>
 80073c8:	682b      	ldr	r3, [r5, #0]
 80073ca:	b103      	cbz	r3, 80073ce <_read_r+0x1e>
 80073cc:	6023      	str	r3, [r4, #0]
 80073ce:	bd38      	pop	{r3, r4, r5, pc}
 80073d0:	20000578 	.word	0x20000578

080073d4 <_write_r>:
 80073d4:	b538      	push	{r3, r4, r5, lr}
 80073d6:	4d07      	ldr	r5, [pc, #28]	@ (80073f4 <_write_r+0x20>)
 80073d8:	4604      	mov	r4, r0
 80073da:	4608      	mov	r0, r1
 80073dc:	4611      	mov	r1, r2
 80073de:	2200      	movs	r2, #0
 80073e0:	602a      	str	r2, [r5, #0]
 80073e2:	461a      	mov	r2, r3
 80073e4:	f7fb f900 	bl	80025e8 <_write>
 80073e8:	1c43      	adds	r3, r0, #1
 80073ea:	d102      	bne.n	80073f2 <_write_r+0x1e>
 80073ec:	682b      	ldr	r3, [r5, #0]
 80073ee:	b103      	cbz	r3, 80073f2 <_write_r+0x1e>
 80073f0:	6023      	str	r3, [r4, #0]
 80073f2:	bd38      	pop	{r3, r4, r5, pc}
 80073f4:	20000578 	.word	0x20000578

080073f8 <__errno>:
 80073f8:	4b01      	ldr	r3, [pc, #4]	@ (8007400 <__errno+0x8>)
 80073fa:	6818      	ldr	r0, [r3, #0]
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop
 8007400:	20000020 	.word	0x20000020

08007404 <__libc_init_array>:
 8007404:	b570      	push	{r4, r5, r6, lr}
 8007406:	4d0d      	ldr	r5, [pc, #52]	@ (800743c <__libc_init_array+0x38>)
 8007408:	4c0d      	ldr	r4, [pc, #52]	@ (8007440 <__libc_init_array+0x3c>)
 800740a:	1b64      	subs	r4, r4, r5
 800740c:	10a4      	asrs	r4, r4, #2
 800740e:	2600      	movs	r6, #0
 8007410:	42a6      	cmp	r6, r4
 8007412:	d109      	bne.n	8007428 <__libc_init_array+0x24>
 8007414:	4d0b      	ldr	r5, [pc, #44]	@ (8007444 <__libc_init_array+0x40>)
 8007416:	4c0c      	ldr	r4, [pc, #48]	@ (8007448 <__libc_init_array+0x44>)
 8007418:	f002 f866 	bl	80094e8 <_init>
 800741c:	1b64      	subs	r4, r4, r5
 800741e:	10a4      	asrs	r4, r4, #2
 8007420:	2600      	movs	r6, #0
 8007422:	42a6      	cmp	r6, r4
 8007424:	d105      	bne.n	8007432 <__libc_init_array+0x2e>
 8007426:	bd70      	pop	{r4, r5, r6, pc}
 8007428:	f855 3b04 	ldr.w	r3, [r5], #4
 800742c:	4798      	blx	r3
 800742e:	3601      	adds	r6, #1
 8007430:	e7ee      	b.n	8007410 <__libc_init_array+0xc>
 8007432:	f855 3b04 	ldr.w	r3, [r5], #4
 8007436:	4798      	blx	r3
 8007438:	3601      	adds	r6, #1
 800743a:	e7f2      	b.n	8007422 <__libc_init_array+0x1e>
 800743c:	080098f8 	.word	0x080098f8
 8007440:	080098f8 	.word	0x080098f8
 8007444:	080098f8 	.word	0x080098f8
 8007448:	080098fc 	.word	0x080098fc

0800744c <__retarget_lock_init_recursive>:
 800744c:	4770      	bx	lr

0800744e <__retarget_lock_acquire_recursive>:
 800744e:	4770      	bx	lr

08007450 <__retarget_lock_release_recursive>:
 8007450:	4770      	bx	lr

08007452 <quorem>:
 8007452:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007456:	6903      	ldr	r3, [r0, #16]
 8007458:	690c      	ldr	r4, [r1, #16]
 800745a:	42a3      	cmp	r3, r4
 800745c:	4607      	mov	r7, r0
 800745e:	db7e      	blt.n	800755e <quorem+0x10c>
 8007460:	3c01      	subs	r4, #1
 8007462:	f101 0814 	add.w	r8, r1, #20
 8007466:	00a3      	lsls	r3, r4, #2
 8007468:	f100 0514 	add.w	r5, r0, #20
 800746c:	9300      	str	r3, [sp, #0]
 800746e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007472:	9301      	str	r3, [sp, #4]
 8007474:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007478:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800747c:	3301      	adds	r3, #1
 800747e:	429a      	cmp	r2, r3
 8007480:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007484:	fbb2 f6f3 	udiv	r6, r2, r3
 8007488:	d32e      	bcc.n	80074e8 <quorem+0x96>
 800748a:	f04f 0a00 	mov.w	sl, #0
 800748e:	46c4      	mov	ip, r8
 8007490:	46ae      	mov	lr, r5
 8007492:	46d3      	mov	fp, sl
 8007494:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007498:	b298      	uxth	r0, r3
 800749a:	fb06 a000 	mla	r0, r6, r0, sl
 800749e:	0c02      	lsrs	r2, r0, #16
 80074a0:	0c1b      	lsrs	r3, r3, #16
 80074a2:	fb06 2303 	mla	r3, r6, r3, r2
 80074a6:	f8de 2000 	ldr.w	r2, [lr]
 80074aa:	b280      	uxth	r0, r0
 80074ac:	b292      	uxth	r2, r2
 80074ae:	1a12      	subs	r2, r2, r0
 80074b0:	445a      	add	r2, fp
 80074b2:	f8de 0000 	ldr.w	r0, [lr]
 80074b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80074c0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80074c4:	b292      	uxth	r2, r2
 80074c6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80074ca:	45e1      	cmp	r9, ip
 80074cc:	f84e 2b04 	str.w	r2, [lr], #4
 80074d0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80074d4:	d2de      	bcs.n	8007494 <quorem+0x42>
 80074d6:	9b00      	ldr	r3, [sp, #0]
 80074d8:	58eb      	ldr	r3, [r5, r3]
 80074da:	b92b      	cbnz	r3, 80074e8 <quorem+0x96>
 80074dc:	9b01      	ldr	r3, [sp, #4]
 80074de:	3b04      	subs	r3, #4
 80074e0:	429d      	cmp	r5, r3
 80074e2:	461a      	mov	r2, r3
 80074e4:	d32f      	bcc.n	8007546 <quorem+0xf4>
 80074e6:	613c      	str	r4, [r7, #16]
 80074e8:	4638      	mov	r0, r7
 80074ea:	f001 f97b 	bl	80087e4 <__mcmp>
 80074ee:	2800      	cmp	r0, #0
 80074f0:	db25      	blt.n	800753e <quorem+0xec>
 80074f2:	4629      	mov	r1, r5
 80074f4:	2000      	movs	r0, #0
 80074f6:	f858 2b04 	ldr.w	r2, [r8], #4
 80074fa:	f8d1 c000 	ldr.w	ip, [r1]
 80074fe:	fa1f fe82 	uxth.w	lr, r2
 8007502:	fa1f f38c 	uxth.w	r3, ip
 8007506:	eba3 030e 	sub.w	r3, r3, lr
 800750a:	4403      	add	r3, r0
 800750c:	0c12      	lsrs	r2, r2, #16
 800750e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007512:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007516:	b29b      	uxth	r3, r3
 8007518:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800751c:	45c1      	cmp	r9, r8
 800751e:	f841 3b04 	str.w	r3, [r1], #4
 8007522:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007526:	d2e6      	bcs.n	80074f6 <quorem+0xa4>
 8007528:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800752c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007530:	b922      	cbnz	r2, 800753c <quorem+0xea>
 8007532:	3b04      	subs	r3, #4
 8007534:	429d      	cmp	r5, r3
 8007536:	461a      	mov	r2, r3
 8007538:	d30b      	bcc.n	8007552 <quorem+0x100>
 800753a:	613c      	str	r4, [r7, #16]
 800753c:	3601      	adds	r6, #1
 800753e:	4630      	mov	r0, r6
 8007540:	b003      	add	sp, #12
 8007542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007546:	6812      	ldr	r2, [r2, #0]
 8007548:	3b04      	subs	r3, #4
 800754a:	2a00      	cmp	r2, #0
 800754c:	d1cb      	bne.n	80074e6 <quorem+0x94>
 800754e:	3c01      	subs	r4, #1
 8007550:	e7c6      	b.n	80074e0 <quorem+0x8e>
 8007552:	6812      	ldr	r2, [r2, #0]
 8007554:	3b04      	subs	r3, #4
 8007556:	2a00      	cmp	r2, #0
 8007558:	d1ef      	bne.n	800753a <quorem+0xe8>
 800755a:	3c01      	subs	r4, #1
 800755c:	e7ea      	b.n	8007534 <quorem+0xe2>
 800755e:	2000      	movs	r0, #0
 8007560:	e7ee      	b.n	8007540 <quorem+0xee>
 8007562:	0000      	movs	r0, r0
 8007564:	0000      	movs	r0, r0
	...

08007568 <_dtoa_r>:
 8007568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800756c:	69c7      	ldr	r7, [r0, #28]
 800756e:	b099      	sub	sp, #100	@ 0x64
 8007570:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007574:	ec55 4b10 	vmov	r4, r5, d0
 8007578:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800757a:	9109      	str	r1, [sp, #36]	@ 0x24
 800757c:	4683      	mov	fp, r0
 800757e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007580:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007582:	b97f      	cbnz	r7, 80075a4 <_dtoa_r+0x3c>
 8007584:	2010      	movs	r0, #16
 8007586:	f000 fdfd 	bl	8008184 <malloc>
 800758a:	4602      	mov	r2, r0
 800758c:	f8cb 001c 	str.w	r0, [fp, #28]
 8007590:	b920      	cbnz	r0, 800759c <_dtoa_r+0x34>
 8007592:	4ba7      	ldr	r3, [pc, #668]	@ (8007830 <_dtoa_r+0x2c8>)
 8007594:	21ef      	movs	r1, #239	@ 0xef
 8007596:	48a7      	ldr	r0, [pc, #668]	@ (8007834 <_dtoa_r+0x2cc>)
 8007598:	f001 fc68 	bl	8008e6c <__assert_func>
 800759c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80075a0:	6007      	str	r7, [r0, #0]
 80075a2:	60c7      	str	r7, [r0, #12]
 80075a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80075a8:	6819      	ldr	r1, [r3, #0]
 80075aa:	b159      	cbz	r1, 80075c4 <_dtoa_r+0x5c>
 80075ac:	685a      	ldr	r2, [r3, #4]
 80075ae:	604a      	str	r2, [r1, #4]
 80075b0:	2301      	movs	r3, #1
 80075b2:	4093      	lsls	r3, r2
 80075b4:	608b      	str	r3, [r1, #8]
 80075b6:	4658      	mov	r0, fp
 80075b8:	f000 feda 	bl	8008370 <_Bfree>
 80075bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80075c0:	2200      	movs	r2, #0
 80075c2:	601a      	str	r2, [r3, #0]
 80075c4:	1e2b      	subs	r3, r5, #0
 80075c6:	bfb9      	ittee	lt
 80075c8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80075cc:	9303      	strlt	r3, [sp, #12]
 80075ce:	2300      	movge	r3, #0
 80075d0:	6033      	strge	r3, [r6, #0]
 80075d2:	9f03      	ldr	r7, [sp, #12]
 80075d4:	4b98      	ldr	r3, [pc, #608]	@ (8007838 <_dtoa_r+0x2d0>)
 80075d6:	bfbc      	itt	lt
 80075d8:	2201      	movlt	r2, #1
 80075da:	6032      	strlt	r2, [r6, #0]
 80075dc:	43bb      	bics	r3, r7
 80075de:	d112      	bne.n	8007606 <_dtoa_r+0x9e>
 80075e0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80075e2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80075e6:	6013      	str	r3, [r2, #0]
 80075e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80075ec:	4323      	orrs	r3, r4
 80075ee:	f000 854d 	beq.w	800808c <_dtoa_r+0xb24>
 80075f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80075f4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800784c <_dtoa_r+0x2e4>
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	f000 854f 	beq.w	800809c <_dtoa_r+0xb34>
 80075fe:	f10a 0303 	add.w	r3, sl, #3
 8007602:	f000 bd49 	b.w	8008098 <_dtoa_r+0xb30>
 8007606:	ed9d 7b02 	vldr	d7, [sp, #8]
 800760a:	2200      	movs	r2, #0
 800760c:	ec51 0b17 	vmov	r0, r1, d7
 8007610:	2300      	movs	r3, #0
 8007612:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007616:	f7f9 fa87 	bl	8000b28 <__aeabi_dcmpeq>
 800761a:	4680      	mov	r8, r0
 800761c:	b158      	cbz	r0, 8007636 <_dtoa_r+0xce>
 800761e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007620:	2301      	movs	r3, #1
 8007622:	6013      	str	r3, [r2, #0]
 8007624:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007626:	b113      	cbz	r3, 800762e <_dtoa_r+0xc6>
 8007628:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800762a:	4b84      	ldr	r3, [pc, #528]	@ (800783c <_dtoa_r+0x2d4>)
 800762c:	6013      	str	r3, [r2, #0]
 800762e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007850 <_dtoa_r+0x2e8>
 8007632:	f000 bd33 	b.w	800809c <_dtoa_r+0xb34>
 8007636:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800763a:	aa16      	add	r2, sp, #88	@ 0x58
 800763c:	a917      	add	r1, sp, #92	@ 0x5c
 800763e:	4658      	mov	r0, fp
 8007640:	f001 f980 	bl	8008944 <__d2b>
 8007644:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007648:	4681      	mov	r9, r0
 800764a:	2e00      	cmp	r6, #0
 800764c:	d077      	beq.n	800773e <_dtoa_r+0x1d6>
 800764e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007650:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007654:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007658:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800765c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007660:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007664:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007668:	4619      	mov	r1, r3
 800766a:	2200      	movs	r2, #0
 800766c:	4b74      	ldr	r3, [pc, #464]	@ (8007840 <_dtoa_r+0x2d8>)
 800766e:	f7f8 fe3b 	bl	80002e8 <__aeabi_dsub>
 8007672:	a369      	add	r3, pc, #420	@ (adr r3, 8007818 <_dtoa_r+0x2b0>)
 8007674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007678:	f7f8 ffee 	bl	8000658 <__aeabi_dmul>
 800767c:	a368      	add	r3, pc, #416	@ (adr r3, 8007820 <_dtoa_r+0x2b8>)
 800767e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007682:	f7f8 fe33 	bl	80002ec <__adddf3>
 8007686:	4604      	mov	r4, r0
 8007688:	4630      	mov	r0, r6
 800768a:	460d      	mov	r5, r1
 800768c:	f7f8 ff7a 	bl	8000584 <__aeabi_i2d>
 8007690:	a365      	add	r3, pc, #404	@ (adr r3, 8007828 <_dtoa_r+0x2c0>)
 8007692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007696:	f7f8 ffdf 	bl	8000658 <__aeabi_dmul>
 800769a:	4602      	mov	r2, r0
 800769c:	460b      	mov	r3, r1
 800769e:	4620      	mov	r0, r4
 80076a0:	4629      	mov	r1, r5
 80076a2:	f7f8 fe23 	bl	80002ec <__adddf3>
 80076a6:	4604      	mov	r4, r0
 80076a8:	460d      	mov	r5, r1
 80076aa:	f7f9 fa85 	bl	8000bb8 <__aeabi_d2iz>
 80076ae:	2200      	movs	r2, #0
 80076b0:	4607      	mov	r7, r0
 80076b2:	2300      	movs	r3, #0
 80076b4:	4620      	mov	r0, r4
 80076b6:	4629      	mov	r1, r5
 80076b8:	f7f9 fa40 	bl	8000b3c <__aeabi_dcmplt>
 80076bc:	b140      	cbz	r0, 80076d0 <_dtoa_r+0x168>
 80076be:	4638      	mov	r0, r7
 80076c0:	f7f8 ff60 	bl	8000584 <__aeabi_i2d>
 80076c4:	4622      	mov	r2, r4
 80076c6:	462b      	mov	r3, r5
 80076c8:	f7f9 fa2e 	bl	8000b28 <__aeabi_dcmpeq>
 80076cc:	b900      	cbnz	r0, 80076d0 <_dtoa_r+0x168>
 80076ce:	3f01      	subs	r7, #1
 80076d0:	2f16      	cmp	r7, #22
 80076d2:	d851      	bhi.n	8007778 <_dtoa_r+0x210>
 80076d4:	4b5b      	ldr	r3, [pc, #364]	@ (8007844 <_dtoa_r+0x2dc>)
 80076d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80076da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80076e2:	f7f9 fa2b 	bl	8000b3c <__aeabi_dcmplt>
 80076e6:	2800      	cmp	r0, #0
 80076e8:	d048      	beq.n	800777c <_dtoa_r+0x214>
 80076ea:	3f01      	subs	r7, #1
 80076ec:	2300      	movs	r3, #0
 80076ee:	9312      	str	r3, [sp, #72]	@ 0x48
 80076f0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80076f2:	1b9b      	subs	r3, r3, r6
 80076f4:	1e5a      	subs	r2, r3, #1
 80076f6:	bf44      	itt	mi
 80076f8:	f1c3 0801 	rsbmi	r8, r3, #1
 80076fc:	2300      	movmi	r3, #0
 80076fe:	9208      	str	r2, [sp, #32]
 8007700:	bf54      	ite	pl
 8007702:	f04f 0800 	movpl.w	r8, #0
 8007706:	9308      	strmi	r3, [sp, #32]
 8007708:	2f00      	cmp	r7, #0
 800770a:	db39      	blt.n	8007780 <_dtoa_r+0x218>
 800770c:	9b08      	ldr	r3, [sp, #32]
 800770e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007710:	443b      	add	r3, r7
 8007712:	9308      	str	r3, [sp, #32]
 8007714:	2300      	movs	r3, #0
 8007716:	930a      	str	r3, [sp, #40]	@ 0x28
 8007718:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800771a:	2b09      	cmp	r3, #9
 800771c:	d864      	bhi.n	80077e8 <_dtoa_r+0x280>
 800771e:	2b05      	cmp	r3, #5
 8007720:	bfc4      	itt	gt
 8007722:	3b04      	subgt	r3, #4
 8007724:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007726:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007728:	f1a3 0302 	sub.w	r3, r3, #2
 800772c:	bfcc      	ite	gt
 800772e:	2400      	movgt	r4, #0
 8007730:	2401      	movle	r4, #1
 8007732:	2b03      	cmp	r3, #3
 8007734:	d863      	bhi.n	80077fe <_dtoa_r+0x296>
 8007736:	e8df f003 	tbb	[pc, r3]
 800773a:	372a      	.short	0x372a
 800773c:	5535      	.short	0x5535
 800773e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007742:	441e      	add	r6, r3
 8007744:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007748:	2b20      	cmp	r3, #32
 800774a:	bfc1      	itttt	gt
 800774c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007750:	409f      	lslgt	r7, r3
 8007752:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007756:	fa24 f303 	lsrgt.w	r3, r4, r3
 800775a:	bfd6      	itet	le
 800775c:	f1c3 0320 	rsble	r3, r3, #32
 8007760:	ea47 0003 	orrgt.w	r0, r7, r3
 8007764:	fa04 f003 	lslle.w	r0, r4, r3
 8007768:	f7f8 fefc 	bl	8000564 <__aeabi_ui2d>
 800776c:	2201      	movs	r2, #1
 800776e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007772:	3e01      	subs	r6, #1
 8007774:	9214      	str	r2, [sp, #80]	@ 0x50
 8007776:	e777      	b.n	8007668 <_dtoa_r+0x100>
 8007778:	2301      	movs	r3, #1
 800777a:	e7b8      	b.n	80076ee <_dtoa_r+0x186>
 800777c:	9012      	str	r0, [sp, #72]	@ 0x48
 800777e:	e7b7      	b.n	80076f0 <_dtoa_r+0x188>
 8007780:	427b      	negs	r3, r7
 8007782:	930a      	str	r3, [sp, #40]	@ 0x28
 8007784:	2300      	movs	r3, #0
 8007786:	eba8 0807 	sub.w	r8, r8, r7
 800778a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800778c:	e7c4      	b.n	8007718 <_dtoa_r+0x1b0>
 800778e:	2300      	movs	r3, #0
 8007790:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007792:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007794:	2b00      	cmp	r3, #0
 8007796:	dc35      	bgt.n	8007804 <_dtoa_r+0x29c>
 8007798:	2301      	movs	r3, #1
 800779a:	9300      	str	r3, [sp, #0]
 800779c:	9307      	str	r3, [sp, #28]
 800779e:	461a      	mov	r2, r3
 80077a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80077a2:	e00b      	b.n	80077bc <_dtoa_r+0x254>
 80077a4:	2301      	movs	r3, #1
 80077a6:	e7f3      	b.n	8007790 <_dtoa_r+0x228>
 80077a8:	2300      	movs	r3, #0
 80077aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80077ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077ae:	18fb      	adds	r3, r7, r3
 80077b0:	9300      	str	r3, [sp, #0]
 80077b2:	3301      	adds	r3, #1
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	9307      	str	r3, [sp, #28]
 80077b8:	bfb8      	it	lt
 80077ba:	2301      	movlt	r3, #1
 80077bc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80077c0:	2100      	movs	r1, #0
 80077c2:	2204      	movs	r2, #4
 80077c4:	f102 0514 	add.w	r5, r2, #20
 80077c8:	429d      	cmp	r5, r3
 80077ca:	d91f      	bls.n	800780c <_dtoa_r+0x2a4>
 80077cc:	6041      	str	r1, [r0, #4]
 80077ce:	4658      	mov	r0, fp
 80077d0:	f000 fd8e 	bl	80082f0 <_Balloc>
 80077d4:	4682      	mov	sl, r0
 80077d6:	2800      	cmp	r0, #0
 80077d8:	d13c      	bne.n	8007854 <_dtoa_r+0x2ec>
 80077da:	4b1b      	ldr	r3, [pc, #108]	@ (8007848 <_dtoa_r+0x2e0>)
 80077dc:	4602      	mov	r2, r0
 80077de:	f240 11af 	movw	r1, #431	@ 0x1af
 80077e2:	e6d8      	b.n	8007596 <_dtoa_r+0x2e>
 80077e4:	2301      	movs	r3, #1
 80077e6:	e7e0      	b.n	80077aa <_dtoa_r+0x242>
 80077e8:	2401      	movs	r4, #1
 80077ea:	2300      	movs	r3, #0
 80077ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80077ee:	940b      	str	r4, [sp, #44]	@ 0x2c
 80077f0:	f04f 33ff 	mov.w	r3, #4294967295
 80077f4:	9300      	str	r3, [sp, #0]
 80077f6:	9307      	str	r3, [sp, #28]
 80077f8:	2200      	movs	r2, #0
 80077fa:	2312      	movs	r3, #18
 80077fc:	e7d0      	b.n	80077a0 <_dtoa_r+0x238>
 80077fe:	2301      	movs	r3, #1
 8007800:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007802:	e7f5      	b.n	80077f0 <_dtoa_r+0x288>
 8007804:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007806:	9300      	str	r3, [sp, #0]
 8007808:	9307      	str	r3, [sp, #28]
 800780a:	e7d7      	b.n	80077bc <_dtoa_r+0x254>
 800780c:	3101      	adds	r1, #1
 800780e:	0052      	lsls	r2, r2, #1
 8007810:	e7d8      	b.n	80077c4 <_dtoa_r+0x25c>
 8007812:	bf00      	nop
 8007814:	f3af 8000 	nop.w
 8007818:	636f4361 	.word	0x636f4361
 800781c:	3fd287a7 	.word	0x3fd287a7
 8007820:	8b60c8b3 	.word	0x8b60c8b3
 8007824:	3fc68a28 	.word	0x3fc68a28
 8007828:	509f79fb 	.word	0x509f79fb
 800782c:	3fd34413 	.word	0x3fd34413
 8007830:	080095bd 	.word	0x080095bd
 8007834:	080095d4 	.word	0x080095d4
 8007838:	7ff00000 	.word	0x7ff00000
 800783c:	0800958d 	.word	0x0800958d
 8007840:	3ff80000 	.word	0x3ff80000
 8007844:	080096d0 	.word	0x080096d0
 8007848:	0800962c 	.word	0x0800962c
 800784c:	080095b9 	.word	0x080095b9
 8007850:	0800958c 	.word	0x0800958c
 8007854:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007858:	6018      	str	r0, [r3, #0]
 800785a:	9b07      	ldr	r3, [sp, #28]
 800785c:	2b0e      	cmp	r3, #14
 800785e:	f200 80a4 	bhi.w	80079aa <_dtoa_r+0x442>
 8007862:	2c00      	cmp	r4, #0
 8007864:	f000 80a1 	beq.w	80079aa <_dtoa_r+0x442>
 8007868:	2f00      	cmp	r7, #0
 800786a:	dd33      	ble.n	80078d4 <_dtoa_r+0x36c>
 800786c:	4bad      	ldr	r3, [pc, #692]	@ (8007b24 <_dtoa_r+0x5bc>)
 800786e:	f007 020f 	and.w	r2, r7, #15
 8007872:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007876:	ed93 7b00 	vldr	d7, [r3]
 800787a:	05f8      	lsls	r0, r7, #23
 800787c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007880:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007884:	d516      	bpl.n	80078b4 <_dtoa_r+0x34c>
 8007886:	4ba8      	ldr	r3, [pc, #672]	@ (8007b28 <_dtoa_r+0x5c0>)
 8007888:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800788c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007890:	f7f9 f80c 	bl	80008ac <__aeabi_ddiv>
 8007894:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007898:	f004 040f 	and.w	r4, r4, #15
 800789c:	2603      	movs	r6, #3
 800789e:	4da2      	ldr	r5, [pc, #648]	@ (8007b28 <_dtoa_r+0x5c0>)
 80078a0:	b954      	cbnz	r4, 80078b8 <_dtoa_r+0x350>
 80078a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078aa:	f7f8 ffff 	bl	80008ac <__aeabi_ddiv>
 80078ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078b2:	e028      	b.n	8007906 <_dtoa_r+0x39e>
 80078b4:	2602      	movs	r6, #2
 80078b6:	e7f2      	b.n	800789e <_dtoa_r+0x336>
 80078b8:	07e1      	lsls	r1, r4, #31
 80078ba:	d508      	bpl.n	80078ce <_dtoa_r+0x366>
 80078bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80078c4:	f7f8 fec8 	bl	8000658 <__aeabi_dmul>
 80078c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80078cc:	3601      	adds	r6, #1
 80078ce:	1064      	asrs	r4, r4, #1
 80078d0:	3508      	adds	r5, #8
 80078d2:	e7e5      	b.n	80078a0 <_dtoa_r+0x338>
 80078d4:	f000 80d2 	beq.w	8007a7c <_dtoa_r+0x514>
 80078d8:	427c      	negs	r4, r7
 80078da:	4b92      	ldr	r3, [pc, #584]	@ (8007b24 <_dtoa_r+0x5bc>)
 80078dc:	4d92      	ldr	r5, [pc, #584]	@ (8007b28 <_dtoa_r+0x5c0>)
 80078de:	f004 020f 	and.w	r2, r4, #15
 80078e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80078ee:	f7f8 feb3 	bl	8000658 <__aeabi_dmul>
 80078f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078f6:	1124      	asrs	r4, r4, #4
 80078f8:	2300      	movs	r3, #0
 80078fa:	2602      	movs	r6, #2
 80078fc:	2c00      	cmp	r4, #0
 80078fe:	f040 80b2 	bne.w	8007a66 <_dtoa_r+0x4fe>
 8007902:	2b00      	cmp	r3, #0
 8007904:	d1d3      	bne.n	80078ae <_dtoa_r+0x346>
 8007906:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007908:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800790c:	2b00      	cmp	r3, #0
 800790e:	f000 80b7 	beq.w	8007a80 <_dtoa_r+0x518>
 8007912:	4b86      	ldr	r3, [pc, #536]	@ (8007b2c <_dtoa_r+0x5c4>)
 8007914:	2200      	movs	r2, #0
 8007916:	4620      	mov	r0, r4
 8007918:	4629      	mov	r1, r5
 800791a:	f7f9 f90f 	bl	8000b3c <__aeabi_dcmplt>
 800791e:	2800      	cmp	r0, #0
 8007920:	f000 80ae 	beq.w	8007a80 <_dtoa_r+0x518>
 8007924:	9b07      	ldr	r3, [sp, #28]
 8007926:	2b00      	cmp	r3, #0
 8007928:	f000 80aa 	beq.w	8007a80 <_dtoa_r+0x518>
 800792c:	9b00      	ldr	r3, [sp, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	dd37      	ble.n	80079a2 <_dtoa_r+0x43a>
 8007932:	1e7b      	subs	r3, r7, #1
 8007934:	9304      	str	r3, [sp, #16]
 8007936:	4620      	mov	r0, r4
 8007938:	4b7d      	ldr	r3, [pc, #500]	@ (8007b30 <_dtoa_r+0x5c8>)
 800793a:	2200      	movs	r2, #0
 800793c:	4629      	mov	r1, r5
 800793e:	f7f8 fe8b 	bl	8000658 <__aeabi_dmul>
 8007942:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007946:	9c00      	ldr	r4, [sp, #0]
 8007948:	3601      	adds	r6, #1
 800794a:	4630      	mov	r0, r6
 800794c:	f7f8 fe1a 	bl	8000584 <__aeabi_i2d>
 8007950:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007954:	f7f8 fe80 	bl	8000658 <__aeabi_dmul>
 8007958:	4b76      	ldr	r3, [pc, #472]	@ (8007b34 <_dtoa_r+0x5cc>)
 800795a:	2200      	movs	r2, #0
 800795c:	f7f8 fcc6 	bl	80002ec <__adddf3>
 8007960:	4605      	mov	r5, r0
 8007962:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007966:	2c00      	cmp	r4, #0
 8007968:	f040 808d 	bne.w	8007a86 <_dtoa_r+0x51e>
 800796c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007970:	4b71      	ldr	r3, [pc, #452]	@ (8007b38 <_dtoa_r+0x5d0>)
 8007972:	2200      	movs	r2, #0
 8007974:	f7f8 fcb8 	bl	80002e8 <__aeabi_dsub>
 8007978:	4602      	mov	r2, r0
 800797a:	460b      	mov	r3, r1
 800797c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007980:	462a      	mov	r2, r5
 8007982:	4633      	mov	r3, r6
 8007984:	f7f9 f8f8 	bl	8000b78 <__aeabi_dcmpgt>
 8007988:	2800      	cmp	r0, #0
 800798a:	f040 828b 	bne.w	8007ea4 <_dtoa_r+0x93c>
 800798e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007992:	462a      	mov	r2, r5
 8007994:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007998:	f7f9 f8d0 	bl	8000b3c <__aeabi_dcmplt>
 800799c:	2800      	cmp	r0, #0
 800799e:	f040 8128 	bne.w	8007bf2 <_dtoa_r+0x68a>
 80079a2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80079a6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80079aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	f2c0 815a 	blt.w	8007c66 <_dtoa_r+0x6fe>
 80079b2:	2f0e      	cmp	r7, #14
 80079b4:	f300 8157 	bgt.w	8007c66 <_dtoa_r+0x6fe>
 80079b8:	4b5a      	ldr	r3, [pc, #360]	@ (8007b24 <_dtoa_r+0x5bc>)
 80079ba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80079be:	ed93 7b00 	vldr	d7, [r3]
 80079c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	ed8d 7b00 	vstr	d7, [sp]
 80079ca:	da03      	bge.n	80079d4 <_dtoa_r+0x46c>
 80079cc:	9b07      	ldr	r3, [sp, #28]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	f340 8101 	ble.w	8007bd6 <_dtoa_r+0x66e>
 80079d4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80079d8:	4656      	mov	r6, sl
 80079da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80079de:	4620      	mov	r0, r4
 80079e0:	4629      	mov	r1, r5
 80079e2:	f7f8 ff63 	bl	80008ac <__aeabi_ddiv>
 80079e6:	f7f9 f8e7 	bl	8000bb8 <__aeabi_d2iz>
 80079ea:	4680      	mov	r8, r0
 80079ec:	f7f8 fdca 	bl	8000584 <__aeabi_i2d>
 80079f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80079f4:	f7f8 fe30 	bl	8000658 <__aeabi_dmul>
 80079f8:	4602      	mov	r2, r0
 80079fa:	460b      	mov	r3, r1
 80079fc:	4620      	mov	r0, r4
 80079fe:	4629      	mov	r1, r5
 8007a00:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007a04:	f7f8 fc70 	bl	80002e8 <__aeabi_dsub>
 8007a08:	f806 4b01 	strb.w	r4, [r6], #1
 8007a0c:	9d07      	ldr	r5, [sp, #28]
 8007a0e:	eba6 040a 	sub.w	r4, r6, sl
 8007a12:	42a5      	cmp	r5, r4
 8007a14:	4602      	mov	r2, r0
 8007a16:	460b      	mov	r3, r1
 8007a18:	f040 8117 	bne.w	8007c4a <_dtoa_r+0x6e2>
 8007a1c:	f7f8 fc66 	bl	80002ec <__adddf3>
 8007a20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a24:	4604      	mov	r4, r0
 8007a26:	460d      	mov	r5, r1
 8007a28:	f7f9 f8a6 	bl	8000b78 <__aeabi_dcmpgt>
 8007a2c:	2800      	cmp	r0, #0
 8007a2e:	f040 80f9 	bne.w	8007c24 <_dtoa_r+0x6bc>
 8007a32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a36:	4620      	mov	r0, r4
 8007a38:	4629      	mov	r1, r5
 8007a3a:	f7f9 f875 	bl	8000b28 <__aeabi_dcmpeq>
 8007a3e:	b118      	cbz	r0, 8007a48 <_dtoa_r+0x4e0>
 8007a40:	f018 0f01 	tst.w	r8, #1
 8007a44:	f040 80ee 	bne.w	8007c24 <_dtoa_r+0x6bc>
 8007a48:	4649      	mov	r1, r9
 8007a4a:	4658      	mov	r0, fp
 8007a4c:	f000 fc90 	bl	8008370 <_Bfree>
 8007a50:	2300      	movs	r3, #0
 8007a52:	7033      	strb	r3, [r6, #0]
 8007a54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007a56:	3701      	adds	r7, #1
 8007a58:	601f      	str	r7, [r3, #0]
 8007a5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	f000 831d 	beq.w	800809c <_dtoa_r+0xb34>
 8007a62:	601e      	str	r6, [r3, #0]
 8007a64:	e31a      	b.n	800809c <_dtoa_r+0xb34>
 8007a66:	07e2      	lsls	r2, r4, #31
 8007a68:	d505      	bpl.n	8007a76 <_dtoa_r+0x50e>
 8007a6a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007a6e:	f7f8 fdf3 	bl	8000658 <__aeabi_dmul>
 8007a72:	3601      	adds	r6, #1
 8007a74:	2301      	movs	r3, #1
 8007a76:	1064      	asrs	r4, r4, #1
 8007a78:	3508      	adds	r5, #8
 8007a7a:	e73f      	b.n	80078fc <_dtoa_r+0x394>
 8007a7c:	2602      	movs	r6, #2
 8007a7e:	e742      	b.n	8007906 <_dtoa_r+0x39e>
 8007a80:	9c07      	ldr	r4, [sp, #28]
 8007a82:	9704      	str	r7, [sp, #16]
 8007a84:	e761      	b.n	800794a <_dtoa_r+0x3e2>
 8007a86:	4b27      	ldr	r3, [pc, #156]	@ (8007b24 <_dtoa_r+0x5bc>)
 8007a88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007a8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007a8e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007a92:	4454      	add	r4, sl
 8007a94:	2900      	cmp	r1, #0
 8007a96:	d053      	beq.n	8007b40 <_dtoa_r+0x5d8>
 8007a98:	4928      	ldr	r1, [pc, #160]	@ (8007b3c <_dtoa_r+0x5d4>)
 8007a9a:	2000      	movs	r0, #0
 8007a9c:	f7f8 ff06 	bl	80008ac <__aeabi_ddiv>
 8007aa0:	4633      	mov	r3, r6
 8007aa2:	462a      	mov	r2, r5
 8007aa4:	f7f8 fc20 	bl	80002e8 <__aeabi_dsub>
 8007aa8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007aac:	4656      	mov	r6, sl
 8007aae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ab2:	f7f9 f881 	bl	8000bb8 <__aeabi_d2iz>
 8007ab6:	4605      	mov	r5, r0
 8007ab8:	f7f8 fd64 	bl	8000584 <__aeabi_i2d>
 8007abc:	4602      	mov	r2, r0
 8007abe:	460b      	mov	r3, r1
 8007ac0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ac4:	f7f8 fc10 	bl	80002e8 <__aeabi_dsub>
 8007ac8:	3530      	adds	r5, #48	@ 0x30
 8007aca:	4602      	mov	r2, r0
 8007acc:	460b      	mov	r3, r1
 8007ace:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007ad2:	f806 5b01 	strb.w	r5, [r6], #1
 8007ad6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007ada:	f7f9 f82f 	bl	8000b3c <__aeabi_dcmplt>
 8007ade:	2800      	cmp	r0, #0
 8007ae0:	d171      	bne.n	8007bc6 <_dtoa_r+0x65e>
 8007ae2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ae6:	4911      	ldr	r1, [pc, #68]	@ (8007b2c <_dtoa_r+0x5c4>)
 8007ae8:	2000      	movs	r0, #0
 8007aea:	f7f8 fbfd 	bl	80002e8 <__aeabi_dsub>
 8007aee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007af2:	f7f9 f823 	bl	8000b3c <__aeabi_dcmplt>
 8007af6:	2800      	cmp	r0, #0
 8007af8:	f040 8095 	bne.w	8007c26 <_dtoa_r+0x6be>
 8007afc:	42a6      	cmp	r6, r4
 8007afe:	f43f af50 	beq.w	80079a2 <_dtoa_r+0x43a>
 8007b02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007b06:	4b0a      	ldr	r3, [pc, #40]	@ (8007b30 <_dtoa_r+0x5c8>)
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f7f8 fda5 	bl	8000658 <__aeabi_dmul>
 8007b0e:	4b08      	ldr	r3, [pc, #32]	@ (8007b30 <_dtoa_r+0x5c8>)
 8007b10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007b14:	2200      	movs	r2, #0
 8007b16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b1a:	f7f8 fd9d 	bl	8000658 <__aeabi_dmul>
 8007b1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b22:	e7c4      	b.n	8007aae <_dtoa_r+0x546>
 8007b24:	080096d0 	.word	0x080096d0
 8007b28:	080096a8 	.word	0x080096a8
 8007b2c:	3ff00000 	.word	0x3ff00000
 8007b30:	40240000 	.word	0x40240000
 8007b34:	401c0000 	.word	0x401c0000
 8007b38:	40140000 	.word	0x40140000
 8007b3c:	3fe00000 	.word	0x3fe00000
 8007b40:	4631      	mov	r1, r6
 8007b42:	4628      	mov	r0, r5
 8007b44:	f7f8 fd88 	bl	8000658 <__aeabi_dmul>
 8007b48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007b4c:	9415      	str	r4, [sp, #84]	@ 0x54
 8007b4e:	4656      	mov	r6, sl
 8007b50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b54:	f7f9 f830 	bl	8000bb8 <__aeabi_d2iz>
 8007b58:	4605      	mov	r5, r0
 8007b5a:	f7f8 fd13 	bl	8000584 <__aeabi_i2d>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	460b      	mov	r3, r1
 8007b62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b66:	f7f8 fbbf 	bl	80002e8 <__aeabi_dsub>
 8007b6a:	3530      	adds	r5, #48	@ 0x30
 8007b6c:	f806 5b01 	strb.w	r5, [r6], #1
 8007b70:	4602      	mov	r2, r0
 8007b72:	460b      	mov	r3, r1
 8007b74:	42a6      	cmp	r6, r4
 8007b76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007b7a:	f04f 0200 	mov.w	r2, #0
 8007b7e:	d124      	bne.n	8007bca <_dtoa_r+0x662>
 8007b80:	4bac      	ldr	r3, [pc, #688]	@ (8007e34 <_dtoa_r+0x8cc>)
 8007b82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007b86:	f7f8 fbb1 	bl	80002ec <__adddf3>
 8007b8a:	4602      	mov	r2, r0
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b92:	f7f8 fff1 	bl	8000b78 <__aeabi_dcmpgt>
 8007b96:	2800      	cmp	r0, #0
 8007b98:	d145      	bne.n	8007c26 <_dtoa_r+0x6be>
 8007b9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007b9e:	49a5      	ldr	r1, [pc, #660]	@ (8007e34 <_dtoa_r+0x8cc>)
 8007ba0:	2000      	movs	r0, #0
 8007ba2:	f7f8 fba1 	bl	80002e8 <__aeabi_dsub>
 8007ba6:	4602      	mov	r2, r0
 8007ba8:	460b      	mov	r3, r1
 8007baa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bae:	f7f8 ffc5 	bl	8000b3c <__aeabi_dcmplt>
 8007bb2:	2800      	cmp	r0, #0
 8007bb4:	f43f aef5 	beq.w	80079a2 <_dtoa_r+0x43a>
 8007bb8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007bba:	1e73      	subs	r3, r6, #1
 8007bbc:	9315      	str	r3, [sp, #84]	@ 0x54
 8007bbe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007bc2:	2b30      	cmp	r3, #48	@ 0x30
 8007bc4:	d0f8      	beq.n	8007bb8 <_dtoa_r+0x650>
 8007bc6:	9f04      	ldr	r7, [sp, #16]
 8007bc8:	e73e      	b.n	8007a48 <_dtoa_r+0x4e0>
 8007bca:	4b9b      	ldr	r3, [pc, #620]	@ (8007e38 <_dtoa_r+0x8d0>)
 8007bcc:	f7f8 fd44 	bl	8000658 <__aeabi_dmul>
 8007bd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bd4:	e7bc      	b.n	8007b50 <_dtoa_r+0x5e8>
 8007bd6:	d10c      	bne.n	8007bf2 <_dtoa_r+0x68a>
 8007bd8:	4b98      	ldr	r3, [pc, #608]	@ (8007e3c <_dtoa_r+0x8d4>)
 8007bda:	2200      	movs	r2, #0
 8007bdc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007be0:	f7f8 fd3a 	bl	8000658 <__aeabi_dmul>
 8007be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007be8:	f7f8 ffbc 	bl	8000b64 <__aeabi_dcmpge>
 8007bec:	2800      	cmp	r0, #0
 8007bee:	f000 8157 	beq.w	8007ea0 <_dtoa_r+0x938>
 8007bf2:	2400      	movs	r4, #0
 8007bf4:	4625      	mov	r5, r4
 8007bf6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007bf8:	43db      	mvns	r3, r3
 8007bfa:	9304      	str	r3, [sp, #16]
 8007bfc:	4656      	mov	r6, sl
 8007bfe:	2700      	movs	r7, #0
 8007c00:	4621      	mov	r1, r4
 8007c02:	4658      	mov	r0, fp
 8007c04:	f000 fbb4 	bl	8008370 <_Bfree>
 8007c08:	2d00      	cmp	r5, #0
 8007c0a:	d0dc      	beq.n	8007bc6 <_dtoa_r+0x65e>
 8007c0c:	b12f      	cbz	r7, 8007c1a <_dtoa_r+0x6b2>
 8007c0e:	42af      	cmp	r7, r5
 8007c10:	d003      	beq.n	8007c1a <_dtoa_r+0x6b2>
 8007c12:	4639      	mov	r1, r7
 8007c14:	4658      	mov	r0, fp
 8007c16:	f000 fbab 	bl	8008370 <_Bfree>
 8007c1a:	4629      	mov	r1, r5
 8007c1c:	4658      	mov	r0, fp
 8007c1e:	f000 fba7 	bl	8008370 <_Bfree>
 8007c22:	e7d0      	b.n	8007bc6 <_dtoa_r+0x65e>
 8007c24:	9704      	str	r7, [sp, #16]
 8007c26:	4633      	mov	r3, r6
 8007c28:	461e      	mov	r6, r3
 8007c2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c2e:	2a39      	cmp	r2, #57	@ 0x39
 8007c30:	d107      	bne.n	8007c42 <_dtoa_r+0x6da>
 8007c32:	459a      	cmp	sl, r3
 8007c34:	d1f8      	bne.n	8007c28 <_dtoa_r+0x6c0>
 8007c36:	9a04      	ldr	r2, [sp, #16]
 8007c38:	3201      	adds	r2, #1
 8007c3a:	9204      	str	r2, [sp, #16]
 8007c3c:	2230      	movs	r2, #48	@ 0x30
 8007c3e:	f88a 2000 	strb.w	r2, [sl]
 8007c42:	781a      	ldrb	r2, [r3, #0]
 8007c44:	3201      	adds	r2, #1
 8007c46:	701a      	strb	r2, [r3, #0]
 8007c48:	e7bd      	b.n	8007bc6 <_dtoa_r+0x65e>
 8007c4a:	4b7b      	ldr	r3, [pc, #492]	@ (8007e38 <_dtoa_r+0x8d0>)
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f7f8 fd03 	bl	8000658 <__aeabi_dmul>
 8007c52:	2200      	movs	r2, #0
 8007c54:	2300      	movs	r3, #0
 8007c56:	4604      	mov	r4, r0
 8007c58:	460d      	mov	r5, r1
 8007c5a:	f7f8 ff65 	bl	8000b28 <__aeabi_dcmpeq>
 8007c5e:	2800      	cmp	r0, #0
 8007c60:	f43f aebb 	beq.w	80079da <_dtoa_r+0x472>
 8007c64:	e6f0      	b.n	8007a48 <_dtoa_r+0x4e0>
 8007c66:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007c68:	2a00      	cmp	r2, #0
 8007c6a:	f000 80db 	beq.w	8007e24 <_dtoa_r+0x8bc>
 8007c6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c70:	2a01      	cmp	r2, #1
 8007c72:	f300 80bf 	bgt.w	8007df4 <_dtoa_r+0x88c>
 8007c76:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007c78:	2a00      	cmp	r2, #0
 8007c7a:	f000 80b7 	beq.w	8007dec <_dtoa_r+0x884>
 8007c7e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007c82:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007c84:	4646      	mov	r6, r8
 8007c86:	9a08      	ldr	r2, [sp, #32]
 8007c88:	2101      	movs	r1, #1
 8007c8a:	441a      	add	r2, r3
 8007c8c:	4658      	mov	r0, fp
 8007c8e:	4498      	add	r8, r3
 8007c90:	9208      	str	r2, [sp, #32]
 8007c92:	f000 fc21 	bl	80084d8 <__i2b>
 8007c96:	4605      	mov	r5, r0
 8007c98:	b15e      	cbz	r6, 8007cb2 <_dtoa_r+0x74a>
 8007c9a:	9b08      	ldr	r3, [sp, #32]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	dd08      	ble.n	8007cb2 <_dtoa_r+0x74a>
 8007ca0:	42b3      	cmp	r3, r6
 8007ca2:	9a08      	ldr	r2, [sp, #32]
 8007ca4:	bfa8      	it	ge
 8007ca6:	4633      	movge	r3, r6
 8007ca8:	eba8 0803 	sub.w	r8, r8, r3
 8007cac:	1af6      	subs	r6, r6, r3
 8007cae:	1ad3      	subs	r3, r2, r3
 8007cb0:	9308      	str	r3, [sp, #32]
 8007cb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007cb4:	b1f3      	cbz	r3, 8007cf4 <_dtoa_r+0x78c>
 8007cb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	f000 80b7 	beq.w	8007e2c <_dtoa_r+0x8c4>
 8007cbe:	b18c      	cbz	r4, 8007ce4 <_dtoa_r+0x77c>
 8007cc0:	4629      	mov	r1, r5
 8007cc2:	4622      	mov	r2, r4
 8007cc4:	4658      	mov	r0, fp
 8007cc6:	f000 fcc7 	bl	8008658 <__pow5mult>
 8007cca:	464a      	mov	r2, r9
 8007ccc:	4601      	mov	r1, r0
 8007cce:	4605      	mov	r5, r0
 8007cd0:	4658      	mov	r0, fp
 8007cd2:	f000 fc17 	bl	8008504 <__multiply>
 8007cd6:	4649      	mov	r1, r9
 8007cd8:	9004      	str	r0, [sp, #16]
 8007cda:	4658      	mov	r0, fp
 8007cdc:	f000 fb48 	bl	8008370 <_Bfree>
 8007ce0:	9b04      	ldr	r3, [sp, #16]
 8007ce2:	4699      	mov	r9, r3
 8007ce4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ce6:	1b1a      	subs	r2, r3, r4
 8007ce8:	d004      	beq.n	8007cf4 <_dtoa_r+0x78c>
 8007cea:	4649      	mov	r1, r9
 8007cec:	4658      	mov	r0, fp
 8007cee:	f000 fcb3 	bl	8008658 <__pow5mult>
 8007cf2:	4681      	mov	r9, r0
 8007cf4:	2101      	movs	r1, #1
 8007cf6:	4658      	mov	r0, fp
 8007cf8:	f000 fbee 	bl	80084d8 <__i2b>
 8007cfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007cfe:	4604      	mov	r4, r0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	f000 81cf 	beq.w	80080a4 <_dtoa_r+0xb3c>
 8007d06:	461a      	mov	r2, r3
 8007d08:	4601      	mov	r1, r0
 8007d0a:	4658      	mov	r0, fp
 8007d0c:	f000 fca4 	bl	8008658 <__pow5mult>
 8007d10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	4604      	mov	r4, r0
 8007d16:	f300 8095 	bgt.w	8007e44 <_dtoa_r+0x8dc>
 8007d1a:	9b02      	ldr	r3, [sp, #8]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	f040 8087 	bne.w	8007e30 <_dtoa_r+0x8c8>
 8007d22:	9b03      	ldr	r3, [sp, #12]
 8007d24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	f040 8089 	bne.w	8007e40 <_dtoa_r+0x8d8>
 8007d2e:	9b03      	ldr	r3, [sp, #12]
 8007d30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007d34:	0d1b      	lsrs	r3, r3, #20
 8007d36:	051b      	lsls	r3, r3, #20
 8007d38:	b12b      	cbz	r3, 8007d46 <_dtoa_r+0x7de>
 8007d3a:	9b08      	ldr	r3, [sp, #32]
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	9308      	str	r3, [sp, #32]
 8007d40:	f108 0801 	add.w	r8, r8, #1
 8007d44:	2301      	movs	r3, #1
 8007d46:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	f000 81b0 	beq.w	80080b0 <_dtoa_r+0xb48>
 8007d50:	6923      	ldr	r3, [r4, #16]
 8007d52:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007d56:	6918      	ldr	r0, [r3, #16]
 8007d58:	f000 fb72 	bl	8008440 <__hi0bits>
 8007d5c:	f1c0 0020 	rsb	r0, r0, #32
 8007d60:	9b08      	ldr	r3, [sp, #32]
 8007d62:	4418      	add	r0, r3
 8007d64:	f010 001f 	ands.w	r0, r0, #31
 8007d68:	d077      	beq.n	8007e5a <_dtoa_r+0x8f2>
 8007d6a:	f1c0 0320 	rsb	r3, r0, #32
 8007d6e:	2b04      	cmp	r3, #4
 8007d70:	dd6b      	ble.n	8007e4a <_dtoa_r+0x8e2>
 8007d72:	9b08      	ldr	r3, [sp, #32]
 8007d74:	f1c0 001c 	rsb	r0, r0, #28
 8007d78:	4403      	add	r3, r0
 8007d7a:	4480      	add	r8, r0
 8007d7c:	4406      	add	r6, r0
 8007d7e:	9308      	str	r3, [sp, #32]
 8007d80:	f1b8 0f00 	cmp.w	r8, #0
 8007d84:	dd05      	ble.n	8007d92 <_dtoa_r+0x82a>
 8007d86:	4649      	mov	r1, r9
 8007d88:	4642      	mov	r2, r8
 8007d8a:	4658      	mov	r0, fp
 8007d8c:	f000 fcbe 	bl	800870c <__lshift>
 8007d90:	4681      	mov	r9, r0
 8007d92:	9b08      	ldr	r3, [sp, #32]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	dd05      	ble.n	8007da4 <_dtoa_r+0x83c>
 8007d98:	4621      	mov	r1, r4
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	4658      	mov	r0, fp
 8007d9e:	f000 fcb5 	bl	800870c <__lshift>
 8007da2:	4604      	mov	r4, r0
 8007da4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d059      	beq.n	8007e5e <_dtoa_r+0x8f6>
 8007daa:	4621      	mov	r1, r4
 8007dac:	4648      	mov	r0, r9
 8007dae:	f000 fd19 	bl	80087e4 <__mcmp>
 8007db2:	2800      	cmp	r0, #0
 8007db4:	da53      	bge.n	8007e5e <_dtoa_r+0x8f6>
 8007db6:	1e7b      	subs	r3, r7, #1
 8007db8:	9304      	str	r3, [sp, #16]
 8007dba:	4649      	mov	r1, r9
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	220a      	movs	r2, #10
 8007dc0:	4658      	mov	r0, fp
 8007dc2:	f000 faf7 	bl	80083b4 <__multadd>
 8007dc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007dc8:	4681      	mov	r9, r0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	f000 8172 	beq.w	80080b4 <_dtoa_r+0xb4c>
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	4629      	mov	r1, r5
 8007dd4:	220a      	movs	r2, #10
 8007dd6:	4658      	mov	r0, fp
 8007dd8:	f000 faec 	bl	80083b4 <__multadd>
 8007ddc:	9b00      	ldr	r3, [sp, #0]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	4605      	mov	r5, r0
 8007de2:	dc67      	bgt.n	8007eb4 <_dtoa_r+0x94c>
 8007de4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007de6:	2b02      	cmp	r3, #2
 8007de8:	dc41      	bgt.n	8007e6e <_dtoa_r+0x906>
 8007dea:	e063      	b.n	8007eb4 <_dtoa_r+0x94c>
 8007dec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007dee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007df2:	e746      	b.n	8007c82 <_dtoa_r+0x71a>
 8007df4:	9b07      	ldr	r3, [sp, #28]
 8007df6:	1e5c      	subs	r4, r3, #1
 8007df8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007dfa:	42a3      	cmp	r3, r4
 8007dfc:	bfbf      	itttt	lt
 8007dfe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007e00:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007e02:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007e04:	1ae3      	sublt	r3, r4, r3
 8007e06:	bfb4      	ite	lt
 8007e08:	18d2      	addlt	r2, r2, r3
 8007e0a:	1b1c      	subge	r4, r3, r4
 8007e0c:	9b07      	ldr	r3, [sp, #28]
 8007e0e:	bfbc      	itt	lt
 8007e10:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007e12:	2400      	movlt	r4, #0
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	bfb5      	itete	lt
 8007e18:	eba8 0603 	sublt.w	r6, r8, r3
 8007e1c:	9b07      	ldrge	r3, [sp, #28]
 8007e1e:	2300      	movlt	r3, #0
 8007e20:	4646      	movge	r6, r8
 8007e22:	e730      	b.n	8007c86 <_dtoa_r+0x71e>
 8007e24:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007e26:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007e28:	4646      	mov	r6, r8
 8007e2a:	e735      	b.n	8007c98 <_dtoa_r+0x730>
 8007e2c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007e2e:	e75c      	b.n	8007cea <_dtoa_r+0x782>
 8007e30:	2300      	movs	r3, #0
 8007e32:	e788      	b.n	8007d46 <_dtoa_r+0x7de>
 8007e34:	3fe00000 	.word	0x3fe00000
 8007e38:	40240000 	.word	0x40240000
 8007e3c:	40140000 	.word	0x40140000
 8007e40:	9b02      	ldr	r3, [sp, #8]
 8007e42:	e780      	b.n	8007d46 <_dtoa_r+0x7de>
 8007e44:	2300      	movs	r3, #0
 8007e46:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e48:	e782      	b.n	8007d50 <_dtoa_r+0x7e8>
 8007e4a:	d099      	beq.n	8007d80 <_dtoa_r+0x818>
 8007e4c:	9a08      	ldr	r2, [sp, #32]
 8007e4e:	331c      	adds	r3, #28
 8007e50:	441a      	add	r2, r3
 8007e52:	4498      	add	r8, r3
 8007e54:	441e      	add	r6, r3
 8007e56:	9208      	str	r2, [sp, #32]
 8007e58:	e792      	b.n	8007d80 <_dtoa_r+0x818>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	e7f6      	b.n	8007e4c <_dtoa_r+0x8e4>
 8007e5e:	9b07      	ldr	r3, [sp, #28]
 8007e60:	9704      	str	r7, [sp, #16]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	dc20      	bgt.n	8007ea8 <_dtoa_r+0x940>
 8007e66:	9300      	str	r3, [sp, #0]
 8007e68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e6a:	2b02      	cmp	r3, #2
 8007e6c:	dd1e      	ble.n	8007eac <_dtoa_r+0x944>
 8007e6e:	9b00      	ldr	r3, [sp, #0]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	f47f aec0 	bne.w	8007bf6 <_dtoa_r+0x68e>
 8007e76:	4621      	mov	r1, r4
 8007e78:	2205      	movs	r2, #5
 8007e7a:	4658      	mov	r0, fp
 8007e7c:	f000 fa9a 	bl	80083b4 <__multadd>
 8007e80:	4601      	mov	r1, r0
 8007e82:	4604      	mov	r4, r0
 8007e84:	4648      	mov	r0, r9
 8007e86:	f000 fcad 	bl	80087e4 <__mcmp>
 8007e8a:	2800      	cmp	r0, #0
 8007e8c:	f77f aeb3 	ble.w	8007bf6 <_dtoa_r+0x68e>
 8007e90:	4656      	mov	r6, sl
 8007e92:	2331      	movs	r3, #49	@ 0x31
 8007e94:	f806 3b01 	strb.w	r3, [r6], #1
 8007e98:	9b04      	ldr	r3, [sp, #16]
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	9304      	str	r3, [sp, #16]
 8007e9e:	e6ae      	b.n	8007bfe <_dtoa_r+0x696>
 8007ea0:	9c07      	ldr	r4, [sp, #28]
 8007ea2:	9704      	str	r7, [sp, #16]
 8007ea4:	4625      	mov	r5, r4
 8007ea6:	e7f3      	b.n	8007e90 <_dtoa_r+0x928>
 8007ea8:	9b07      	ldr	r3, [sp, #28]
 8007eaa:	9300      	str	r3, [sp, #0]
 8007eac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	f000 8104 	beq.w	80080bc <_dtoa_r+0xb54>
 8007eb4:	2e00      	cmp	r6, #0
 8007eb6:	dd05      	ble.n	8007ec4 <_dtoa_r+0x95c>
 8007eb8:	4629      	mov	r1, r5
 8007eba:	4632      	mov	r2, r6
 8007ebc:	4658      	mov	r0, fp
 8007ebe:	f000 fc25 	bl	800870c <__lshift>
 8007ec2:	4605      	mov	r5, r0
 8007ec4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d05a      	beq.n	8007f80 <_dtoa_r+0xa18>
 8007eca:	6869      	ldr	r1, [r5, #4]
 8007ecc:	4658      	mov	r0, fp
 8007ece:	f000 fa0f 	bl	80082f0 <_Balloc>
 8007ed2:	4606      	mov	r6, r0
 8007ed4:	b928      	cbnz	r0, 8007ee2 <_dtoa_r+0x97a>
 8007ed6:	4b84      	ldr	r3, [pc, #528]	@ (80080e8 <_dtoa_r+0xb80>)
 8007ed8:	4602      	mov	r2, r0
 8007eda:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007ede:	f7ff bb5a 	b.w	8007596 <_dtoa_r+0x2e>
 8007ee2:	692a      	ldr	r2, [r5, #16]
 8007ee4:	3202      	adds	r2, #2
 8007ee6:	0092      	lsls	r2, r2, #2
 8007ee8:	f105 010c 	add.w	r1, r5, #12
 8007eec:	300c      	adds	r0, #12
 8007eee:	f000 ffaf 	bl	8008e50 <memcpy>
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	4631      	mov	r1, r6
 8007ef6:	4658      	mov	r0, fp
 8007ef8:	f000 fc08 	bl	800870c <__lshift>
 8007efc:	f10a 0301 	add.w	r3, sl, #1
 8007f00:	9307      	str	r3, [sp, #28]
 8007f02:	9b00      	ldr	r3, [sp, #0]
 8007f04:	4453      	add	r3, sl
 8007f06:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f08:	9b02      	ldr	r3, [sp, #8]
 8007f0a:	f003 0301 	and.w	r3, r3, #1
 8007f0e:	462f      	mov	r7, r5
 8007f10:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f12:	4605      	mov	r5, r0
 8007f14:	9b07      	ldr	r3, [sp, #28]
 8007f16:	4621      	mov	r1, r4
 8007f18:	3b01      	subs	r3, #1
 8007f1a:	4648      	mov	r0, r9
 8007f1c:	9300      	str	r3, [sp, #0]
 8007f1e:	f7ff fa98 	bl	8007452 <quorem>
 8007f22:	4639      	mov	r1, r7
 8007f24:	9002      	str	r0, [sp, #8]
 8007f26:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007f2a:	4648      	mov	r0, r9
 8007f2c:	f000 fc5a 	bl	80087e4 <__mcmp>
 8007f30:	462a      	mov	r2, r5
 8007f32:	9008      	str	r0, [sp, #32]
 8007f34:	4621      	mov	r1, r4
 8007f36:	4658      	mov	r0, fp
 8007f38:	f000 fc70 	bl	800881c <__mdiff>
 8007f3c:	68c2      	ldr	r2, [r0, #12]
 8007f3e:	4606      	mov	r6, r0
 8007f40:	bb02      	cbnz	r2, 8007f84 <_dtoa_r+0xa1c>
 8007f42:	4601      	mov	r1, r0
 8007f44:	4648      	mov	r0, r9
 8007f46:	f000 fc4d 	bl	80087e4 <__mcmp>
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	4631      	mov	r1, r6
 8007f4e:	4658      	mov	r0, fp
 8007f50:	920e      	str	r2, [sp, #56]	@ 0x38
 8007f52:	f000 fa0d 	bl	8008370 <_Bfree>
 8007f56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f58:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007f5a:	9e07      	ldr	r6, [sp, #28]
 8007f5c:	ea43 0102 	orr.w	r1, r3, r2
 8007f60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f62:	4319      	orrs	r1, r3
 8007f64:	d110      	bne.n	8007f88 <_dtoa_r+0xa20>
 8007f66:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007f6a:	d029      	beq.n	8007fc0 <_dtoa_r+0xa58>
 8007f6c:	9b08      	ldr	r3, [sp, #32]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	dd02      	ble.n	8007f78 <_dtoa_r+0xa10>
 8007f72:	9b02      	ldr	r3, [sp, #8]
 8007f74:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007f78:	9b00      	ldr	r3, [sp, #0]
 8007f7a:	f883 8000 	strb.w	r8, [r3]
 8007f7e:	e63f      	b.n	8007c00 <_dtoa_r+0x698>
 8007f80:	4628      	mov	r0, r5
 8007f82:	e7bb      	b.n	8007efc <_dtoa_r+0x994>
 8007f84:	2201      	movs	r2, #1
 8007f86:	e7e1      	b.n	8007f4c <_dtoa_r+0x9e4>
 8007f88:	9b08      	ldr	r3, [sp, #32]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	db04      	blt.n	8007f98 <_dtoa_r+0xa30>
 8007f8e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007f90:	430b      	orrs	r3, r1
 8007f92:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007f94:	430b      	orrs	r3, r1
 8007f96:	d120      	bne.n	8007fda <_dtoa_r+0xa72>
 8007f98:	2a00      	cmp	r2, #0
 8007f9a:	dded      	ble.n	8007f78 <_dtoa_r+0xa10>
 8007f9c:	4649      	mov	r1, r9
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	4658      	mov	r0, fp
 8007fa2:	f000 fbb3 	bl	800870c <__lshift>
 8007fa6:	4621      	mov	r1, r4
 8007fa8:	4681      	mov	r9, r0
 8007faa:	f000 fc1b 	bl	80087e4 <__mcmp>
 8007fae:	2800      	cmp	r0, #0
 8007fb0:	dc03      	bgt.n	8007fba <_dtoa_r+0xa52>
 8007fb2:	d1e1      	bne.n	8007f78 <_dtoa_r+0xa10>
 8007fb4:	f018 0f01 	tst.w	r8, #1
 8007fb8:	d0de      	beq.n	8007f78 <_dtoa_r+0xa10>
 8007fba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007fbe:	d1d8      	bne.n	8007f72 <_dtoa_r+0xa0a>
 8007fc0:	9a00      	ldr	r2, [sp, #0]
 8007fc2:	2339      	movs	r3, #57	@ 0x39
 8007fc4:	7013      	strb	r3, [r2, #0]
 8007fc6:	4633      	mov	r3, r6
 8007fc8:	461e      	mov	r6, r3
 8007fca:	3b01      	subs	r3, #1
 8007fcc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007fd0:	2a39      	cmp	r2, #57	@ 0x39
 8007fd2:	d052      	beq.n	800807a <_dtoa_r+0xb12>
 8007fd4:	3201      	adds	r2, #1
 8007fd6:	701a      	strb	r2, [r3, #0]
 8007fd8:	e612      	b.n	8007c00 <_dtoa_r+0x698>
 8007fda:	2a00      	cmp	r2, #0
 8007fdc:	dd07      	ble.n	8007fee <_dtoa_r+0xa86>
 8007fde:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007fe2:	d0ed      	beq.n	8007fc0 <_dtoa_r+0xa58>
 8007fe4:	9a00      	ldr	r2, [sp, #0]
 8007fe6:	f108 0301 	add.w	r3, r8, #1
 8007fea:	7013      	strb	r3, [r2, #0]
 8007fec:	e608      	b.n	8007c00 <_dtoa_r+0x698>
 8007fee:	9b07      	ldr	r3, [sp, #28]
 8007ff0:	9a07      	ldr	r2, [sp, #28]
 8007ff2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007ff6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d028      	beq.n	800804e <_dtoa_r+0xae6>
 8007ffc:	4649      	mov	r1, r9
 8007ffe:	2300      	movs	r3, #0
 8008000:	220a      	movs	r2, #10
 8008002:	4658      	mov	r0, fp
 8008004:	f000 f9d6 	bl	80083b4 <__multadd>
 8008008:	42af      	cmp	r7, r5
 800800a:	4681      	mov	r9, r0
 800800c:	f04f 0300 	mov.w	r3, #0
 8008010:	f04f 020a 	mov.w	r2, #10
 8008014:	4639      	mov	r1, r7
 8008016:	4658      	mov	r0, fp
 8008018:	d107      	bne.n	800802a <_dtoa_r+0xac2>
 800801a:	f000 f9cb 	bl	80083b4 <__multadd>
 800801e:	4607      	mov	r7, r0
 8008020:	4605      	mov	r5, r0
 8008022:	9b07      	ldr	r3, [sp, #28]
 8008024:	3301      	adds	r3, #1
 8008026:	9307      	str	r3, [sp, #28]
 8008028:	e774      	b.n	8007f14 <_dtoa_r+0x9ac>
 800802a:	f000 f9c3 	bl	80083b4 <__multadd>
 800802e:	4629      	mov	r1, r5
 8008030:	4607      	mov	r7, r0
 8008032:	2300      	movs	r3, #0
 8008034:	220a      	movs	r2, #10
 8008036:	4658      	mov	r0, fp
 8008038:	f000 f9bc 	bl	80083b4 <__multadd>
 800803c:	4605      	mov	r5, r0
 800803e:	e7f0      	b.n	8008022 <_dtoa_r+0xaba>
 8008040:	9b00      	ldr	r3, [sp, #0]
 8008042:	2b00      	cmp	r3, #0
 8008044:	bfcc      	ite	gt
 8008046:	461e      	movgt	r6, r3
 8008048:	2601      	movle	r6, #1
 800804a:	4456      	add	r6, sl
 800804c:	2700      	movs	r7, #0
 800804e:	4649      	mov	r1, r9
 8008050:	2201      	movs	r2, #1
 8008052:	4658      	mov	r0, fp
 8008054:	f000 fb5a 	bl	800870c <__lshift>
 8008058:	4621      	mov	r1, r4
 800805a:	4681      	mov	r9, r0
 800805c:	f000 fbc2 	bl	80087e4 <__mcmp>
 8008060:	2800      	cmp	r0, #0
 8008062:	dcb0      	bgt.n	8007fc6 <_dtoa_r+0xa5e>
 8008064:	d102      	bne.n	800806c <_dtoa_r+0xb04>
 8008066:	f018 0f01 	tst.w	r8, #1
 800806a:	d1ac      	bne.n	8007fc6 <_dtoa_r+0xa5e>
 800806c:	4633      	mov	r3, r6
 800806e:	461e      	mov	r6, r3
 8008070:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008074:	2a30      	cmp	r2, #48	@ 0x30
 8008076:	d0fa      	beq.n	800806e <_dtoa_r+0xb06>
 8008078:	e5c2      	b.n	8007c00 <_dtoa_r+0x698>
 800807a:	459a      	cmp	sl, r3
 800807c:	d1a4      	bne.n	8007fc8 <_dtoa_r+0xa60>
 800807e:	9b04      	ldr	r3, [sp, #16]
 8008080:	3301      	adds	r3, #1
 8008082:	9304      	str	r3, [sp, #16]
 8008084:	2331      	movs	r3, #49	@ 0x31
 8008086:	f88a 3000 	strb.w	r3, [sl]
 800808a:	e5b9      	b.n	8007c00 <_dtoa_r+0x698>
 800808c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800808e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80080ec <_dtoa_r+0xb84>
 8008092:	b11b      	cbz	r3, 800809c <_dtoa_r+0xb34>
 8008094:	f10a 0308 	add.w	r3, sl, #8
 8008098:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800809a:	6013      	str	r3, [r2, #0]
 800809c:	4650      	mov	r0, sl
 800809e:	b019      	add	sp, #100	@ 0x64
 80080a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	f77f ae37 	ble.w	8007d1a <_dtoa_r+0x7b2>
 80080ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80080b0:	2001      	movs	r0, #1
 80080b2:	e655      	b.n	8007d60 <_dtoa_r+0x7f8>
 80080b4:	9b00      	ldr	r3, [sp, #0]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	f77f aed6 	ble.w	8007e68 <_dtoa_r+0x900>
 80080bc:	4656      	mov	r6, sl
 80080be:	4621      	mov	r1, r4
 80080c0:	4648      	mov	r0, r9
 80080c2:	f7ff f9c6 	bl	8007452 <quorem>
 80080c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80080ca:	f806 8b01 	strb.w	r8, [r6], #1
 80080ce:	9b00      	ldr	r3, [sp, #0]
 80080d0:	eba6 020a 	sub.w	r2, r6, sl
 80080d4:	4293      	cmp	r3, r2
 80080d6:	ddb3      	ble.n	8008040 <_dtoa_r+0xad8>
 80080d8:	4649      	mov	r1, r9
 80080da:	2300      	movs	r3, #0
 80080dc:	220a      	movs	r2, #10
 80080de:	4658      	mov	r0, fp
 80080e0:	f000 f968 	bl	80083b4 <__multadd>
 80080e4:	4681      	mov	r9, r0
 80080e6:	e7ea      	b.n	80080be <_dtoa_r+0xb56>
 80080e8:	0800962c 	.word	0x0800962c
 80080ec:	080095b0 	.word	0x080095b0

080080f0 <_free_r>:
 80080f0:	b538      	push	{r3, r4, r5, lr}
 80080f2:	4605      	mov	r5, r0
 80080f4:	2900      	cmp	r1, #0
 80080f6:	d041      	beq.n	800817c <_free_r+0x8c>
 80080f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080fc:	1f0c      	subs	r4, r1, #4
 80080fe:	2b00      	cmp	r3, #0
 8008100:	bfb8      	it	lt
 8008102:	18e4      	addlt	r4, r4, r3
 8008104:	f000 f8e8 	bl	80082d8 <__malloc_lock>
 8008108:	4a1d      	ldr	r2, [pc, #116]	@ (8008180 <_free_r+0x90>)
 800810a:	6813      	ldr	r3, [r2, #0]
 800810c:	b933      	cbnz	r3, 800811c <_free_r+0x2c>
 800810e:	6063      	str	r3, [r4, #4]
 8008110:	6014      	str	r4, [r2, #0]
 8008112:	4628      	mov	r0, r5
 8008114:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008118:	f000 b8e4 	b.w	80082e4 <__malloc_unlock>
 800811c:	42a3      	cmp	r3, r4
 800811e:	d908      	bls.n	8008132 <_free_r+0x42>
 8008120:	6820      	ldr	r0, [r4, #0]
 8008122:	1821      	adds	r1, r4, r0
 8008124:	428b      	cmp	r3, r1
 8008126:	bf01      	itttt	eq
 8008128:	6819      	ldreq	r1, [r3, #0]
 800812a:	685b      	ldreq	r3, [r3, #4]
 800812c:	1809      	addeq	r1, r1, r0
 800812e:	6021      	streq	r1, [r4, #0]
 8008130:	e7ed      	b.n	800810e <_free_r+0x1e>
 8008132:	461a      	mov	r2, r3
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	b10b      	cbz	r3, 800813c <_free_r+0x4c>
 8008138:	42a3      	cmp	r3, r4
 800813a:	d9fa      	bls.n	8008132 <_free_r+0x42>
 800813c:	6811      	ldr	r1, [r2, #0]
 800813e:	1850      	adds	r0, r2, r1
 8008140:	42a0      	cmp	r0, r4
 8008142:	d10b      	bne.n	800815c <_free_r+0x6c>
 8008144:	6820      	ldr	r0, [r4, #0]
 8008146:	4401      	add	r1, r0
 8008148:	1850      	adds	r0, r2, r1
 800814a:	4283      	cmp	r3, r0
 800814c:	6011      	str	r1, [r2, #0]
 800814e:	d1e0      	bne.n	8008112 <_free_r+0x22>
 8008150:	6818      	ldr	r0, [r3, #0]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	6053      	str	r3, [r2, #4]
 8008156:	4408      	add	r0, r1
 8008158:	6010      	str	r0, [r2, #0]
 800815a:	e7da      	b.n	8008112 <_free_r+0x22>
 800815c:	d902      	bls.n	8008164 <_free_r+0x74>
 800815e:	230c      	movs	r3, #12
 8008160:	602b      	str	r3, [r5, #0]
 8008162:	e7d6      	b.n	8008112 <_free_r+0x22>
 8008164:	6820      	ldr	r0, [r4, #0]
 8008166:	1821      	adds	r1, r4, r0
 8008168:	428b      	cmp	r3, r1
 800816a:	bf04      	itt	eq
 800816c:	6819      	ldreq	r1, [r3, #0]
 800816e:	685b      	ldreq	r3, [r3, #4]
 8008170:	6063      	str	r3, [r4, #4]
 8008172:	bf04      	itt	eq
 8008174:	1809      	addeq	r1, r1, r0
 8008176:	6021      	streq	r1, [r4, #0]
 8008178:	6054      	str	r4, [r2, #4]
 800817a:	e7ca      	b.n	8008112 <_free_r+0x22>
 800817c:	bd38      	pop	{r3, r4, r5, pc}
 800817e:	bf00      	nop
 8008180:	20000584 	.word	0x20000584

08008184 <malloc>:
 8008184:	4b02      	ldr	r3, [pc, #8]	@ (8008190 <malloc+0xc>)
 8008186:	4601      	mov	r1, r0
 8008188:	6818      	ldr	r0, [r3, #0]
 800818a:	f000 b825 	b.w	80081d8 <_malloc_r>
 800818e:	bf00      	nop
 8008190:	20000020 	.word	0x20000020

08008194 <sbrk_aligned>:
 8008194:	b570      	push	{r4, r5, r6, lr}
 8008196:	4e0f      	ldr	r6, [pc, #60]	@ (80081d4 <sbrk_aligned+0x40>)
 8008198:	460c      	mov	r4, r1
 800819a:	6831      	ldr	r1, [r6, #0]
 800819c:	4605      	mov	r5, r0
 800819e:	b911      	cbnz	r1, 80081a6 <sbrk_aligned+0x12>
 80081a0:	f000 fe46 	bl	8008e30 <_sbrk_r>
 80081a4:	6030      	str	r0, [r6, #0]
 80081a6:	4621      	mov	r1, r4
 80081a8:	4628      	mov	r0, r5
 80081aa:	f000 fe41 	bl	8008e30 <_sbrk_r>
 80081ae:	1c43      	adds	r3, r0, #1
 80081b0:	d103      	bne.n	80081ba <sbrk_aligned+0x26>
 80081b2:	f04f 34ff 	mov.w	r4, #4294967295
 80081b6:	4620      	mov	r0, r4
 80081b8:	bd70      	pop	{r4, r5, r6, pc}
 80081ba:	1cc4      	adds	r4, r0, #3
 80081bc:	f024 0403 	bic.w	r4, r4, #3
 80081c0:	42a0      	cmp	r0, r4
 80081c2:	d0f8      	beq.n	80081b6 <sbrk_aligned+0x22>
 80081c4:	1a21      	subs	r1, r4, r0
 80081c6:	4628      	mov	r0, r5
 80081c8:	f000 fe32 	bl	8008e30 <_sbrk_r>
 80081cc:	3001      	adds	r0, #1
 80081ce:	d1f2      	bne.n	80081b6 <sbrk_aligned+0x22>
 80081d0:	e7ef      	b.n	80081b2 <sbrk_aligned+0x1e>
 80081d2:	bf00      	nop
 80081d4:	20000580 	.word	0x20000580

080081d8 <_malloc_r>:
 80081d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081dc:	1ccd      	adds	r5, r1, #3
 80081de:	f025 0503 	bic.w	r5, r5, #3
 80081e2:	3508      	adds	r5, #8
 80081e4:	2d0c      	cmp	r5, #12
 80081e6:	bf38      	it	cc
 80081e8:	250c      	movcc	r5, #12
 80081ea:	2d00      	cmp	r5, #0
 80081ec:	4606      	mov	r6, r0
 80081ee:	db01      	blt.n	80081f4 <_malloc_r+0x1c>
 80081f0:	42a9      	cmp	r1, r5
 80081f2:	d904      	bls.n	80081fe <_malloc_r+0x26>
 80081f4:	230c      	movs	r3, #12
 80081f6:	6033      	str	r3, [r6, #0]
 80081f8:	2000      	movs	r0, #0
 80081fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80082d4 <_malloc_r+0xfc>
 8008202:	f000 f869 	bl	80082d8 <__malloc_lock>
 8008206:	f8d8 3000 	ldr.w	r3, [r8]
 800820a:	461c      	mov	r4, r3
 800820c:	bb44      	cbnz	r4, 8008260 <_malloc_r+0x88>
 800820e:	4629      	mov	r1, r5
 8008210:	4630      	mov	r0, r6
 8008212:	f7ff ffbf 	bl	8008194 <sbrk_aligned>
 8008216:	1c43      	adds	r3, r0, #1
 8008218:	4604      	mov	r4, r0
 800821a:	d158      	bne.n	80082ce <_malloc_r+0xf6>
 800821c:	f8d8 4000 	ldr.w	r4, [r8]
 8008220:	4627      	mov	r7, r4
 8008222:	2f00      	cmp	r7, #0
 8008224:	d143      	bne.n	80082ae <_malloc_r+0xd6>
 8008226:	2c00      	cmp	r4, #0
 8008228:	d04b      	beq.n	80082c2 <_malloc_r+0xea>
 800822a:	6823      	ldr	r3, [r4, #0]
 800822c:	4639      	mov	r1, r7
 800822e:	4630      	mov	r0, r6
 8008230:	eb04 0903 	add.w	r9, r4, r3
 8008234:	f000 fdfc 	bl	8008e30 <_sbrk_r>
 8008238:	4581      	cmp	r9, r0
 800823a:	d142      	bne.n	80082c2 <_malloc_r+0xea>
 800823c:	6821      	ldr	r1, [r4, #0]
 800823e:	1a6d      	subs	r5, r5, r1
 8008240:	4629      	mov	r1, r5
 8008242:	4630      	mov	r0, r6
 8008244:	f7ff ffa6 	bl	8008194 <sbrk_aligned>
 8008248:	3001      	adds	r0, #1
 800824a:	d03a      	beq.n	80082c2 <_malloc_r+0xea>
 800824c:	6823      	ldr	r3, [r4, #0]
 800824e:	442b      	add	r3, r5
 8008250:	6023      	str	r3, [r4, #0]
 8008252:	f8d8 3000 	ldr.w	r3, [r8]
 8008256:	685a      	ldr	r2, [r3, #4]
 8008258:	bb62      	cbnz	r2, 80082b4 <_malloc_r+0xdc>
 800825a:	f8c8 7000 	str.w	r7, [r8]
 800825e:	e00f      	b.n	8008280 <_malloc_r+0xa8>
 8008260:	6822      	ldr	r2, [r4, #0]
 8008262:	1b52      	subs	r2, r2, r5
 8008264:	d420      	bmi.n	80082a8 <_malloc_r+0xd0>
 8008266:	2a0b      	cmp	r2, #11
 8008268:	d917      	bls.n	800829a <_malloc_r+0xc2>
 800826a:	1961      	adds	r1, r4, r5
 800826c:	42a3      	cmp	r3, r4
 800826e:	6025      	str	r5, [r4, #0]
 8008270:	bf18      	it	ne
 8008272:	6059      	strne	r1, [r3, #4]
 8008274:	6863      	ldr	r3, [r4, #4]
 8008276:	bf08      	it	eq
 8008278:	f8c8 1000 	streq.w	r1, [r8]
 800827c:	5162      	str	r2, [r4, r5]
 800827e:	604b      	str	r3, [r1, #4]
 8008280:	4630      	mov	r0, r6
 8008282:	f000 f82f 	bl	80082e4 <__malloc_unlock>
 8008286:	f104 000b 	add.w	r0, r4, #11
 800828a:	1d23      	adds	r3, r4, #4
 800828c:	f020 0007 	bic.w	r0, r0, #7
 8008290:	1ac2      	subs	r2, r0, r3
 8008292:	bf1c      	itt	ne
 8008294:	1a1b      	subne	r3, r3, r0
 8008296:	50a3      	strne	r3, [r4, r2]
 8008298:	e7af      	b.n	80081fa <_malloc_r+0x22>
 800829a:	6862      	ldr	r2, [r4, #4]
 800829c:	42a3      	cmp	r3, r4
 800829e:	bf0c      	ite	eq
 80082a0:	f8c8 2000 	streq.w	r2, [r8]
 80082a4:	605a      	strne	r2, [r3, #4]
 80082a6:	e7eb      	b.n	8008280 <_malloc_r+0xa8>
 80082a8:	4623      	mov	r3, r4
 80082aa:	6864      	ldr	r4, [r4, #4]
 80082ac:	e7ae      	b.n	800820c <_malloc_r+0x34>
 80082ae:	463c      	mov	r4, r7
 80082b0:	687f      	ldr	r7, [r7, #4]
 80082b2:	e7b6      	b.n	8008222 <_malloc_r+0x4a>
 80082b4:	461a      	mov	r2, r3
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	42a3      	cmp	r3, r4
 80082ba:	d1fb      	bne.n	80082b4 <_malloc_r+0xdc>
 80082bc:	2300      	movs	r3, #0
 80082be:	6053      	str	r3, [r2, #4]
 80082c0:	e7de      	b.n	8008280 <_malloc_r+0xa8>
 80082c2:	230c      	movs	r3, #12
 80082c4:	6033      	str	r3, [r6, #0]
 80082c6:	4630      	mov	r0, r6
 80082c8:	f000 f80c 	bl	80082e4 <__malloc_unlock>
 80082cc:	e794      	b.n	80081f8 <_malloc_r+0x20>
 80082ce:	6005      	str	r5, [r0, #0]
 80082d0:	e7d6      	b.n	8008280 <_malloc_r+0xa8>
 80082d2:	bf00      	nop
 80082d4:	20000584 	.word	0x20000584

080082d8 <__malloc_lock>:
 80082d8:	4801      	ldr	r0, [pc, #4]	@ (80082e0 <__malloc_lock+0x8>)
 80082da:	f7ff b8b8 	b.w	800744e <__retarget_lock_acquire_recursive>
 80082de:	bf00      	nop
 80082e0:	2000057c 	.word	0x2000057c

080082e4 <__malloc_unlock>:
 80082e4:	4801      	ldr	r0, [pc, #4]	@ (80082ec <__malloc_unlock+0x8>)
 80082e6:	f7ff b8b3 	b.w	8007450 <__retarget_lock_release_recursive>
 80082ea:	bf00      	nop
 80082ec:	2000057c 	.word	0x2000057c

080082f0 <_Balloc>:
 80082f0:	b570      	push	{r4, r5, r6, lr}
 80082f2:	69c6      	ldr	r6, [r0, #28]
 80082f4:	4604      	mov	r4, r0
 80082f6:	460d      	mov	r5, r1
 80082f8:	b976      	cbnz	r6, 8008318 <_Balloc+0x28>
 80082fa:	2010      	movs	r0, #16
 80082fc:	f7ff ff42 	bl	8008184 <malloc>
 8008300:	4602      	mov	r2, r0
 8008302:	61e0      	str	r0, [r4, #28]
 8008304:	b920      	cbnz	r0, 8008310 <_Balloc+0x20>
 8008306:	4b18      	ldr	r3, [pc, #96]	@ (8008368 <_Balloc+0x78>)
 8008308:	4818      	ldr	r0, [pc, #96]	@ (800836c <_Balloc+0x7c>)
 800830a:	216b      	movs	r1, #107	@ 0x6b
 800830c:	f000 fdae 	bl	8008e6c <__assert_func>
 8008310:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008314:	6006      	str	r6, [r0, #0]
 8008316:	60c6      	str	r6, [r0, #12]
 8008318:	69e6      	ldr	r6, [r4, #28]
 800831a:	68f3      	ldr	r3, [r6, #12]
 800831c:	b183      	cbz	r3, 8008340 <_Balloc+0x50>
 800831e:	69e3      	ldr	r3, [r4, #28]
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008326:	b9b8      	cbnz	r0, 8008358 <_Balloc+0x68>
 8008328:	2101      	movs	r1, #1
 800832a:	fa01 f605 	lsl.w	r6, r1, r5
 800832e:	1d72      	adds	r2, r6, #5
 8008330:	0092      	lsls	r2, r2, #2
 8008332:	4620      	mov	r0, r4
 8008334:	f000 fdb8 	bl	8008ea8 <_calloc_r>
 8008338:	b160      	cbz	r0, 8008354 <_Balloc+0x64>
 800833a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800833e:	e00e      	b.n	800835e <_Balloc+0x6e>
 8008340:	2221      	movs	r2, #33	@ 0x21
 8008342:	2104      	movs	r1, #4
 8008344:	4620      	mov	r0, r4
 8008346:	f000 fdaf 	bl	8008ea8 <_calloc_r>
 800834a:	69e3      	ldr	r3, [r4, #28]
 800834c:	60f0      	str	r0, [r6, #12]
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d1e4      	bne.n	800831e <_Balloc+0x2e>
 8008354:	2000      	movs	r0, #0
 8008356:	bd70      	pop	{r4, r5, r6, pc}
 8008358:	6802      	ldr	r2, [r0, #0]
 800835a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800835e:	2300      	movs	r3, #0
 8008360:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008364:	e7f7      	b.n	8008356 <_Balloc+0x66>
 8008366:	bf00      	nop
 8008368:	080095bd 	.word	0x080095bd
 800836c:	0800963d 	.word	0x0800963d

08008370 <_Bfree>:
 8008370:	b570      	push	{r4, r5, r6, lr}
 8008372:	69c6      	ldr	r6, [r0, #28]
 8008374:	4605      	mov	r5, r0
 8008376:	460c      	mov	r4, r1
 8008378:	b976      	cbnz	r6, 8008398 <_Bfree+0x28>
 800837a:	2010      	movs	r0, #16
 800837c:	f7ff ff02 	bl	8008184 <malloc>
 8008380:	4602      	mov	r2, r0
 8008382:	61e8      	str	r0, [r5, #28]
 8008384:	b920      	cbnz	r0, 8008390 <_Bfree+0x20>
 8008386:	4b09      	ldr	r3, [pc, #36]	@ (80083ac <_Bfree+0x3c>)
 8008388:	4809      	ldr	r0, [pc, #36]	@ (80083b0 <_Bfree+0x40>)
 800838a:	218f      	movs	r1, #143	@ 0x8f
 800838c:	f000 fd6e 	bl	8008e6c <__assert_func>
 8008390:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008394:	6006      	str	r6, [r0, #0]
 8008396:	60c6      	str	r6, [r0, #12]
 8008398:	b13c      	cbz	r4, 80083aa <_Bfree+0x3a>
 800839a:	69eb      	ldr	r3, [r5, #28]
 800839c:	6862      	ldr	r2, [r4, #4]
 800839e:	68db      	ldr	r3, [r3, #12]
 80083a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80083a4:	6021      	str	r1, [r4, #0]
 80083a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80083aa:	bd70      	pop	{r4, r5, r6, pc}
 80083ac:	080095bd 	.word	0x080095bd
 80083b0:	0800963d 	.word	0x0800963d

080083b4 <__multadd>:
 80083b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083b8:	690d      	ldr	r5, [r1, #16]
 80083ba:	4607      	mov	r7, r0
 80083bc:	460c      	mov	r4, r1
 80083be:	461e      	mov	r6, r3
 80083c0:	f101 0c14 	add.w	ip, r1, #20
 80083c4:	2000      	movs	r0, #0
 80083c6:	f8dc 3000 	ldr.w	r3, [ip]
 80083ca:	b299      	uxth	r1, r3
 80083cc:	fb02 6101 	mla	r1, r2, r1, r6
 80083d0:	0c1e      	lsrs	r6, r3, #16
 80083d2:	0c0b      	lsrs	r3, r1, #16
 80083d4:	fb02 3306 	mla	r3, r2, r6, r3
 80083d8:	b289      	uxth	r1, r1
 80083da:	3001      	adds	r0, #1
 80083dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80083e0:	4285      	cmp	r5, r0
 80083e2:	f84c 1b04 	str.w	r1, [ip], #4
 80083e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80083ea:	dcec      	bgt.n	80083c6 <__multadd+0x12>
 80083ec:	b30e      	cbz	r6, 8008432 <__multadd+0x7e>
 80083ee:	68a3      	ldr	r3, [r4, #8]
 80083f0:	42ab      	cmp	r3, r5
 80083f2:	dc19      	bgt.n	8008428 <__multadd+0x74>
 80083f4:	6861      	ldr	r1, [r4, #4]
 80083f6:	4638      	mov	r0, r7
 80083f8:	3101      	adds	r1, #1
 80083fa:	f7ff ff79 	bl	80082f0 <_Balloc>
 80083fe:	4680      	mov	r8, r0
 8008400:	b928      	cbnz	r0, 800840e <__multadd+0x5a>
 8008402:	4602      	mov	r2, r0
 8008404:	4b0c      	ldr	r3, [pc, #48]	@ (8008438 <__multadd+0x84>)
 8008406:	480d      	ldr	r0, [pc, #52]	@ (800843c <__multadd+0x88>)
 8008408:	21ba      	movs	r1, #186	@ 0xba
 800840a:	f000 fd2f 	bl	8008e6c <__assert_func>
 800840e:	6922      	ldr	r2, [r4, #16]
 8008410:	3202      	adds	r2, #2
 8008412:	f104 010c 	add.w	r1, r4, #12
 8008416:	0092      	lsls	r2, r2, #2
 8008418:	300c      	adds	r0, #12
 800841a:	f000 fd19 	bl	8008e50 <memcpy>
 800841e:	4621      	mov	r1, r4
 8008420:	4638      	mov	r0, r7
 8008422:	f7ff ffa5 	bl	8008370 <_Bfree>
 8008426:	4644      	mov	r4, r8
 8008428:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800842c:	3501      	adds	r5, #1
 800842e:	615e      	str	r6, [r3, #20]
 8008430:	6125      	str	r5, [r4, #16]
 8008432:	4620      	mov	r0, r4
 8008434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008438:	0800962c 	.word	0x0800962c
 800843c:	0800963d 	.word	0x0800963d

08008440 <__hi0bits>:
 8008440:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008444:	4603      	mov	r3, r0
 8008446:	bf36      	itet	cc
 8008448:	0403      	lslcc	r3, r0, #16
 800844a:	2000      	movcs	r0, #0
 800844c:	2010      	movcc	r0, #16
 800844e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008452:	bf3c      	itt	cc
 8008454:	021b      	lslcc	r3, r3, #8
 8008456:	3008      	addcc	r0, #8
 8008458:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800845c:	bf3c      	itt	cc
 800845e:	011b      	lslcc	r3, r3, #4
 8008460:	3004      	addcc	r0, #4
 8008462:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008466:	bf3c      	itt	cc
 8008468:	009b      	lslcc	r3, r3, #2
 800846a:	3002      	addcc	r0, #2
 800846c:	2b00      	cmp	r3, #0
 800846e:	db05      	blt.n	800847c <__hi0bits+0x3c>
 8008470:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008474:	f100 0001 	add.w	r0, r0, #1
 8008478:	bf08      	it	eq
 800847a:	2020      	moveq	r0, #32
 800847c:	4770      	bx	lr

0800847e <__lo0bits>:
 800847e:	6803      	ldr	r3, [r0, #0]
 8008480:	4602      	mov	r2, r0
 8008482:	f013 0007 	ands.w	r0, r3, #7
 8008486:	d00b      	beq.n	80084a0 <__lo0bits+0x22>
 8008488:	07d9      	lsls	r1, r3, #31
 800848a:	d421      	bmi.n	80084d0 <__lo0bits+0x52>
 800848c:	0798      	lsls	r0, r3, #30
 800848e:	bf49      	itett	mi
 8008490:	085b      	lsrmi	r3, r3, #1
 8008492:	089b      	lsrpl	r3, r3, #2
 8008494:	2001      	movmi	r0, #1
 8008496:	6013      	strmi	r3, [r2, #0]
 8008498:	bf5c      	itt	pl
 800849a:	6013      	strpl	r3, [r2, #0]
 800849c:	2002      	movpl	r0, #2
 800849e:	4770      	bx	lr
 80084a0:	b299      	uxth	r1, r3
 80084a2:	b909      	cbnz	r1, 80084a8 <__lo0bits+0x2a>
 80084a4:	0c1b      	lsrs	r3, r3, #16
 80084a6:	2010      	movs	r0, #16
 80084a8:	b2d9      	uxtb	r1, r3
 80084aa:	b909      	cbnz	r1, 80084b0 <__lo0bits+0x32>
 80084ac:	3008      	adds	r0, #8
 80084ae:	0a1b      	lsrs	r3, r3, #8
 80084b0:	0719      	lsls	r1, r3, #28
 80084b2:	bf04      	itt	eq
 80084b4:	091b      	lsreq	r3, r3, #4
 80084b6:	3004      	addeq	r0, #4
 80084b8:	0799      	lsls	r1, r3, #30
 80084ba:	bf04      	itt	eq
 80084bc:	089b      	lsreq	r3, r3, #2
 80084be:	3002      	addeq	r0, #2
 80084c0:	07d9      	lsls	r1, r3, #31
 80084c2:	d403      	bmi.n	80084cc <__lo0bits+0x4e>
 80084c4:	085b      	lsrs	r3, r3, #1
 80084c6:	f100 0001 	add.w	r0, r0, #1
 80084ca:	d003      	beq.n	80084d4 <__lo0bits+0x56>
 80084cc:	6013      	str	r3, [r2, #0]
 80084ce:	4770      	bx	lr
 80084d0:	2000      	movs	r0, #0
 80084d2:	4770      	bx	lr
 80084d4:	2020      	movs	r0, #32
 80084d6:	4770      	bx	lr

080084d8 <__i2b>:
 80084d8:	b510      	push	{r4, lr}
 80084da:	460c      	mov	r4, r1
 80084dc:	2101      	movs	r1, #1
 80084de:	f7ff ff07 	bl	80082f0 <_Balloc>
 80084e2:	4602      	mov	r2, r0
 80084e4:	b928      	cbnz	r0, 80084f2 <__i2b+0x1a>
 80084e6:	4b05      	ldr	r3, [pc, #20]	@ (80084fc <__i2b+0x24>)
 80084e8:	4805      	ldr	r0, [pc, #20]	@ (8008500 <__i2b+0x28>)
 80084ea:	f240 1145 	movw	r1, #325	@ 0x145
 80084ee:	f000 fcbd 	bl	8008e6c <__assert_func>
 80084f2:	2301      	movs	r3, #1
 80084f4:	6144      	str	r4, [r0, #20]
 80084f6:	6103      	str	r3, [r0, #16]
 80084f8:	bd10      	pop	{r4, pc}
 80084fa:	bf00      	nop
 80084fc:	0800962c 	.word	0x0800962c
 8008500:	0800963d 	.word	0x0800963d

08008504 <__multiply>:
 8008504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008508:	4614      	mov	r4, r2
 800850a:	690a      	ldr	r2, [r1, #16]
 800850c:	6923      	ldr	r3, [r4, #16]
 800850e:	429a      	cmp	r2, r3
 8008510:	bfa8      	it	ge
 8008512:	4623      	movge	r3, r4
 8008514:	460f      	mov	r7, r1
 8008516:	bfa4      	itt	ge
 8008518:	460c      	movge	r4, r1
 800851a:	461f      	movge	r7, r3
 800851c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008520:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008524:	68a3      	ldr	r3, [r4, #8]
 8008526:	6861      	ldr	r1, [r4, #4]
 8008528:	eb0a 0609 	add.w	r6, sl, r9
 800852c:	42b3      	cmp	r3, r6
 800852e:	b085      	sub	sp, #20
 8008530:	bfb8      	it	lt
 8008532:	3101      	addlt	r1, #1
 8008534:	f7ff fedc 	bl	80082f0 <_Balloc>
 8008538:	b930      	cbnz	r0, 8008548 <__multiply+0x44>
 800853a:	4602      	mov	r2, r0
 800853c:	4b44      	ldr	r3, [pc, #272]	@ (8008650 <__multiply+0x14c>)
 800853e:	4845      	ldr	r0, [pc, #276]	@ (8008654 <__multiply+0x150>)
 8008540:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008544:	f000 fc92 	bl	8008e6c <__assert_func>
 8008548:	f100 0514 	add.w	r5, r0, #20
 800854c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008550:	462b      	mov	r3, r5
 8008552:	2200      	movs	r2, #0
 8008554:	4543      	cmp	r3, r8
 8008556:	d321      	bcc.n	800859c <__multiply+0x98>
 8008558:	f107 0114 	add.w	r1, r7, #20
 800855c:	f104 0214 	add.w	r2, r4, #20
 8008560:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008564:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008568:	9302      	str	r3, [sp, #8]
 800856a:	1b13      	subs	r3, r2, r4
 800856c:	3b15      	subs	r3, #21
 800856e:	f023 0303 	bic.w	r3, r3, #3
 8008572:	3304      	adds	r3, #4
 8008574:	f104 0715 	add.w	r7, r4, #21
 8008578:	42ba      	cmp	r2, r7
 800857a:	bf38      	it	cc
 800857c:	2304      	movcc	r3, #4
 800857e:	9301      	str	r3, [sp, #4]
 8008580:	9b02      	ldr	r3, [sp, #8]
 8008582:	9103      	str	r1, [sp, #12]
 8008584:	428b      	cmp	r3, r1
 8008586:	d80c      	bhi.n	80085a2 <__multiply+0x9e>
 8008588:	2e00      	cmp	r6, #0
 800858a:	dd03      	ble.n	8008594 <__multiply+0x90>
 800858c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008590:	2b00      	cmp	r3, #0
 8008592:	d05b      	beq.n	800864c <__multiply+0x148>
 8008594:	6106      	str	r6, [r0, #16]
 8008596:	b005      	add	sp, #20
 8008598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800859c:	f843 2b04 	str.w	r2, [r3], #4
 80085a0:	e7d8      	b.n	8008554 <__multiply+0x50>
 80085a2:	f8b1 a000 	ldrh.w	sl, [r1]
 80085a6:	f1ba 0f00 	cmp.w	sl, #0
 80085aa:	d024      	beq.n	80085f6 <__multiply+0xf2>
 80085ac:	f104 0e14 	add.w	lr, r4, #20
 80085b0:	46a9      	mov	r9, r5
 80085b2:	f04f 0c00 	mov.w	ip, #0
 80085b6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80085ba:	f8d9 3000 	ldr.w	r3, [r9]
 80085be:	fa1f fb87 	uxth.w	fp, r7
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	fb0a 330b 	mla	r3, sl, fp, r3
 80085c8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80085cc:	f8d9 7000 	ldr.w	r7, [r9]
 80085d0:	4463      	add	r3, ip
 80085d2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80085d6:	fb0a c70b 	mla	r7, sl, fp, ip
 80085da:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80085de:	b29b      	uxth	r3, r3
 80085e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80085e4:	4572      	cmp	r2, lr
 80085e6:	f849 3b04 	str.w	r3, [r9], #4
 80085ea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80085ee:	d8e2      	bhi.n	80085b6 <__multiply+0xb2>
 80085f0:	9b01      	ldr	r3, [sp, #4]
 80085f2:	f845 c003 	str.w	ip, [r5, r3]
 80085f6:	9b03      	ldr	r3, [sp, #12]
 80085f8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80085fc:	3104      	adds	r1, #4
 80085fe:	f1b9 0f00 	cmp.w	r9, #0
 8008602:	d021      	beq.n	8008648 <__multiply+0x144>
 8008604:	682b      	ldr	r3, [r5, #0]
 8008606:	f104 0c14 	add.w	ip, r4, #20
 800860a:	46ae      	mov	lr, r5
 800860c:	f04f 0a00 	mov.w	sl, #0
 8008610:	f8bc b000 	ldrh.w	fp, [ip]
 8008614:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008618:	fb09 770b 	mla	r7, r9, fp, r7
 800861c:	4457      	add	r7, sl
 800861e:	b29b      	uxth	r3, r3
 8008620:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008624:	f84e 3b04 	str.w	r3, [lr], #4
 8008628:	f85c 3b04 	ldr.w	r3, [ip], #4
 800862c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008630:	f8be 3000 	ldrh.w	r3, [lr]
 8008634:	fb09 330a 	mla	r3, r9, sl, r3
 8008638:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800863c:	4562      	cmp	r2, ip
 800863e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008642:	d8e5      	bhi.n	8008610 <__multiply+0x10c>
 8008644:	9f01      	ldr	r7, [sp, #4]
 8008646:	51eb      	str	r3, [r5, r7]
 8008648:	3504      	adds	r5, #4
 800864a:	e799      	b.n	8008580 <__multiply+0x7c>
 800864c:	3e01      	subs	r6, #1
 800864e:	e79b      	b.n	8008588 <__multiply+0x84>
 8008650:	0800962c 	.word	0x0800962c
 8008654:	0800963d 	.word	0x0800963d

08008658 <__pow5mult>:
 8008658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800865c:	4615      	mov	r5, r2
 800865e:	f012 0203 	ands.w	r2, r2, #3
 8008662:	4607      	mov	r7, r0
 8008664:	460e      	mov	r6, r1
 8008666:	d007      	beq.n	8008678 <__pow5mult+0x20>
 8008668:	4c25      	ldr	r4, [pc, #148]	@ (8008700 <__pow5mult+0xa8>)
 800866a:	3a01      	subs	r2, #1
 800866c:	2300      	movs	r3, #0
 800866e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008672:	f7ff fe9f 	bl	80083b4 <__multadd>
 8008676:	4606      	mov	r6, r0
 8008678:	10ad      	asrs	r5, r5, #2
 800867a:	d03d      	beq.n	80086f8 <__pow5mult+0xa0>
 800867c:	69fc      	ldr	r4, [r7, #28]
 800867e:	b97c      	cbnz	r4, 80086a0 <__pow5mult+0x48>
 8008680:	2010      	movs	r0, #16
 8008682:	f7ff fd7f 	bl	8008184 <malloc>
 8008686:	4602      	mov	r2, r0
 8008688:	61f8      	str	r0, [r7, #28]
 800868a:	b928      	cbnz	r0, 8008698 <__pow5mult+0x40>
 800868c:	4b1d      	ldr	r3, [pc, #116]	@ (8008704 <__pow5mult+0xac>)
 800868e:	481e      	ldr	r0, [pc, #120]	@ (8008708 <__pow5mult+0xb0>)
 8008690:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008694:	f000 fbea 	bl	8008e6c <__assert_func>
 8008698:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800869c:	6004      	str	r4, [r0, #0]
 800869e:	60c4      	str	r4, [r0, #12]
 80086a0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80086a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80086a8:	b94c      	cbnz	r4, 80086be <__pow5mult+0x66>
 80086aa:	f240 2171 	movw	r1, #625	@ 0x271
 80086ae:	4638      	mov	r0, r7
 80086b0:	f7ff ff12 	bl	80084d8 <__i2b>
 80086b4:	2300      	movs	r3, #0
 80086b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80086ba:	4604      	mov	r4, r0
 80086bc:	6003      	str	r3, [r0, #0]
 80086be:	f04f 0900 	mov.w	r9, #0
 80086c2:	07eb      	lsls	r3, r5, #31
 80086c4:	d50a      	bpl.n	80086dc <__pow5mult+0x84>
 80086c6:	4631      	mov	r1, r6
 80086c8:	4622      	mov	r2, r4
 80086ca:	4638      	mov	r0, r7
 80086cc:	f7ff ff1a 	bl	8008504 <__multiply>
 80086d0:	4631      	mov	r1, r6
 80086d2:	4680      	mov	r8, r0
 80086d4:	4638      	mov	r0, r7
 80086d6:	f7ff fe4b 	bl	8008370 <_Bfree>
 80086da:	4646      	mov	r6, r8
 80086dc:	106d      	asrs	r5, r5, #1
 80086de:	d00b      	beq.n	80086f8 <__pow5mult+0xa0>
 80086e0:	6820      	ldr	r0, [r4, #0]
 80086e2:	b938      	cbnz	r0, 80086f4 <__pow5mult+0x9c>
 80086e4:	4622      	mov	r2, r4
 80086e6:	4621      	mov	r1, r4
 80086e8:	4638      	mov	r0, r7
 80086ea:	f7ff ff0b 	bl	8008504 <__multiply>
 80086ee:	6020      	str	r0, [r4, #0]
 80086f0:	f8c0 9000 	str.w	r9, [r0]
 80086f4:	4604      	mov	r4, r0
 80086f6:	e7e4      	b.n	80086c2 <__pow5mult+0x6a>
 80086f8:	4630      	mov	r0, r6
 80086fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086fe:	bf00      	nop
 8008700:	08009698 	.word	0x08009698
 8008704:	080095bd 	.word	0x080095bd
 8008708:	0800963d 	.word	0x0800963d

0800870c <__lshift>:
 800870c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008710:	460c      	mov	r4, r1
 8008712:	6849      	ldr	r1, [r1, #4]
 8008714:	6923      	ldr	r3, [r4, #16]
 8008716:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800871a:	68a3      	ldr	r3, [r4, #8]
 800871c:	4607      	mov	r7, r0
 800871e:	4691      	mov	r9, r2
 8008720:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008724:	f108 0601 	add.w	r6, r8, #1
 8008728:	42b3      	cmp	r3, r6
 800872a:	db0b      	blt.n	8008744 <__lshift+0x38>
 800872c:	4638      	mov	r0, r7
 800872e:	f7ff fddf 	bl	80082f0 <_Balloc>
 8008732:	4605      	mov	r5, r0
 8008734:	b948      	cbnz	r0, 800874a <__lshift+0x3e>
 8008736:	4602      	mov	r2, r0
 8008738:	4b28      	ldr	r3, [pc, #160]	@ (80087dc <__lshift+0xd0>)
 800873a:	4829      	ldr	r0, [pc, #164]	@ (80087e0 <__lshift+0xd4>)
 800873c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008740:	f000 fb94 	bl	8008e6c <__assert_func>
 8008744:	3101      	adds	r1, #1
 8008746:	005b      	lsls	r3, r3, #1
 8008748:	e7ee      	b.n	8008728 <__lshift+0x1c>
 800874a:	2300      	movs	r3, #0
 800874c:	f100 0114 	add.w	r1, r0, #20
 8008750:	f100 0210 	add.w	r2, r0, #16
 8008754:	4618      	mov	r0, r3
 8008756:	4553      	cmp	r3, sl
 8008758:	db33      	blt.n	80087c2 <__lshift+0xb6>
 800875a:	6920      	ldr	r0, [r4, #16]
 800875c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008760:	f104 0314 	add.w	r3, r4, #20
 8008764:	f019 091f 	ands.w	r9, r9, #31
 8008768:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800876c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008770:	d02b      	beq.n	80087ca <__lshift+0xbe>
 8008772:	f1c9 0e20 	rsb	lr, r9, #32
 8008776:	468a      	mov	sl, r1
 8008778:	2200      	movs	r2, #0
 800877a:	6818      	ldr	r0, [r3, #0]
 800877c:	fa00 f009 	lsl.w	r0, r0, r9
 8008780:	4310      	orrs	r0, r2
 8008782:	f84a 0b04 	str.w	r0, [sl], #4
 8008786:	f853 2b04 	ldr.w	r2, [r3], #4
 800878a:	459c      	cmp	ip, r3
 800878c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008790:	d8f3      	bhi.n	800877a <__lshift+0x6e>
 8008792:	ebac 0304 	sub.w	r3, ip, r4
 8008796:	3b15      	subs	r3, #21
 8008798:	f023 0303 	bic.w	r3, r3, #3
 800879c:	3304      	adds	r3, #4
 800879e:	f104 0015 	add.w	r0, r4, #21
 80087a2:	4584      	cmp	ip, r0
 80087a4:	bf38      	it	cc
 80087a6:	2304      	movcc	r3, #4
 80087a8:	50ca      	str	r2, [r1, r3]
 80087aa:	b10a      	cbz	r2, 80087b0 <__lshift+0xa4>
 80087ac:	f108 0602 	add.w	r6, r8, #2
 80087b0:	3e01      	subs	r6, #1
 80087b2:	4638      	mov	r0, r7
 80087b4:	612e      	str	r6, [r5, #16]
 80087b6:	4621      	mov	r1, r4
 80087b8:	f7ff fdda 	bl	8008370 <_Bfree>
 80087bc:	4628      	mov	r0, r5
 80087be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80087c6:	3301      	adds	r3, #1
 80087c8:	e7c5      	b.n	8008756 <__lshift+0x4a>
 80087ca:	3904      	subs	r1, #4
 80087cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80087d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80087d4:	459c      	cmp	ip, r3
 80087d6:	d8f9      	bhi.n	80087cc <__lshift+0xc0>
 80087d8:	e7ea      	b.n	80087b0 <__lshift+0xa4>
 80087da:	bf00      	nop
 80087dc:	0800962c 	.word	0x0800962c
 80087e0:	0800963d 	.word	0x0800963d

080087e4 <__mcmp>:
 80087e4:	690a      	ldr	r2, [r1, #16]
 80087e6:	4603      	mov	r3, r0
 80087e8:	6900      	ldr	r0, [r0, #16]
 80087ea:	1a80      	subs	r0, r0, r2
 80087ec:	b530      	push	{r4, r5, lr}
 80087ee:	d10e      	bne.n	800880e <__mcmp+0x2a>
 80087f0:	3314      	adds	r3, #20
 80087f2:	3114      	adds	r1, #20
 80087f4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80087f8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80087fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008800:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008804:	4295      	cmp	r5, r2
 8008806:	d003      	beq.n	8008810 <__mcmp+0x2c>
 8008808:	d205      	bcs.n	8008816 <__mcmp+0x32>
 800880a:	f04f 30ff 	mov.w	r0, #4294967295
 800880e:	bd30      	pop	{r4, r5, pc}
 8008810:	42a3      	cmp	r3, r4
 8008812:	d3f3      	bcc.n	80087fc <__mcmp+0x18>
 8008814:	e7fb      	b.n	800880e <__mcmp+0x2a>
 8008816:	2001      	movs	r0, #1
 8008818:	e7f9      	b.n	800880e <__mcmp+0x2a>
	...

0800881c <__mdiff>:
 800881c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008820:	4689      	mov	r9, r1
 8008822:	4606      	mov	r6, r0
 8008824:	4611      	mov	r1, r2
 8008826:	4648      	mov	r0, r9
 8008828:	4614      	mov	r4, r2
 800882a:	f7ff ffdb 	bl	80087e4 <__mcmp>
 800882e:	1e05      	subs	r5, r0, #0
 8008830:	d112      	bne.n	8008858 <__mdiff+0x3c>
 8008832:	4629      	mov	r1, r5
 8008834:	4630      	mov	r0, r6
 8008836:	f7ff fd5b 	bl	80082f0 <_Balloc>
 800883a:	4602      	mov	r2, r0
 800883c:	b928      	cbnz	r0, 800884a <__mdiff+0x2e>
 800883e:	4b3f      	ldr	r3, [pc, #252]	@ (800893c <__mdiff+0x120>)
 8008840:	f240 2137 	movw	r1, #567	@ 0x237
 8008844:	483e      	ldr	r0, [pc, #248]	@ (8008940 <__mdiff+0x124>)
 8008846:	f000 fb11 	bl	8008e6c <__assert_func>
 800884a:	2301      	movs	r3, #1
 800884c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008850:	4610      	mov	r0, r2
 8008852:	b003      	add	sp, #12
 8008854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008858:	bfbc      	itt	lt
 800885a:	464b      	movlt	r3, r9
 800885c:	46a1      	movlt	r9, r4
 800885e:	4630      	mov	r0, r6
 8008860:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008864:	bfba      	itte	lt
 8008866:	461c      	movlt	r4, r3
 8008868:	2501      	movlt	r5, #1
 800886a:	2500      	movge	r5, #0
 800886c:	f7ff fd40 	bl	80082f0 <_Balloc>
 8008870:	4602      	mov	r2, r0
 8008872:	b918      	cbnz	r0, 800887c <__mdiff+0x60>
 8008874:	4b31      	ldr	r3, [pc, #196]	@ (800893c <__mdiff+0x120>)
 8008876:	f240 2145 	movw	r1, #581	@ 0x245
 800887a:	e7e3      	b.n	8008844 <__mdiff+0x28>
 800887c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008880:	6926      	ldr	r6, [r4, #16]
 8008882:	60c5      	str	r5, [r0, #12]
 8008884:	f109 0310 	add.w	r3, r9, #16
 8008888:	f109 0514 	add.w	r5, r9, #20
 800888c:	f104 0e14 	add.w	lr, r4, #20
 8008890:	f100 0b14 	add.w	fp, r0, #20
 8008894:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008898:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800889c:	9301      	str	r3, [sp, #4]
 800889e:	46d9      	mov	r9, fp
 80088a0:	f04f 0c00 	mov.w	ip, #0
 80088a4:	9b01      	ldr	r3, [sp, #4]
 80088a6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80088aa:	f853 af04 	ldr.w	sl, [r3, #4]!
 80088ae:	9301      	str	r3, [sp, #4]
 80088b0:	fa1f f38a 	uxth.w	r3, sl
 80088b4:	4619      	mov	r1, r3
 80088b6:	b283      	uxth	r3, r0
 80088b8:	1acb      	subs	r3, r1, r3
 80088ba:	0c00      	lsrs	r0, r0, #16
 80088bc:	4463      	add	r3, ip
 80088be:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80088c2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80088cc:	4576      	cmp	r6, lr
 80088ce:	f849 3b04 	str.w	r3, [r9], #4
 80088d2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80088d6:	d8e5      	bhi.n	80088a4 <__mdiff+0x88>
 80088d8:	1b33      	subs	r3, r6, r4
 80088da:	3b15      	subs	r3, #21
 80088dc:	f023 0303 	bic.w	r3, r3, #3
 80088e0:	3415      	adds	r4, #21
 80088e2:	3304      	adds	r3, #4
 80088e4:	42a6      	cmp	r6, r4
 80088e6:	bf38      	it	cc
 80088e8:	2304      	movcc	r3, #4
 80088ea:	441d      	add	r5, r3
 80088ec:	445b      	add	r3, fp
 80088ee:	461e      	mov	r6, r3
 80088f0:	462c      	mov	r4, r5
 80088f2:	4544      	cmp	r4, r8
 80088f4:	d30e      	bcc.n	8008914 <__mdiff+0xf8>
 80088f6:	f108 0103 	add.w	r1, r8, #3
 80088fa:	1b49      	subs	r1, r1, r5
 80088fc:	f021 0103 	bic.w	r1, r1, #3
 8008900:	3d03      	subs	r5, #3
 8008902:	45a8      	cmp	r8, r5
 8008904:	bf38      	it	cc
 8008906:	2100      	movcc	r1, #0
 8008908:	440b      	add	r3, r1
 800890a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800890e:	b191      	cbz	r1, 8008936 <__mdiff+0x11a>
 8008910:	6117      	str	r7, [r2, #16]
 8008912:	e79d      	b.n	8008850 <__mdiff+0x34>
 8008914:	f854 1b04 	ldr.w	r1, [r4], #4
 8008918:	46e6      	mov	lr, ip
 800891a:	0c08      	lsrs	r0, r1, #16
 800891c:	fa1c fc81 	uxtah	ip, ip, r1
 8008920:	4471      	add	r1, lr
 8008922:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008926:	b289      	uxth	r1, r1
 8008928:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800892c:	f846 1b04 	str.w	r1, [r6], #4
 8008930:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008934:	e7dd      	b.n	80088f2 <__mdiff+0xd6>
 8008936:	3f01      	subs	r7, #1
 8008938:	e7e7      	b.n	800890a <__mdiff+0xee>
 800893a:	bf00      	nop
 800893c:	0800962c 	.word	0x0800962c
 8008940:	0800963d 	.word	0x0800963d

08008944 <__d2b>:
 8008944:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008948:	460f      	mov	r7, r1
 800894a:	2101      	movs	r1, #1
 800894c:	ec59 8b10 	vmov	r8, r9, d0
 8008950:	4616      	mov	r6, r2
 8008952:	f7ff fccd 	bl	80082f0 <_Balloc>
 8008956:	4604      	mov	r4, r0
 8008958:	b930      	cbnz	r0, 8008968 <__d2b+0x24>
 800895a:	4602      	mov	r2, r0
 800895c:	4b23      	ldr	r3, [pc, #140]	@ (80089ec <__d2b+0xa8>)
 800895e:	4824      	ldr	r0, [pc, #144]	@ (80089f0 <__d2b+0xac>)
 8008960:	f240 310f 	movw	r1, #783	@ 0x30f
 8008964:	f000 fa82 	bl	8008e6c <__assert_func>
 8008968:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800896c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008970:	b10d      	cbz	r5, 8008976 <__d2b+0x32>
 8008972:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008976:	9301      	str	r3, [sp, #4]
 8008978:	f1b8 0300 	subs.w	r3, r8, #0
 800897c:	d023      	beq.n	80089c6 <__d2b+0x82>
 800897e:	4668      	mov	r0, sp
 8008980:	9300      	str	r3, [sp, #0]
 8008982:	f7ff fd7c 	bl	800847e <__lo0bits>
 8008986:	e9dd 1200 	ldrd	r1, r2, [sp]
 800898a:	b1d0      	cbz	r0, 80089c2 <__d2b+0x7e>
 800898c:	f1c0 0320 	rsb	r3, r0, #32
 8008990:	fa02 f303 	lsl.w	r3, r2, r3
 8008994:	430b      	orrs	r3, r1
 8008996:	40c2      	lsrs	r2, r0
 8008998:	6163      	str	r3, [r4, #20]
 800899a:	9201      	str	r2, [sp, #4]
 800899c:	9b01      	ldr	r3, [sp, #4]
 800899e:	61a3      	str	r3, [r4, #24]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	bf0c      	ite	eq
 80089a4:	2201      	moveq	r2, #1
 80089a6:	2202      	movne	r2, #2
 80089a8:	6122      	str	r2, [r4, #16]
 80089aa:	b1a5      	cbz	r5, 80089d6 <__d2b+0x92>
 80089ac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80089b0:	4405      	add	r5, r0
 80089b2:	603d      	str	r5, [r7, #0]
 80089b4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80089b8:	6030      	str	r0, [r6, #0]
 80089ba:	4620      	mov	r0, r4
 80089bc:	b003      	add	sp, #12
 80089be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80089c2:	6161      	str	r1, [r4, #20]
 80089c4:	e7ea      	b.n	800899c <__d2b+0x58>
 80089c6:	a801      	add	r0, sp, #4
 80089c8:	f7ff fd59 	bl	800847e <__lo0bits>
 80089cc:	9b01      	ldr	r3, [sp, #4]
 80089ce:	6163      	str	r3, [r4, #20]
 80089d0:	3020      	adds	r0, #32
 80089d2:	2201      	movs	r2, #1
 80089d4:	e7e8      	b.n	80089a8 <__d2b+0x64>
 80089d6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80089da:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80089de:	6038      	str	r0, [r7, #0]
 80089e0:	6918      	ldr	r0, [r3, #16]
 80089e2:	f7ff fd2d 	bl	8008440 <__hi0bits>
 80089e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80089ea:	e7e5      	b.n	80089b8 <__d2b+0x74>
 80089ec:	0800962c 	.word	0x0800962c
 80089f0:	0800963d 	.word	0x0800963d

080089f4 <__ssputs_r>:
 80089f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089f8:	688e      	ldr	r6, [r1, #8]
 80089fa:	461f      	mov	r7, r3
 80089fc:	42be      	cmp	r6, r7
 80089fe:	680b      	ldr	r3, [r1, #0]
 8008a00:	4682      	mov	sl, r0
 8008a02:	460c      	mov	r4, r1
 8008a04:	4690      	mov	r8, r2
 8008a06:	d82d      	bhi.n	8008a64 <__ssputs_r+0x70>
 8008a08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008a0c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008a10:	d026      	beq.n	8008a60 <__ssputs_r+0x6c>
 8008a12:	6965      	ldr	r5, [r4, #20]
 8008a14:	6909      	ldr	r1, [r1, #16]
 8008a16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a1a:	eba3 0901 	sub.w	r9, r3, r1
 8008a1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008a22:	1c7b      	adds	r3, r7, #1
 8008a24:	444b      	add	r3, r9
 8008a26:	106d      	asrs	r5, r5, #1
 8008a28:	429d      	cmp	r5, r3
 8008a2a:	bf38      	it	cc
 8008a2c:	461d      	movcc	r5, r3
 8008a2e:	0553      	lsls	r3, r2, #21
 8008a30:	d527      	bpl.n	8008a82 <__ssputs_r+0x8e>
 8008a32:	4629      	mov	r1, r5
 8008a34:	f7ff fbd0 	bl	80081d8 <_malloc_r>
 8008a38:	4606      	mov	r6, r0
 8008a3a:	b360      	cbz	r0, 8008a96 <__ssputs_r+0xa2>
 8008a3c:	6921      	ldr	r1, [r4, #16]
 8008a3e:	464a      	mov	r2, r9
 8008a40:	f000 fa06 	bl	8008e50 <memcpy>
 8008a44:	89a3      	ldrh	r3, [r4, #12]
 8008a46:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008a4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a4e:	81a3      	strh	r3, [r4, #12]
 8008a50:	6126      	str	r6, [r4, #16]
 8008a52:	6165      	str	r5, [r4, #20]
 8008a54:	444e      	add	r6, r9
 8008a56:	eba5 0509 	sub.w	r5, r5, r9
 8008a5a:	6026      	str	r6, [r4, #0]
 8008a5c:	60a5      	str	r5, [r4, #8]
 8008a5e:	463e      	mov	r6, r7
 8008a60:	42be      	cmp	r6, r7
 8008a62:	d900      	bls.n	8008a66 <__ssputs_r+0x72>
 8008a64:	463e      	mov	r6, r7
 8008a66:	6820      	ldr	r0, [r4, #0]
 8008a68:	4632      	mov	r2, r6
 8008a6a:	4641      	mov	r1, r8
 8008a6c:	f000 f9c6 	bl	8008dfc <memmove>
 8008a70:	68a3      	ldr	r3, [r4, #8]
 8008a72:	1b9b      	subs	r3, r3, r6
 8008a74:	60a3      	str	r3, [r4, #8]
 8008a76:	6823      	ldr	r3, [r4, #0]
 8008a78:	4433      	add	r3, r6
 8008a7a:	6023      	str	r3, [r4, #0]
 8008a7c:	2000      	movs	r0, #0
 8008a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a82:	462a      	mov	r2, r5
 8008a84:	f000 fa36 	bl	8008ef4 <_realloc_r>
 8008a88:	4606      	mov	r6, r0
 8008a8a:	2800      	cmp	r0, #0
 8008a8c:	d1e0      	bne.n	8008a50 <__ssputs_r+0x5c>
 8008a8e:	6921      	ldr	r1, [r4, #16]
 8008a90:	4650      	mov	r0, sl
 8008a92:	f7ff fb2d 	bl	80080f0 <_free_r>
 8008a96:	230c      	movs	r3, #12
 8008a98:	f8ca 3000 	str.w	r3, [sl]
 8008a9c:	89a3      	ldrh	r3, [r4, #12]
 8008a9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008aa2:	81a3      	strh	r3, [r4, #12]
 8008aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8008aa8:	e7e9      	b.n	8008a7e <__ssputs_r+0x8a>
	...

08008aac <_svfiprintf_r>:
 8008aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ab0:	4698      	mov	r8, r3
 8008ab2:	898b      	ldrh	r3, [r1, #12]
 8008ab4:	061b      	lsls	r3, r3, #24
 8008ab6:	b09d      	sub	sp, #116	@ 0x74
 8008ab8:	4607      	mov	r7, r0
 8008aba:	460d      	mov	r5, r1
 8008abc:	4614      	mov	r4, r2
 8008abe:	d510      	bpl.n	8008ae2 <_svfiprintf_r+0x36>
 8008ac0:	690b      	ldr	r3, [r1, #16]
 8008ac2:	b973      	cbnz	r3, 8008ae2 <_svfiprintf_r+0x36>
 8008ac4:	2140      	movs	r1, #64	@ 0x40
 8008ac6:	f7ff fb87 	bl	80081d8 <_malloc_r>
 8008aca:	6028      	str	r0, [r5, #0]
 8008acc:	6128      	str	r0, [r5, #16]
 8008ace:	b930      	cbnz	r0, 8008ade <_svfiprintf_r+0x32>
 8008ad0:	230c      	movs	r3, #12
 8008ad2:	603b      	str	r3, [r7, #0]
 8008ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ad8:	b01d      	add	sp, #116	@ 0x74
 8008ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ade:	2340      	movs	r3, #64	@ 0x40
 8008ae0:	616b      	str	r3, [r5, #20]
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ae6:	2320      	movs	r3, #32
 8008ae8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008aec:	f8cd 800c 	str.w	r8, [sp, #12]
 8008af0:	2330      	movs	r3, #48	@ 0x30
 8008af2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008c90 <_svfiprintf_r+0x1e4>
 8008af6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008afa:	f04f 0901 	mov.w	r9, #1
 8008afe:	4623      	mov	r3, r4
 8008b00:	469a      	mov	sl, r3
 8008b02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b06:	b10a      	cbz	r2, 8008b0c <_svfiprintf_r+0x60>
 8008b08:	2a25      	cmp	r2, #37	@ 0x25
 8008b0a:	d1f9      	bne.n	8008b00 <_svfiprintf_r+0x54>
 8008b0c:	ebba 0b04 	subs.w	fp, sl, r4
 8008b10:	d00b      	beq.n	8008b2a <_svfiprintf_r+0x7e>
 8008b12:	465b      	mov	r3, fp
 8008b14:	4622      	mov	r2, r4
 8008b16:	4629      	mov	r1, r5
 8008b18:	4638      	mov	r0, r7
 8008b1a:	f7ff ff6b 	bl	80089f4 <__ssputs_r>
 8008b1e:	3001      	adds	r0, #1
 8008b20:	f000 80a7 	beq.w	8008c72 <_svfiprintf_r+0x1c6>
 8008b24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b26:	445a      	add	r2, fp
 8008b28:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b2a:	f89a 3000 	ldrb.w	r3, [sl]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	f000 809f 	beq.w	8008c72 <_svfiprintf_r+0x1c6>
 8008b34:	2300      	movs	r3, #0
 8008b36:	f04f 32ff 	mov.w	r2, #4294967295
 8008b3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b3e:	f10a 0a01 	add.w	sl, sl, #1
 8008b42:	9304      	str	r3, [sp, #16]
 8008b44:	9307      	str	r3, [sp, #28]
 8008b46:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008b4a:	931a      	str	r3, [sp, #104]	@ 0x68
 8008b4c:	4654      	mov	r4, sl
 8008b4e:	2205      	movs	r2, #5
 8008b50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b54:	484e      	ldr	r0, [pc, #312]	@ (8008c90 <_svfiprintf_r+0x1e4>)
 8008b56:	f7f7 fb6b 	bl	8000230 <memchr>
 8008b5a:	9a04      	ldr	r2, [sp, #16]
 8008b5c:	b9d8      	cbnz	r0, 8008b96 <_svfiprintf_r+0xea>
 8008b5e:	06d0      	lsls	r0, r2, #27
 8008b60:	bf44      	itt	mi
 8008b62:	2320      	movmi	r3, #32
 8008b64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b68:	0711      	lsls	r1, r2, #28
 8008b6a:	bf44      	itt	mi
 8008b6c:	232b      	movmi	r3, #43	@ 0x2b
 8008b6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b72:	f89a 3000 	ldrb.w	r3, [sl]
 8008b76:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b78:	d015      	beq.n	8008ba6 <_svfiprintf_r+0xfa>
 8008b7a:	9a07      	ldr	r2, [sp, #28]
 8008b7c:	4654      	mov	r4, sl
 8008b7e:	2000      	movs	r0, #0
 8008b80:	f04f 0c0a 	mov.w	ip, #10
 8008b84:	4621      	mov	r1, r4
 8008b86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b8a:	3b30      	subs	r3, #48	@ 0x30
 8008b8c:	2b09      	cmp	r3, #9
 8008b8e:	d94b      	bls.n	8008c28 <_svfiprintf_r+0x17c>
 8008b90:	b1b0      	cbz	r0, 8008bc0 <_svfiprintf_r+0x114>
 8008b92:	9207      	str	r2, [sp, #28]
 8008b94:	e014      	b.n	8008bc0 <_svfiprintf_r+0x114>
 8008b96:	eba0 0308 	sub.w	r3, r0, r8
 8008b9a:	fa09 f303 	lsl.w	r3, r9, r3
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	9304      	str	r3, [sp, #16]
 8008ba2:	46a2      	mov	sl, r4
 8008ba4:	e7d2      	b.n	8008b4c <_svfiprintf_r+0xa0>
 8008ba6:	9b03      	ldr	r3, [sp, #12]
 8008ba8:	1d19      	adds	r1, r3, #4
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	9103      	str	r1, [sp, #12]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	bfbb      	ittet	lt
 8008bb2:	425b      	neglt	r3, r3
 8008bb4:	f042 0202 	orrlt.w	r2, r2, #2
 8008bb8:	9307      	strge	r3, [sp, #28]
 8008bba:	9307      	strlt	r3, [sp, #28]
 8008bbc:	bfb8      	it	lt
 8008bbe:	9204      	strlt	r2, [sp, #16]
 8008bc0:	7823      	ldrb	r3, [r4, #0]
 8008bc2:	2b2e      	cmp	r3, #46	@ 0x2e
 8008bc4:	d10a      	bne.n	8008bdc <_svfiprintf_r+0x130>
 8008bc6:	7863      	ldrb	r3, [r4, #1]
 8008bc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8008bca:	d132      	bne.n	8008c32 <_svfiprintf_r+0x186>
 8008bcc:	9b03      	ldr	r3, [sp, #12]
 8008bce:	1d1a      	adds	r2, r3, #4
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	9203      	str	r2, [sp, #12]
 8008bd4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008bd8:	3402      	adds	r4, #2
 8008bda:	9305      	str	r3, [sp, #20]
 8008bdc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008ca0 <_svfiprintf_r+0x1f4>
 8008be0:	7821      	ldrb	r1, [r4, #0]
 8008be2:	2203      	movs	r2, #3
 8008be4:	4650      	mov	r0, sl
 8008be6:	f7f7 fb23 	bl	8000230 <memchr>
 8008bea:	b138      	cbz	r0, 8008bfc <_svfiprintf_r+0x150>
 8008bec:	9b04      	ldr	r3, [sp, #16]
 8008bee:	eba0 000a 	sub.w	r0, r0, sl
 8008bf2:	2240      	movs	r2, #64	@ 0x40
 8008bf4:	4082      	lsls	r2, r0
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	3401      	adds	r4, #1
 8008bfa:	9304      	str	r3, [sp, #16]
 8008bfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c00:	4824      	ldr	r0, [pc, #144]	@ (8008c94 <_svfiprintf_r+0x1e8>)
 8008c02:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008c06:	2206      	movs	r2, #6
 8008c08:	f7f7 fb12 	bl	8000230 <memchr>
 8008c0c:	2800      	cmp	r0, #0
 8008c0e:	d036      	beq.n	8008c7e <_svfiprintf_r+0x1d2>
 8008c10:	4b21      	ldr	r3, [pc, #132]	@ (8008c98 <_svfiprintf_r+0x1ec>)
 8008c12:	bb1b      	cbnz	r3, 8008c5c <_svfiprintf_r+0x1b0>
 8008c14:	9b03      	ldr	r3, [sp, #12]
 8008c16:	3307      	adds	r3, #7
 8008c18:	f023 0307 	bic.w	r3, r3, #7
 8008c1c:	3308      	adds	r3, #8
 8008c1e:	9303      	str	r3, [sp, #12]
 8008c20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c22:	4433      	add	r3, r6
 8008c24:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c26:	e76a      	b.n	8008afe <_svfiprintf_r+0x52>
 8008c28:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c2c:	460c      	mov	r4, r1
 8008c2e:	2001      	movs	r0, #1
 8008c30:	e7a8      	b.n	8008b84 <_svfiprintf_r+0xd8>
 8008c32:	2300      	movs	r3, #0
 8008c34:	3401      	adds	r4, #1
 8008c36:	9305      	str	r3, [sp, #20]
 8008c38:	4619      	mov	r1, r3
 8008c3a:	f04f 0c0a 	mov.w	ip, #10
 8008c3e:	4620      	mov	r0, r4
 8008c40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c44:	3a30      	subs	r2, #48	@ 0x30
 8008c46:	2a09      	cmp	r2, #9
 8008c48:	d903      	bls.n	8008c52 <_svfiprintf_r+0x1a6>
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d0c6      	beq.n	8008bdc <_svfiprintf_r+0x130>
 8008c4e:	9105      	str	r1, [sp, #20]
 8008c50:	e7c4      	b.n	8008bdc <_svfiprintf_r+0x130>
 8008c52:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c56:	4604      	mov	r4, r0
 8008c58:	2301      	movs	r3, #1
 8008c5a:	e7f0      	b.n	8008c3e <_svfiprintf_r+0x192>
 8008c5c:	ab03      	add	r3, sp, #12
 8008c5e:	9300      	str	r3, [sp, #0]
 8008c60:	462a      	mov	r2, r5
 8008c62:	4b0e      	ldr	r3, [pc, #56]	@ (8008c9c <_svfiprintf_r+0x1f0>)
 8008c64:	a904      	add	r1, sp, #16
 8008c66:	4638      	mov	r0, r7
 8008c68:	f7fd fe96 	bl	8006998 <_printf_float>
 8008c6c:	1c42      	adds	r2, r0, #1
 8008c6e:	4606      	mov	r6, r0
 8008c70:	d1d6      	bne.n	8008c20 <_svfiprintf_r+0x174>
 8008c72:	89ab      	ldrh	r3, [r5, #12]
 8008c74:	065b      	lsls	r3, r3, #25
 8008c76:	f53f af2d 	bmi.w	8008ad4 <_svfiprintf_r+0x28>
 8008c7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c7c:	e72c      	b.n	8008ad8 <_svfiprintf_r+0x2c>
 8008c7e:	ab03      	add	r3, sp, #12
 8008c80:	9300      	str	r3, [sp, #0]
 8008c82:	462a      	mov	r2, r5
 8008c84:	4b05      	ldr	r3, [pc, #20]	@ (8008c9c <_svfiprintf_r+0x1f0>)
 8008c86:	a904      	add	r1, sp, #16
 8008c88:	4638      	mov	r0, r7
 8008c8a:	f7fe f91d 	bl	8006ec8 <_printf_i>
 8008c8e:	e7ed      	b.n	8008c6c <_svfiprintf_r+0x1c0>
 8008c90:	08009798 	.word	0x08009798
 8008c94:	080097a2 	.word	0x080097a2
 8008c98:	08006999 	.word	0x08006999
 8008c9c:	080089f5 	.word	0x080089f5
 8008ca0:	0800979e 	.word	0x0800979e

08008ca4 <__sflush_r>:
 8008ca4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cac:	0716      	lsls	r6, r2, #28
 8008cae:	4605      	mov	r5, r0
 8008cb0:	460c      	mov	r4, r1
 8008cb2:	d454      	bmi.n	8008d5e <__sflush_r+0xba>
 8008cb4:	684b      	ldr	r3, [r1, #4]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	dc02      	bgt.n	8008cc0 <__sflush_r+0x1c>
 8008cba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	dd48      	ble.n	8008d52 <__sflush_r+0xae>
 8008cc0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008cc2:	2e00      	cmp	r6, #0
 8008cc4:	d045      	beq.n	8008d52 <__sflush_r+0xae>
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008ccc:	682f      	ldr	r7, [r5, #0]
 8008cce:	6a21      	ldr	r1, [r4, #32]
 8008cd0:	602b      	str	r3, [r5, #0]
 8008cd2:	d030      	beq.n	8008d36 <__sflush_r+0x92>
 8008cd4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008cd6:	89a3      	ldrh	r3, [r4, #12]
 8008cd8:	0759      	lsls	r1, r3, #29
 8008cda:	d505      	bpl.n	8008ce8 <__sflush_r+0x44>
 8008cdc:	6863      	ldr	r3, [r4, #4]
 8008cde:	1ad2      	subs	r2, r2, r3
 8008ce0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008ce2:	b10b      	cbz	r3, 8008ce8 <__sflush_r+0x44>
 8008ce4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008ce6:	1ad2      	subs	r2, r2, r3
 8008ce8:	2300      	movs	r3, #0
 8008cea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008cec:	6a21      	ldr	r1, [r4, #32]
 8008cee:	4628      	mov	r0, r5
 8008cf0:	47b0      	blx	r6
 8008cf2:	1c43      	adds	r3, r0, #1
 8008cf4:	89a3      	ldrh	r3, [r4, #12]
 8008cf6:	d106      	bne.n	8008d06 <__sflush_r+0x62>
 8008cf8:	6829      	ldr	r1, [r5, #0]
 8008cfa:	291d      	cmp	r1, #29
 8008cfc:	d82b      	bhi.n	8008d56 <__sflush_r+0xb2>
 8008cfe:	4a2a      	ldr	r2, [pc, #168]	@ (8008da8 <__sflush_r+0x104>)
 8008d00:	410a      	asrs	r2, r1
 8008d02:	07d6      	lsls	r6, r2, #31
 8008d04:	d427      	bmi.n	8008d56 <__sflush_r+0xb2>
 8008d06:	2200      	movs	r2, #0
 8008d08:	6062      	str	r2, [r4, #4]
 8008d0a:	04d9      	lsls	r1, r3, #19
 8008d0c:	6922      	ldr	r2, [r4, #16]
 8008d0e:	6022      	str	r2, [r4, #0]
 8008d10:	d504      	bpl.n	8008d1c <__sflush_r+0x78>
 8008d12:	1c42      	adds	r2, r0, #1
 8008d14:	d101      	bne.n	8008d1a <__sflush_r+0x76>
 8008d16:	682b      	ldr	r3, [r5, #0]
 8008d18:	b903      	cbnz	r3, 8008d1c <__sflush_r+0x78>
 8008d1a:	6560      	str	r0, [r4, #84]	@ 0x54
 8008d1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008d1e:	602f      	str	r7, [r5, #0]
 8008d20:	b1b9      	cbz	r1, 8008d52 <__sflush_r+0xae>
 8008d22:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008d26:	4299      	cmp	r1, r3
 8008d28:	d002      	beq.n	8008d30 <__sflush_r+0x8c>
 8008d2a:	4628      	mov	r0, r5
 8008d2c:	f7ff f9e0 	bl	80080f0 <_free_r>
 8008d30:	2300      	movs	r3, #0
 8008d32:	6363      	str	r3, [r4, #52]	@ 0x34
 8008d34:	e00d      	b.n	8008d52 <__sflush_r+0xae>
 8008d36:	2301      	movs	r3, #1
 8008d38:	4628      	mov	r0, r5
 8008d3a:	47b0      	blx	r6
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	1c50      	adds	r0, r2, #1
 8008d40:	d1c9      	bne.n	8008cd6 <__sflush_r+0x32>
 8008d42:	682b      	ldr	r3, [r5, #0]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d0c6      	beq.n	8008cd6 <__sflush_r+0x32>
 8008d48:	2b1d      	cmp	r3, #29
 8008d4a:	d001      	beq.n	8008d50 <__sflush_r+0xac>
 8008d4c:	2b16      	cmp	r3, #22
 8008d4e:	d11e      	bne.n	8008d8e <__sflush_r+0xea>
 8008d50:	602f      	str	r7, [r5, #0]
 8008d52:	2000      	movs	r0, #0
 8008d54:	e022      	b.n	8008d9c <__sflush_r+0xf8>
 8008d56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d5a:	b21b      	sxth	r3, r3
 8008d5c:	e01b      	b.n	8008d96 <__sflush_r+0xf2>
 8008d5e:	690f      	ldr	r7, [r1, #16]
 8008d60:	2f00      	cmp	r7, #0
 8008d62:	d0f6      	beq.n	8008d52 <__sflush_r+0xae>
 8008d64:	0793      	lsls	r3, r2, #30
 8008d66:	680e      	ldr	r6, [r1, #0]
 8008d68:	bf08      	it	eq
 8008d6a:	694b      	ldreq	r3, [r1, #20]
 8008d6c:	600f      	str	r7, [r1, #0]
 8008d6e:	bf18      	it	ne
 8008d70:	2300      	movne	r3, #0
 8008d72:	eba6 0807 	sub.w	r8, r6, r7
 8008d76:	608b      	str	r3, [r1, #8]
 8008d78:	f1b8 0f00 	cmp.w	r8, #0
 8008d7c:	dde9      	ble.n	8008d52 <__sflush_r+0xae>
 8008d7e:	6a21      	ldr	r1, [r4, #32]
 8008d80:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008d82:	4643      	mov	r3, r8
 8008d84:	463a      	mov	r2, r7
 8008d86:	4628      	mov	r0, r5
 8008d88:	47b0      	blx	r6
 8008d8a:	2800      	cmp	r0, #0
 8008d8c:	dc08      	bgt.n	8008da0 <__sflush_r+0xfc>
 8008d8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d96:	81a3      	strh	r3, [r4, #12]
 8008d98:	f04f 30ff 	mov.w	r0, #4294967295
 8008d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008da0:	4407      	add	r7, r0
 8008da2:	eba8 0800 	sub.w	r8, r8, r0
 8008da6:	e7e7      	b.n	8008d78 <__sflush_r+0xd4>
 8008da8:	dfbffffe 	.word	0xdfbffffe

08008dac <_fflush_r>:
 8008dac:	b538      	push	{r3, r4, r5, lr}
 8008dae:	690b      	ldr	r3, [r1, #16]
 8008db0:	4605      	mov	r5, r0
 8008db2:	460c      	mov	r4, r1
 8008db4:	b913      	cbnz	r3, 8008dbc <_fflush_r+0x10>
 8008db6:	2500      	movs	r5, #0
 8008db8:	4628      	mov	r0, r5
 8008dba:	bd38      	pop	{r3, r4, r5, pc}
 8008dbc:	b118      	cbz	r0, 8008dc6 <_fflush_r+0x1a>
 8008dbe:	6a03      	ldr	r3, [r0, #32]
 8008dc0:	b90b      	cbnz	r3, 8008dc6 <_fflush_r+0x1a>
 8008dc2:	f7fe fa2d 	bl	8007220 <__sinit>
 8008dc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d0f3      	beq.n	8008db6 <_fflush_r+0xa>
 8008dce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008dd0:	07d0      	lsls	r0, r2, #31
 8008dd2:	d404      	bmi.n	8008dde <_fflush_r+0x32>
 8008dd4:	0599      	lsls	r1, r3, #22
 8008dd6:	d402      	bmi.n	8008dde <_fflush_r+0x32>
 8008dd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008dda:	f7fe fb38 	bl	800744e <__retarget_lock_acquire_recursive>
 8008dde:	4628      	mov	r0, r5
 8008de0:	4621      	mov	r1, r4
 8008de2:	f7ff ff5f 	bl	8008ca4 <__sflush_r>
 8008de6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008de8:	07da      	lsls	r2, r3, #31
 8008dea:	4605      	mov	r5, r0
 8008dec:	d4e4      	bmi.n	8008db8 <_fflush_r+0xc>
 8008dee:	89a3      	ldrh	r3, [r4, #12]
 8008df0:	059b      	lsls	r3, r3, #22
 8008df2:	d4e1      	bmi.n	8008db8 <_fflush_r+0xc>
 8008df4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008df6:	f7fe fb2b 	bl	8007450 <__retarget_lock_release_recursive>
 8008dfa:	e7dd      	b.n	8008db8 <_fflush_r+0xc>

08008dfc <memmove>:
 8008dfc:	4288      	cmp	r0, r1
 8008dfe:	b510      	push	{r4, lr}
 8008e00:	eb01 0402 	add.w	r4, r1, r2
 8008e04:	d902      	bls.n	8008e0c <memmove+0x10>
 8008e06:	4284      	cmp	r4, r0
 8008e08:	4623      	mov	r3, r4
 8008e0a:	d807      	bhi.n	8008e1c <memmove+0x20>
 8008e0c:	1e43      	subs	r3, r0, #1
 8008e0e:	42a1      	cmp	r1, r4
 8008e10:	d008      	beq.n	8008e24 <memmove+0x28>
 8008e12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e1a:	e7f8      	b.n	8008e0e <memmove+0x12>
 8008e1c:	4402      	add	r2, r0
 8008e1e:	4601      	mov	r1, r0
 8008e20:	428a      	cmp	r2, r1
 8008e22:	d100      	bne.n	8008e26 <memmove+0x2a>
 8008e24:	bd10      	pop	{r4, pc}
 8008e26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e2e:	e7f7      	b.n	8008e20 <memmove+0x24>

08008e30 <_sbrk_r>:
 8008e30:	b538      	push	{r3, r4, r5, lr}
 8008e32:	4d06      	ldr	r5, [pc, #24]	@ (8008e4c <_sbrk_r+0x1c>)
 8008e34:	2300      	movs	r3, #0
 8008e36:	4604      	mov	r4, r0
 8008e38:	4608      	mov	r0, r1
 8008e3a:	602b      	str	r3, [r5, #0]
 8008e3c:	f7f9 fc24 	bl	8002688 <_sbrk>
 8008e40:	1c43      	adds	r3, r0, #1
 8008e42:	d102      	bne.n	8008e4a <_sbrk_r+0x1a>
 8008e44:	682b      	ldr	r3, [r5, #0]
 8008e46:	b103      	cbz	r3, 8008e4a <_sbrk_r+0x1a>
 8008e48:	6023      	str	r3, [r4, #0]
 8008e4a:	bd38      	pop	{r3, r4, r5, pc}
 8008e4c:	20000578 	.word	0x20000578

08008e50 <memcpy>:
 8008e50:	440a      	add	r2, r1
 8008e52:	4291      	cmp	r1, r2
 8008e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e58:	d100      	bne.n	8008e5c <memcpy+0xc>
 8008e5a:	4770      	bx	lr
 8008e5c:	b510      	push	{r4, lr}
 8008e5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e66:	4291      	cmp	r1, r2
 8008e68:	d1f9      	bne.n	8008e5e <memcpy+0xe>
 8008e6a:	bd10      	pop	{r4, pc}

08008e6c <__assert_func>:
 8008e6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008e6e:	4614      	mov	r4, r2
 8008e70:	461a      	mov	r2, r3
 8008e72:	4b09      	ldr	r3, [pc, #36]	@ (8008e98 <__assert_func+0x2c>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4605      	mov	r5, r0
 8008e78:	68d8      	ldr	r0, [r3, #12]
 8008e7a:	b954      	cbnz	r4, 8008e92 <__assert_func+0x26>
 8008e7c:	4b07      	ldr	r3, [pc, #28]	@ (8008e9c <__assert_func+0x30>)
 8008e7e:	461c      	mov	r4, r3
 8008e80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008e84:	9100      	str	r1, [sp, #0]
 8008e86:	462b      	mov	r3, r5
 8008e88:	4905      	ldr	r1, [pc, #20]	@ (8008ea0 <__assert_func+0x34>)
 8008e8a:	f000 f86f 	bl	8008f6c <fiprintf>
 8008e8e:	f000 f87f 	bl	8008f90 <abort>
 8008e92:	4b04      	ldr	r3, [pc, #16]	@ (8008ea4 <__assert_func+0x38>)
 8008e94:	e7f4      	b.n	8008e80 <__assert_func+0x14>
 8008e96:	bf00      	nop
 8008e98:	20000020 	.word	0x20000020
 8008e9c:	080097ee 	.word	0x080097ee
 8008ea0:	080097c0 	.word	0x080097c0
 8008ea4:	080097b3 	.word	0x080097b3

08008ea8 <_calloc_r>:
 8008ea8:	b570      	push	{r4, r5, r6, lr}
 8008eaa:	fba1 5402 	umull	r5, r4, r1, r2
 8008eae:	b93c      	cbnz	r4, 8008ec0 <_calloc_r+0x18>
 8008eb0:	4629      	mov	r1, r5
 8008eb2:	f7ff f991 	bl	80081d8 <_malloc_r>
 8008eb6:	4606      	mov	r6, r0
 8008eb8:	b928      	cbnz	r0, 8008ec6 <_calloc_r+0x1e>
 8008eba:	2600      	movs	r6, #0
 8008ebc:	4630      	mov	r0, r6
 8008ebe:	bd70      	pop	{r4, r5, r6, pc}
 8008ec0:	220c      	movs	r2, #12
 8008ec2:	6002      	str	r2, [r0, #0]
 8008ec4:	e7f9      	b.n	8008eba <_calloc_r+0x12>
 8008ec6:	462a      	mov	r2, r5
 8008ec8:	4621      	mov	r1, r4
 8008eca:	f7fe fa42 	bl	8007352 <memset>
 8008ece:	e7f5      	b.n	8008ebc <_calloc_r+0x14>

08008ed0 <__ascii_mbtowc>:
 8008ed0:	b082      	sub	sp, #8
 8008ed2:	b901      	cbnz	r1, 8008ed6 <__ascii_mbtowc+0x6>
 8008ed4:	a901      	add	r1, sp, #4
 8008ed6:	b142      	cbz	r2, 8008eea <__ascii_mbtowc+0x1a>
 8008ed8:	b14b      	cbz	r3, 8008eee <__ascii_mbtowc+0x1e>
 8008eda:	7813      	ldrb	r3, [r2, #0]
 8008edc:	600b      	str	r3, [r1, #0]
 8008ede:	7812      	ldrb	r2, [r2, #0]
 8008ee0:	1e10      	subs	r0, r2, #0
 8008ee2:	bf18      	it	ne
 8008ee4:	2001      	movne	r0, #1
 8008ee6:	b002      	add	sp, #8
 8008ee8:	4770      	bx	lr
 8008eea:	4610      	mov	r0, r2
 8008eec:	e7fb      	b.n	8008ee6 <__ascii_mbtowc+0x16>
 8008eee:	f06f 0001 	mvn.w	r0, #1
 8008ef2:	e7f8      	b.n	8008ee6 <__ascii_mbtowc+0x16>

08008ef4 <_realloc_r>:
 8008ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ef8:	4680      	mov	r8, r0
 8008efa:	4615      	mov	r5, r2
 8008efc:	460c      	mov	r4, r1
 8008efe:	b921      	cbnz	r1, 8008f0a <_realloc_r+0x16>
 8008f00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f04:	4611      	mov	r1, r2
 8008f06:	f7ff b967 	b.w	80081d8 <_malloc_r>
 8008f0a:	b92a      	cbnz	r2, 8008f18 <_realloc_r+0x24>
 8008f0c:	f7ff f8f0 	bl	80080f0 <_free_r>
 8008f10:	2400      	movs	r4, #0
 8008f12:	4620      	mov	r0, r4
 8008f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f18:	f000 f841 	bl	8008f9e <_malloc_usable_size_r>
 8008f1c:	4285      	cmp	r5, r0
 8008f1e:	4606      	mov	r6, r0
 8008f20:	d802      	bhi.n	8008f28 <_realloc_r+0x34>
 8008f22:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008f26:	d8f4      	bhi.n	8008f12 <_realloc_r+0x1e>
 8008f28:	4629      	mov	r1, r5
 8008f2a:	4640      	mov	r0, r8
 8008f2c:	f7ff f954 	bl	80081d8 <_malloc_r>
 8008f30:	4607      	mov	r7, r0
 8008f32:	2800      	cmp	r0, #0
 8008f34:	d0ec      	beq.n	8008f10 <_realloc_r+0x1c>
 8008f36:	42b5      	cmp	r5, r6
 8008f38:	462a      	mov	r2, r5
 8008f3a:	4621      	mov	r1, r4
 8008f3c:	bf28      	it	cs
 8008f3e:	4632      	movcs	r2, r6
 8008f40:	f7ff ff86 	bl	8008e50 <memcpy>
 8008f44:	4621      	mov	r1, r4
 8008f46:	4640      	mov	r0, r8
 8008f48:	f7ff f8d2 	bl	80080f0 <_free_r>
 8008f4c:	463c      	mov	r4, r7
 8008f4e:	e7e0      	b.n	8008f12 <_realloc_r+0x1e>

08008f50 <__ascii_wctomb>:
 8008f50:	4603      	mov	r3, r0
 8008f52:	4608      	mov	r0, r1
 8008f54:	b141      	cbz	r1, 8008f68 <__ascii_wctomb+0x18>
 8008f56:	2aff      	cmp	r2, #255	@ 0xff
 8008f58:	d904      	bls.n	8008f64 <__ascii_wctomb+0x14>
 8008f5a:	228a      	movs	r2, #138	@ 0x8a
 8008f5c:	601a      	str	r2, [r3, #0]
 8008f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f62:	4770      	bx	lr
 8008f64:	700a      	strb	r2, [r1, #0]
 8008f66:	2001      	movs	r0, #1
 8008f68:	4770      	bx	lr
	...

08008f6c <fiprintf>:
 8008f6c:	b40e      	push	{r1, r2, r3}
 8008f6e:	b503      	push	{r0, r1, lr}
 8008f70:	4601      	mov	r1, r0
 8008f72:	ab03      	add	r3, sp, #12
 8008f74:	4805      	ldr	r0, [pc, #20]	@ (8008f8c <fiprintf+0x20>)
 8008f76:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f7a:	6800      	ldr	r0, [r0, #0]
 8008f7c:	9301      	str	r3, [sp, #4]
 8008f7e:	f000 f83f 	bl	8009000 <_vfiprintf_r>
 8008f82:	b002      	add	sp, #8
 8008f84:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f88:	b003      	add	sp, #12
 8008f8a:	4770      	bx	lr
 8008f8c:	20000020 	.word	0x20000020

08008f90 <abort>:
 8008f90:	b508      	push	{r3, lr}
 8008f92:	2006      	movs	r0, #6
 8008f94:	f000 fa08 	bl	80093a8 <raise>
 8008f98:	2001      	movs	r0, #1
 8008f9a:	f7f9 fafd 	bl	8002598 <_exit>

08008f9e <_malloc_usable_size_r>:
 8008f9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fa2:	1f18      	subs	r0, r3, #4
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	bfbc      	itt	lt
 8008fa8:	580b      	ldrlt	r3, [r1, r0]
 8008faa:	18c0      	addlt	r0, r0, r3
 8008fac:	4770      	bx	lr

08008fae <__sfputc_r>:
 8008fae:	6893      	ldr	r3, [r2, #8]
 8008fb0:	3b01      	subs	r3, #1
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	b410      	push	{r4}
 8008fb6:	6093      	str	r3, [r2, #8]
 8008fb8:	da08      	bge.n	8008fcc <__sfputc_r+0x1e>
 8008fba:	6994      	ldr	r4, [r2, #24]
 8008fbc:	42a3      	cmp	r3, r4
 8008fbe:	db01      	blt.n	8008fc4 <__sfputc_r+0x16>
 8008fc0:	290a      	cmp	r1, #10
 8008fc2:	d103      	bne.n	8008fcc <__sfputc_r+0x1e>
 8008fc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fc8:	f000 b932 	b.w	8009230 <__swbuf_r>
 8008fcc:	6813      	ldr	r3, [r2, #0]
 8008fce:	1c58      	adds	r0, r3, #1
 8008fd0:	6010      	str	r0, [r2, #0]
 8008fd2:	7019      	strb	r1, [r3, #0]
 8008fd4:	4608      	mov	r0, r1
 8008fd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fda:	4770      	bx	lr

08008fdc <__sfputs_r>:
 8008fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fde:	4606      	mov	r6, r0
 8008fe0:	460f      	mov	r7, r1
 8008fe2:	4614      	mov	r4, r2
 8008fe4:	18d5      	adds	r5, r2, r3
 8008fe6:	42ac      	cmp	r4, r5
 8008fe8:	d101      	bne.n	8008fee <__sfputs_r+0x12>
 8008fea:	2000      	movs	r0, #0
 8008fec:	e007      	b.n	8008ffe <__sfputs_r+0x22>
 8008fee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ff2:	463a      	mov	r2, r7
 8008ff4:	4630      	mov	r0, r6
 8008ff6:	f7ff ffda 	bl	8008fae <__sfputc_r>
 8008ffa:	1c43      	adds	r3, r0, #1
 8008ffc:	d1f3      	bne.n	8008fe6 <__sfputs_r+0xa>
 8008ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009000 <_vfiprintf_r>:
 8009000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009004:	460d      	mov	r5, r1
 8009006:	b09d      	sub	sp, #116	@ 0x74
 8009008:	4614      	mov	r4, r2
 800900a:	4698      	mov	r8, r3
 800900c:	4606      	mov	r6, r0
 800900e:	b118      	cbz	r0, 8009018 <_vfiprintf_r+0x18>
 8009010:	6a03      	ldr	r3, [r0, #32]
 8009012:	b90b      	cbnz	r3, 8009018 <_vfiprintf_r+0x18>
 8009014:	f7fe f904 	bl	8007220 <__sinit>
 8009018:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800901a:	07d9      	lsls	r1, r3, #31
 800901c:	d405      	bmi.n	800902a <_vfiprintf_r+0x2a>
 800901e:	89ab      	ldrh	r3, [r5, #12]
 8009020:	059a      	lsls	r2, r3, #22
 8009022:	d402      	bmi.n	800902a <_vfiprintf_r+0x2a>
 8009024:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009026:	f7fe fa12 	bl	800744e <__retarget_lock_acquire_recursive>
 800902a:	89ab      	ldrh	r3, [r5, #12]
 800902c:	071b      	lsls	r3, r3, #28
 800902e:	d501      	bpl.n	8009034 <_vfiprintf_r+0x34>
 8009030:	692b      	ldr	r3, [r5, #16]
 8009032:	b99b      	cbnz	r3, 800905c <_vfiprintf_r+0x5c>
 8009034:	4629      	mov	r1, r5
 8009036:	4630      	mov	r0, r6
 8009038:	f000 f938 	bl	80092ac <__swsetup_r>
 800903c:	b170      	cbz	r0, 800905c <_vfiprintf_r+0x5c>
 800903e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009040:	07dc      	lsls	r4, r3, #31
 8009042:	d504      	bpl.n	800904e <_vfiprintf_r+0x4e>
 8009044:	f04f 30ff 	mov.w	r0, #4294967295
 8009048:	b01d      	add	sp, #116	@ 0x74
 800904a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800904e:	89ab      	ldrh	r3, [r5, #12]
 8009050:	0598      	lsls	r0, r3, #22
 8009052:	d4f7      	bmi.n	8009044 <_vfiprintf_r+0x44>
 8009054:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009056:	f7fe f9fb 	bl	8007450 <__retarget_lock_release_recursive>
 800905a:	e7f3      	b.n	8009044 <_vfiprintf_r+0x44>
 800905c:	2300      	movs	r3, #0
 800905e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009060:	2320      	movs	r3, #32
 8009062:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009066:	f8cd 800c 	str.w	r8, [sp, #12]
 800906a:	2330      	movs	r3, #48	@ 0x30
 800906c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800921c <_vfiprintf_r+0x21c>
 8009070:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009074:	f04f 0901 	mov.w	r9, #1
 8009078:	4623      	mov	r3, r4
 800907a:	469a      	mov	sl, r3
 800907c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009080:	b10a      	cbz	r2, 8009086 <_vfiprintf_r+0x86>
 8009082:	2a25      	cmp	r2, #37	@ 0x25
 8009084:	d1f9      	bne.n	800907a <_vfiprintf_r+0x7a>
 8009086:	ebba 0b04 	subs.w	fp, sl, r4
 800908a:	d00b      	beq.n	80090a4 <_vfiprintf_r+0xa4>
 800908c:	465b      	mov	r3, fp
 800908e:	4622      	mov	r2, r4
 8009090:	4629      	mov	r1, r5
 8009092:	4630      	mov	r0, r6
 8009094:	f7ff ffa2 	bl	8008fdc <__sfputs_r>
 8009098:	3001      	adds	r0, #1
 800909a:	f000 80a7 	beq.w	80091ec <_vfiprintf_r+0x1ec>
 800909e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090a0:	445a      	add	r2, fp
 80090a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80090a4:	f89a 3000 	ldrb.w	r3, [sl]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	f000 809f 	beq.w	80091ec <_vfiprintf_r+0x1ec>
 80090ae:	2300      	movs	r3, #0
 80090b0:	f04f 32ff 	mov.w	r2, #4294967295
 80090b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090b8:	f10a 0a01 	add.w	sl, sl, #1
 80090bc:	9304      	str	r3, [sp, #16]
 80090be:	9307      	str	r3, [sp, #28]
 80090c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80090c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80090c6:	4654      	mov	r4, sl
 80090c8:	2205      	movs	r2, #5
 80090ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090ce:	4853      	ldr	r0, [pc, #332]	@ (800921c <_vfiprintf_r+0x21c>)
 80090d0:	f7f7 f8ae 	bl	8000230 <memchr>
 80090d4:	9a04      	ldr	r2, [sp, #16]
 80090d6:	b9d8      	cbnz	r0, 8009110 <_vfiprintf_r+0x110>
 80090d8:	06d1      	lsls	r1, r2, #27
 80090da:	bf44      	itt	mi
 80090dc:	2320      	movmi	r3, #32
 80090de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80090e2:	0713      	lsls	r3, r2, #28
 80090e4:	bf44      	itt	mi
 80090e6:	232b      	movmi	r3, #43	@ 0x2b
 80090e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80090ec:	f89a 3000 	ldrb.w	r3, [sl]
 80090f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80090f2:	d015      	beq.n	8009120 <_vfiprintf_r+0x120>
 80090f4:	9a07      	ldr	r2, [sp, #28]
 80090f6:	4654      	mov	r4, sl
 80090f8:	2000      	movs	r0, #0
 80090fa:	f04f 0c0a 	mov.w	ip, #10
 80090fe:	4621      	mov	r1, r4
 8009100:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009104:	3b30      	subs	r3, #48	@ 0x30
 8009106:	2b09      	cmp	r3, #9
 8009108:	d94b      	bls.n	80091a2 <_vfiprintf_r+0x1a2>
 800910a:	b1b0      	cbz	r0, 800913a <_vfiprintf_r+0x13a>
 800910c:	9207      	str	r2, [sp, #28]
 800910e:	e014      	b.n	800913a <_vfiprintf_r+0x13a>
 8009110:	eba0 0308 	sub.w	r3, r0, r8
 8009114:	fa09 f303 	lsl.w	r3, r9, r3
 8009118:	4313      	orrs	r3, r2
 800911a:	9304      	str	r3, [sp, #16]
 800911c:	46a2      	mov	sl, r4
 800911e:	e7d2      	b.n	80090c6 <_vfiprintf_r+0xc6>
 8009120:	9b03      	ldr	r3, [sp, #12]
 8009122:	1d19      	adds	r1, r3, #4
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	9103      	str	r1, [sp, #12]
 8009128:	2b00      	cmp	r3, #0
 800912a:	bfbb      	ittet	lt
 800912c:	425b      	neglt	r3, r3
 800912e:	f042 0202 	orrlt.w	r2, r2, #2
 8009132:	9307      	strge	r3, [sp, #28]
 8009134:	9307      	strlt	r3, [sp, #28]
 8009136:	bfb8      	it	lt
 8009138:	9204      	strlt	r2, [sp, #16]
 800913a:	7823      	ldrb	r3, [r4, #0]
 800913c:	2b2e      	cmp	r3, #46	@ 0x2e
 800913e:	d10a      	bne.n	8009156 <_vfiprintf_r+0x156>
 8009140:	7863      	ldrb	r3, [r4, #1]
 8009142:	2b2a      	cmp	r3, #42	@ 0x2a
 8009144:	d132      	bne.n	80091ac <_vfiprintf_r+0x1ac>
 8009146:	9b03      	ldr	r3, [sp, #12]
 8009148:	1d1a      	adds	r2, r3, #4
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	9203      	str	r2, [sp, #12]
 800914e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009152:	3402      	adds	r4, #2
 8009154:	9305      	str	r3, [sp, #20]
 8009156:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800922c <_vfiprintf_r+0x22c>
 800915a:	7821      	ldrb	r1, [r4, #0]
 800915c:	2203      	movs	r2, #3
 800915e:	4650      	mov	r0, sl
 8009160:	f7f7 f866 	bl	8000230 <memchr>
 8009164:	b138      	cbz	r0, 8009176 <_vfiprintf_r+0x176>
 8009166:	9b04      	ldr	r3, [sp, #16]
 8009168:	eba0 000a 	sub.w	r0, r0, sl
 800916c:	2240      	movs	r2, #64	@ 0x40
 800916e:	4082      	lsls	r2, r0
 8009170:	4313      	orrs	r3, r2
 8009172:	3401      	adds	r4, #1
 8009174:	9304      	str	r3, [sp, #16]
 8009176:	f814 1b01 	ldrb.w	r1, [r4], #1
 800917a:	4829      	ldr	r0, [pc, #164]	@ (8009220 <_vfiprintf_r+0x220>)
 800917c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009180:	2206      	movs	r2, #6
 8009182:	f7f7 f855 	bl	8000230 <memchr>
 8009186:	2800      	cmp	r0, #0
 8009188:	d03f      	beq.n	800920a <_vfiprintf_r+0x20a>
 800918a:	4b26      	ldr	r3, [pc, #152]	@ (8009224 <_vfiprintf_r+0x224>)
 800918c:	bb1b      	cbnz	r3, 80091d6 <_vfiprintf_r+0x1d6>
 800918e:	9b03      	ldr	r3, [sp, #12]
 8009190:	3307      	adds	r3, #7
 8009192:	f023 0307 	bic.w	r3, r3, #7
 8009196:	3308      	adds	r3, #8
 8009198:	9303      	str	r3, [sp, #12]
 800919a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800919c:	443b      	add	r3, r7
 800919e:	9309      	str	r3, [sp, #36]	@ 0x24
 80091a0:	e76a      	b.n	8009078 <_vfiprintf_r+0x78>
 80091a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80091a6:	460c      	mov	r4, r1
 80091a8:	2001      	movs	r0, #1
 80091aa:	e7a8      	b.n	80090fe <_vfiprintf_r+0xfe>
 80091ac:	2300      	movs	r3, #0
 80091ae:	3401      	adds	r4, #1
 80091b0:	9305      	str	r3, [sp, #20]
 80091b2:	4619      	mov	r1, r3
 80091b4:	f04f 0c0a 	mov.w	ip, #10
 80091b8:	4620      	mov	r0, r4
 80091ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091be:	3a30      	subs	r2, #48	@ 0x30
 80091c0:	2a09      	cmp	r2, #9
 80091c2:	d903      	bls.n	80091cc <_vfiprintf_r+0x1cc>
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d0c6      	beq.n	8009156 <_vfiprintf_r+0x156>
 80091c8:	9105      	str	r1, [sp, #20]
 80091ca:	e7c4      	b.n	8009156 <_vfiprintf_r+0x156>
 80091cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80091d0:	4604      	mov	r4, r0
 80091d2:	2301      	movs	r3, #1
 80091d4:	e7f0      	b.n	80091b8 <_vfiprintf_r+0x1b8>
 80091d6:	ab03      	add	r3, sp, #12
 80091d8:	9300      	str	r3, [sp, #0]
 80091da:	462a      	mov	r2, r5
 80091dc:	4b12      	ldr	r3, [pc, #72]	@ (8009228 <_vfiprintf_r+0x228>)
 80091de:	a904      	add	r1, sp, #16
 80091e0:	4630      	mov	r0, r6
 80091e2:	f7fd fbd9 	bl	8006998 <_printf_float>
 80091e6:	4607      	mov	r7, r0
 80091e8:	1c78      	adds	r0, r7, #1
 80091ea:	d1d6      	bne.n	800919a <_vfiprintf_r+0x19a>
 80091ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80091ee:	07d9      	lsls	r1, r3, #31
 80091f0:	d405      	bmi.n	80091fe <_vfiprintf_r+0x1fe>
 80091f2:	89ab      	ldrh	r3, [r5, #12]
 80091f4:	059a      	lsls	r2, r3, #22
 80091f6:	d402      	bmi.n	80091fe <_vfiprintf_r+0x1fe>
 80091f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80091fa:	f7fe f929 	bl	8007450 <__retarget_lock_release_recursive>
 80091fe:	89ab      	ldrh	r3, [r5, #12]
 8009200:	065b      	lsls	r3, r3, #25
 8009202:	f53f af1f 	bmi.w	8009044 <_vfiprintf_r+0x44>
 8009206:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009208:	e71e      	b.n	8009048 <_vfiprintf_r+0x48>
 800920a:	ab03      	add	r3, sp, #12
 800920c:	9300      	str	r3, [sp, #0]
 800920e:	462a      	mov	r2, r5
 8009210:	4b05      	ldr	r3, [pc, #20]	@ (8009228 <_vfiprintf_r+0x228>)
 8009212:	a904      	add	r1, sp, #16
 8009214:	4630      	mov	r0, r6
 8009216:	f7fd fe57 	bl	8006ec8 <_printf_i>
 800921a:	e7e4      	b.n	80091e6 <_vfiprintf_r+0x1e6>
 800921c:	08009798 	.word	0x08009798
 8009220:	080097a2 	.word	0x080097a2
 8009224:	08006999 	.word	0x08006999
 8009228:	08008fdd 	.word	0x08008fdd
 800922c:	0800979e 	.word	0x0800979e

08009230 <__swbuf_r>:
 8009230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009232:	460e      	mov	r6, r1
 8009234:	4614      	mov	r4, r2
 8009236:	4605      	mov	r5, r0
 8009238:	b118      	cbz	r0, 8009242 <__swbuf_r+0x12>
 800923a:	6a03      	ldr	r3, [r0, #32]
 800923c:	b90b      	cbnz	r3, 8009242 <__swbuf_r+0x12>
 800923e:	f7fd ffef 	bl	8007220 <__sinit>
 8009242:	69a3      	ldr	r3, [r4, #24]
 8009244:	60a3      	str	r3, [r4, #8]
 8009246:	89a3      	ldrh	r3, [r4, #12]
 8009248:	071a      	lsls	r2, r3, #28
 800924a:	d501      	bpl.n	8009250 <__swbuf_r+0x20>
 800924c:	6923      	ldr	r3, [r4, #16]
 800924e:	b943      	cbnz	r3, 8009262 <__swbuf_r+0x32>
 8009250:	4621      	mov	r1, r4
 8009252:	4628      	mov	r0, r5
 8009254:	f000 f82a 	bl	80092ac <__swsetup_r>
 8009258:	b118      	cbz	r0, 8009262 <__swbuf_r+0x32>
 800925a:	f04f 37ff 	mov.w	r7, #4294967295
 800925e:	4638      	mov	r0, r7
 8009260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009262:	6823      	ldr	r3, [r4, #0]
 8009264:	6922      	ldr	r2, [r4, #16]
 8009266:	1a98      	subs	r0, r3, r2
 8009268:	6963      	ldr	r3, [r4, #20]
 800926a:	b2f6      	uxtb	r6, r6
 800926c:	4283      	cmp	r3, r0
 800926e:	4637      	mov	r7, r6
 8009270:	dc05      	bgt.n	800927e <__swbuf_r+0x4e>
 8009272:	4621      	mov	r1, r4
 8009274:	4628      	mov	r0, r5
 8009276:	f7ff fd99 	bl	8008dac <_fflush_r>
 800927a:	2800      	cmp	r0, #0
 800927c:	d1ed      	bne.n	800925a <__swbuf_r+0x2a>
 800927e:	68a3      	ldr	r3, [r4, #8]
 8009280:	3b01      	subs	r3, #1
 8009282:	60a3      	str	r3, [r4, #8]
 8009284:	6823      	ldr	r3, [r4, #0]
 8009286:	1c5a      	adds	r2, r3, #1
 8009288:	6022      	str	r2, [r4, #0]
 800928a:	701e      	strb	r6, [r3, #0]
 800928c:	6962      	ldr	r2, [r4, #20]
 800928e:	1c43      	adds	r3, r0, #1
 8009290:	429a      	cmp	r2, r3
 8009292:	d004      	beq.n	800929e <__swbuf_r+0x6e>
 8009294:	89a3      	ldrh	r3, [r4, #12]
 8009296:	07db      	lsls	r3, r3, #31
 8009298:	d5e1      	bpl.n	800925e <__swbuf_r+0x2e>
 800929a:	2e0a      	cmp	r6, #10
 800929c:	d1df      	bne.n	800925e <__swbuf_r+0x2e>
 800929e:	4621      	mov	r1, r4
 80092a0:	4628      	mov	r0, r5
 80092a2:	f7ff fd83 	bl	8008dac <_fflush_r>
 80092a6:	2800      	cmp	r0, #0
 80092a8:	d0d9      	beq.n	800925e <__swbuf_r+0x2e>
 80092aa:	e7d6      	b.n	800925a <__swbuf_r+0x2a>

080092ac <__swsetup_r>:
 80092ac:	b538      	push	{r3, r4, r5, lr}
 80092ae:	4b29      	ldr	r3, [pc, #164]	@ (8009354 <__swsetup_r+0xa8>)
 80092b0:	4605      	mov	r5, r0
 80092b2:	6818      	ldr	r0, [r3, #0]
 80092b4:	460c      	mov	r4, r1
 80092b6:	b118      	cbz	r0, 80092c0 <__swsetup_r+0x14>
 80092b8:	6a03      	ldr	r3, [r0, #32]
 80092ba:	b90b      	cbnz	r3, 80092c0 <__swsetup_r+0x14>
 80092bc:	f7fd ffb0 	bl	8007220 <__sinit>
 80092c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092c4:	0719      	lsls	r1, r3, #28
 80092c6:	d422      	bmi.n	800930e <__swsetup_r+0x62>
 80092c8:	06da      	lsls	r2, r3, #27
 80092ca:	d407      	bmi.n	80092dc <__swsetup_r+0x30>
 80092cc:	2209      	movs	r2, #9
 80092ce:	602a      	str	r2, [r5, #0]
 80092d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092d4:	81a3      	strh	r3, [r4, #12]
 80092d6:	f04f 30ff 	mov.w	r0, #4294967295
 80092da:	e033      	b.n	8009344 <__swsetup_r+0x98>
 80092dc:	0758      	lsls	r0, r3, #29
 80092de:	d512      	bpl.n	8009306 <__swsetup_r+0x5a>
 80092e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80092e2:	b141      	cbz	r1, 80092f6 <__swsetup_r+0x4a>
 80092e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80092e8:	4299      	cmp	r1, r3
 80092ea:	d002      	beq.n	80092f2 <__swsetup_r+0x46>
 80092ec:	4628      	mov	r0, r5
 80092ee:	f7fe feff 	bl	80080f0 <_free_r>
 80092f2:	2300      	movs	r3, #0
 80092f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80092f6:	89a3      	ldrh	r3, [r4, #12]
 80092f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80092fc:	81a3      	strh	r3, [r4, #12]
 80092fe:	2300      	movs	r3, #0
 8009300:	6063      	str	r3, [r4, #4]
 8009302:	6923      	ldr	r3, [r4, #16]
 8009304:	6023      	str	r3, [r4, #0]
 8009306:	89a3      	ldrh	r3, [r4, #12]
 8009308:	f043 0308 	orr.w	r3, r3, #8
 800930c:	81a3      	strh	r3, [r4, #12]
 800930e:	6923      	ldr	r3, [r4, #16]
 8009310:	b94b      	cbnz	r3, 8009326 <__swsetup_r+0x7a>
 8009312:	89a3      	ldrh	r3, [r4, #12]
 8009314:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009318:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800931c:	d003      	beq.n	8009326 <__swsetup_r+0x7a>
 800931e:	4621      	mov	r1, r4
 8009320:	4628      	mov	r0, r5
 8009322:	f000 f883 	bl	800942c <__smakebuf_r>
 8009326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800932a:	f013 0201 	ands.w	r2, r3, #1
 800932e:	d00a      	beq.n	8009346 <__swsetup_r+0x9a>
 8009330:	2200      	movs	r2, #0
 8009332:	60a2      	str	r2, [r4, #8]
 8009334:	6962      	ldr	r2, [r4, #20]
 8009336:	4252      	negs	r2, r2
 8009338:	61a2      	str	r2, [r4, #24]
 800933a:	6922      	ldr	r2, [r4, #16]
 800933c:	b942      	cbnz	r2, 8009350 <__swsetup_r+0xa4>
 800933e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009342:	d1c5      	bne.n	80092d0 <__swsetup_r+0x24>
 8009344:	bd38      	pop	{r3, r4, r5, pc}
 8009346:	0799      	lsls	r1, r3, #30
 8009348:	bf58      	it	pl
 800934a:	6962      	ldrpl	r2, [r4, #20]
 800934c:	60a2      	str	r2, [r4, #8]
 800934e:	e7f4      	b.n	800933a <__swsetup_r+0x8e>
 8009350:	2000      	movs	r0, #0
 8009352:	e7f7      	b.n	8009344 <__swsetup_r+0x98>
 8009354:	20000020 	.word	0x20000020

08009358 <_raise_r>:
 8009358:	291f      	cmp	r1, #31
 800935a:	b538      	push	{r3, r4, r5, lr}
 800935c:	4605      	mov	r5, r0
 800935e:	460c      	mov	r4, r1
 8009360:	d904      	bls.n	800936c <_raise_r+0x14>
 8009362:	2316      	movs	r3, #22
 8009364:	6003      	str	r3, [r0, #0]
 8009366:	f04f 30ff 	mov.w	r0, #4294967295
 800936a:	bd38      	pop	{r3, r4, r5, pc}
 800936c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800936e:	b112      	cbz	r2, 8009376 <_raise_r+0x1e>
 8009370:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009374:	b94b      	cbnz	r3, 800938a <_raise_r+0x32>
 8009376:	4628      	mov	r0, r5
 8009378:	f000 f830 	bl	80093dc <_getpid_r>
 800937c:	4622      	mov	r2, r4
 800937e:	4601      	mov	r1, r0
 8009380:	4628      	mov	r0, r5
 8009382:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009386:	f000 b817 	b.w	80093b8 <_kill_r>
 800938a:	2b01      	cmp	r3, #1
 800938c:	d00a      	beq.n	80093a4 <_raise_r+0x4c>
 800938e:	1c59      	adds	r1, r3, #1
 8009390:	d103      	bne.n	800939a <_raise_r+0x42>
 8009392:	2316      	movs	r3, #22
 8009394:	6003      	str	r3, [r0, #0]
 8009396:	2001      	movs	r0, #1
 8009398:	e7e7      	b.n	800936a <_raise_r+0x12>
 800939a:	2100      	movs	r1, #0
 800939c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80093a0:	4620      	mov	r0, r4
 80093a2:	4798      	blx	r3
 80093a4:	2000      	movs	r0, #0
 80093a6:	e7e0      	b.n	800936a <_raise_r+0x12>

080093a8 <raise>:
 80093a8:	4b02      	ldr	r3, [pc, #8]	@ (80093b4 <raise+0xc>)
 80093aa:	4601      	mov	r1, r0
 80093ac:	6818      	ldr	r0, [r3, #0]
 80093ae:	f7ff bfd3 	b.w	8009358 <_raise_r>
 80093b2:	bf00      	nop
 80093b4:	20000020 	.word	0x20000020

080093b8 <_kill_r>:
 80093b8:	b538      	push	{r3, r4, r5, lr}
 80093ba:	4d07      	ldr	r5, [pc, #28]	@ (80093d8 <_kill_r+0x20>)
 80093bc:	2300      	movs	r3, #0
 80093be:	4604      	mov	r4, r0
 80093c0:	4608      	mov	r0, r1
 80093c2:	4611      	mov	r1, r2
 80093c4:	602b      	str	r3, [r5, #0]
 80093c6:	f7f9 f8d7 	bl	8002578 <_kill>
 80093ca:	1c43      	adds	r3, r0, #1
 80093cc:	d102      	bne.n	80093d4 <_kill_r+0x1c>
 80093ce:	682b      	ldr	r3, [r5, #0]
 80093d0:	b103      	cbz	r3, 80093d4 <_kill_r+0x1c>
 80093d2:	6023      	str	r3, [r4, #0]
 80093d4:	bd38      	pop	{r3, r4, r5, pc}
 80093d6:	bf00      	nop
 80093d8:	20000578 	.word	0x20000578

080093dc <_getpid_r>:
 80093dc:	f7f9 b8c4 	b.w	8002568 <_getpid>

080093e0 <__swhatbuf_r>:
 80093e0:	b570      	push	{r4, r5, r6, lr}
 80093e2:	460c      	mov	r4, r1
 80093e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093e8:	2900      	cmp	r1, #0
 80093ea:	b096      	sub	sp, #88	@ 0x58
 80093ec:	4615      	mov	r5, r2
 80093ee:	461e      	mov	r6, r3
 80093f0:	da0d      	bge.n	800940e <__swhatbuf_r+0x2e>
 80093f2:	89a3      	ldrh	r3, [r4, #12]
 80093f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80093f8:	f04f 0100 	mov.w	r1, #0
 80093fc:	bf14      	ite	ne
 80093fe:	2340      	movne	r3, #64	@ 0x40
 8009400:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009404:	2000      	movs	r0, #0
 8009406:	6031      	str	r1, [r6, #0]
 8009408:	602b      	str	r3, [r5, #0]
 800940a:	b016      	add	sp, #88	@ 0x58
 800940c:	bd70      	pop	{r4, r5, r6, pc}
 800940e:	466a      	mov	r2, sp
 8009410:	f000 f848 	bl	80094a4 <_fstat_r>
 8009414:	2800      	cmp	r0, #0
 8009416:	dbec      	blt.n	80093f2 <__swhatbuf_r+0x12>
 8009418:	9901      	ldr	r1, [sp, #4]
 800941a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800941e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009422:	4259      	negs	r1, r3
 8009424:	4159      	adcs	r1, r3
 8009426:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800942a:	e7eb      	b.n	8009404 <__swhatbuf_r+0x24>

0800942c <__smakebuf_r>:
 800942c:	898b      	ldrh	r3, [r1, #12]
 800942e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009430:	079d      	lsls	r5, r3, #30
 8009432:	4606      	mov	r6, r0
 8009434:	460c      	mov	r4, r1
 8009436:	d507      	bpl.n	8009448 <__smakebuf_r+0x1c>
 8009438:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800943c:	6023      	str	r3, [r4, #0]
 800943e:	6123      	str	r3, [r4, #16]
 8009440:	2301      	movs	r3, #1
 8009442:	6163      	str	r3, [r4, #20]
 8009444:	b003      	add	sp, #12
 8009446:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009448:	ab01      	add	r3, sp, #4
 800944a:	466a      	mov	r2, sp
 800944c:	f7ff ffc8 	bl	80093e0 <__swhatbuf_r>
 8009450:	9f00      	ldr	r7, [sp, #0]
 8009452:	4605      	mov	r5, r0
 8009454:	4639      	mov	r1, r7
 8009456:	4630      	mov	r0, r6
 8009458:	f7fe febe 	bl	80081d8 <_malloc_r>
 800945c:	b948      	cbnz	r0, 8009472 <__smakebuf_r+0x46>
 800945e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009462:	059a      	lsls	r2, r3, #22
 8009464:	d4ee      	bmi.n	8009444 <__smakebuf_r+0x18>
 8009466:	f023 0303 	bic.w	r3, r3, #3
 800946a:	f043 0302 	orr.w	r3, r3, #2
 800946e:	81a3      	strh	r3, [r4, #12]
 8009470:	e7e2      	b.n	8009438 <__smakebuf_r+0xc>
 8009472:	89a3      	ldrh	r3, [r4, #12]
 8009474:	6020      	str	r0, [r4, #0]
 8009476:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800947a:	81a3      	strh	r3, [r4, #12]
 800947c:	9b01      	ldr	r3, [sp, #4]
 800947e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009482:	b15b      	cbz	r3, 800949c <__smakebuf_r+0x70>
 8009484:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009488:	4630      	mov	r0, r6
 800948a:	f000 f81d 	bl	80094c8 <_isatty_r>
 800948e:	b128      	cbz	r0, 800949c <__smakebuf_r+0x70>
 8009490:	89a3      	ldrh	r3, [r4, #12]
 8009492:	f023 0303 	bic.w	r3, r3, #3
 8009496:	f043 0301 	orr.w	r3, r3, #1
 800949a:	81a3      	strh	r3, [r4, #12]
 800949c:	89a3      	ldrh	r3, [r4, #12]
 800949e:	431d      	orrs	r5, r3
 80094a0:	81a5      	strh	r5, [r4, #12]
 80094a2:	e7cf      	b.n	8009444 <__smakebuf_r+0x18>

080094a4 <_fstat_r>:
 80094a4:	b538      	push	{r3, r4, r5, lr}
 80094a6:	4d07      	ldr	r5, [pc, #28]	@ (80094c4 <_fstat_r+0x20>)
 80094a8:	2300      	movs	r3, #0
 80094aa:	4604      	mov	r4, r0
 80094ac:	4608      	mov	r0, r1
 80094ae:	4611      	mov	r1, r2
 80094b0:	602b      	str	r3, [r5, #0]
 80094b2:	f7f9 f8c1 	bl	8002638 <_fstat>
 80094b6:	1c43      	adds	r3, r0, #1
 80094b8:	d102      	bne.n	80094c0 <_fstat_r+0x1c>
 80094ba:	682b      	ldr	r3, [r5, #0]
 80094bc:	b103      	cbz	r3, 80094c0 <_fstat_r+0x1c>
 80094be:	6023      	str	r3, [r4, #0]
 80094c0:	bd38      	pop	{r3, r4, r5, pc}
 80094c2:	bf00      	nop
 80094c4:	20000578 	.word	0x20000578

080094c8 <_isatty_r>:
 80094c8:	b538      	push	{r3, r4, r5, lr}
 80094ca:	4d06      	ldr	r5, [pc, #24]	@ (80094e4 <_isatty_r+0x1c>)
 80094cc:	2300      	movs	r3, #0
 80094ce:	4604      	mov	r4, r0
 80094d0:	4608      	mov	r0, r1
 80094d2:	602b      	str	r3, [r5, #0]
 80094d4:	f7f9 f8c0 	bl	8002658 <_isatty>
 80094d8:	1c43      	adds	r3, r0, #1
 80094da:	d102      	bne.n	80094e2 <_isatty_r+0x1a>
 80094dc:	682b      	ldr	r3, [r5, #0]
 80094de:	b103      	cbz	r3, 80094e2 <_isatty_r+0x1a>
 80094e0:	6023      	str	r3, [r4, #0]
 80094e2:	bd38      	pop	{r3, r4, r5, pc}
 80094e4:	20000578 	.word	0x20000578

080094e8 <_init>:
 80094e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ea:	bf00      	nop
 80094ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094ee:	bc08      	pop	{r3}
 80094f0:	469e      	mov	lr, r3
 80094f2:	4770      	bx	lr

080094f4 <_fini>:
 80094f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094f6:	bf00      	nop
 80094f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094fa:	bc08      	pop	{r3}
 80094fc:	469e      	mov	lr, r3
 80094fe:	4770      	bx	lr
